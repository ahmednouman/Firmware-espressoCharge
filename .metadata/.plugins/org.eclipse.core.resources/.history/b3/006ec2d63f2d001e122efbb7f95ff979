#include <stdio.h>
#include "initialise.h"
#include "FreeRTOS.h"
#include "task.h"

uint32_t SystemCoreClock = 8000000;

void host_comms(void* parameters);
void device_task(void* parameters);

//extern I2C_Handle_t I2C1Handle;
//extern USART_Handle_t usart1_handle;

//extern uint8_t pd_cmd_status;
//extern uint8_t pd_cmd_task_result;

//uint8_t plugAction;
//uint8_t power_direction;

BatteryReport pbatReport;

static rxCmplt = RESET;

char msg[MSG_SIZE] = {0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x0, '\n'};
char rx_buf[32];
uint8_t rcv_len = 5;
uint8_t lenByte;

int main(void)
{
 	IO_Init();
	I2c_Init();
	USART1_Init();
	pd_interrupt_clear_all(&I2C1Handle);
	pd_interrupt_mask(&I2C1Handle);
	Knock_Interrupt_Init();
	PD_Interrupt_Init();

	pd_swap_to_UFP(&I2C1Handle);

//	pd_swap_to_sink(&I2C1Handle);

	plugAction = pd_get_plug_detect(&I2C1Handle);
	if(plugAction == PD_PLUG_CONNECTED){
		power_direction = pd_get_power_direction(&I2C1Handle);
	}

 	TaskHandle_t hostComms_handle;
    TaskHandle_t deviceTask_handle;

 	BaseType_t status;

// 	status = xTaskCreate(host_comms, "Host_Comms", 20, NULL, 2, &hostComms_handle);
//    configASSERT(status == pdPASS);

 	status = xTaskCreate(device_task, "Device_Task", 20, NULL, 2, &deviceTask_handle);
    configASSERT(status == pdPASS);

     vTaskStartScheduler();

	while(1)
	{
	}

    return 0;
}

void host_comms(void* parameters)
{
    while ( USART_ReceiveDataIT(&usart1_handle, rx_buf, rcv_len) != USART_READY );
	while(1)
	{
		if(rxCmplt == SET)
		{
			while ( USART_ReceiveDataIT(&usart1_handle, rx_buf, rcv_len) != USART_READY );
			if(rx_buf[0] == 0x02 && rx_buf[4] == 0x03)
			{
				if(rx_buf[1] == 0xF3){
					if(rx_buf[2] == 0x00){
						msg[2] = pbatReport.bat_level;
						msg[4] = pbatReport.volt & 0xFF;
						msg[5] = (pbatReport.volt >> 8) & 0xFF;
						msg[7] = pbatReport.current & 0xFF;
						msg[8] = (pbatReport.current >> 8) & 0xFF;
						msg[10] = 0x01;
						while( USART_SendDataIT(&usart1_handle, msg, 11) != USART_READY);
					}else if(rx_buf[2] == 0x01){
						msg[1] = 0x4;
						msg[2] = FW_VERSION & 0xFF;
						msg[3] = (FW_VERSION >> 8) & 0xFF;
						msg[4] = (FW_VERSION >> 16) & 0xFF;
						msg[5] = (FW_VERSION >> 24) & 0xFF;
						msg[6] = 0x03;
						while( USART_SendDataIT(&usart1_handle, msg, 7) != USART_READY);
					}
				}else if(rx_buf[1] == 0xF2){
					if(rx_buf[2] == 0x38){
						if(rx_buf[3] == 0x01){
							//swap to sink
							pd_swap_to_sink(&I2C1Handle);
						}else if(rx_buf[3] == 0x02){
							//swap to source
							pd_swap_to_source(&I2C1Handle);
							delay(500000);
							pd_swap_to_UFP(&I2C1Handle);
						}
					}
				}
				else if(rx_buf[1] == 0xF0){
					if(rx_buf[2] == 0x77){
						//mcu f/w update
					}else if(rx_buf[2] == 0x57){
						//pd f/w update
					}
				}
				rxCmplt = RESET;
			}
		}

		vTaskDelay(pdMS_TO_TICKS(1000));
		taskYIELD();
	}
}

void device_task(void* parameters)
{
	uint8_t power_dir, plug;
	while(1)
	{
		if(plugAction == PD_PLUG_CONNECTED){
			if(power_direction == SOURCING)
			{
				ledOnOff(LED0, ON);
				ledOnOff(LED1, ON);
			}else if (power_direction == SINKING)
			{
				ledOnOff(LED0, ON);
				ledOnOff(LED1, ON);
				setLED(LED2);
			}
		}else
		{
			ledOnOff(LED0, OFF);
		    ledOnOff(LED1, OFF);
		    ledOnOff(LED2, OFF);
		}


		vTaskDelay(pdMS_TO_TICKS(1000));
		//delay(1000000);
		taskYIELD();
	}
}

void EXTI4_15_IRQHandler(void)
{
    uint8_t pd_val, knock_val;
    pd_val = GPIO_ReadFromInputPin(GPIOA, PD_INTERRUPT);
    knock_val = GPIO_ReadFromInputPin(GPIOA, KNOCK_INTERRUPT);
    delay(5000000);
    if(pd_val == 0)
    {
    	GPIO_IRQHandling(PD_INTERRUPT);
    	pd_IRQHandling(&I2C1Handle);
    }
    if(knock_val == 1)
    {
    	GPIO_IRQHandling(KNOCK_INTERRUPT);
    	knock_IRQHandling();
    }
}

void I2C1_IRQHandler(void)
{
	I2C_EV_IRQHandling(&I2C1Handle);
}

void USART1_IRQHandler(void)
{
	USART_IRQHandling(&usart1_handle);
}

void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
   if(ApEv == USART_EVENT_RX_CMPLT)
   {
       rxCmplt = SET;

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {

   }
}


