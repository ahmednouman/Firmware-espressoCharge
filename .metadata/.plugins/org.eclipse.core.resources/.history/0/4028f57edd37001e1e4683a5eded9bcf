#include <stdio.h>
#include "initialise.h"
#include "FreeRTOS.h"
#include "task.h"

uint32_t SystemCoreClock = 8000000;

void host_comms(void* parameters);
void device_task(void* parameters);
void UFP_task(void* parameters);

BatteryReport pbatReport;

static rxCmplt = RESET;
static uint8_t serialDataHead, dataCount = 0;

//uint8_t msg[MSG_SIZE] = { 0x12, 0x00, 0x00, 0x07, 0x05 };
//uint8_t msg[MSG_SIZE] = { 0x01, 0x00, 0x05, 0x00, 0x08 };
uint8_t msg[MSG_SIZE];
uint8_t encMsg[MSG_SIZE];
uint8_t encDataLen;
volatile uint8_t rx_buf[MSG_SIZE];
uint8_t rcv_len = 1;
uint8_t lenByte;
volatile uint8_t rxCount = 0;

int main(void)
{
	delay(1000000);
 	IO_Init();
	I2c_Init();
	USART1_Init();
	pd_interrupt_clear_all(&I2C1Handle);
	pd_interrupt_mask(&I2C1Handle);
	Knock_Interrupt_Init();
	PD_Interrupt_Init();
//	chg_setup_charge_power(&I2C1Handle);

//	get_bat_level(&I2C1Handle, &pbatReport);

	pd_swap_to_UFP(&I2C1Handle);

	plugAction = pd_get_plug_detect(&I2C1Handle);
	if(plugAction == PD_PLUG_CONNECTED){
		power_direction = pd_get_power_direction(&I2C1Handle);
	}

 	TaskHandle_t hostComms_handle;
    TaskHandle_t deviceTask_handle;

 	BaseType_t status;

 	status = xTaskCreate(host_comms, "Host_Comms", 120, NULL, 2, &hostComms_handle);
    configASSERT(status == pdPASS);

 	status = xTaskCreate(device_task, "Device_Task", 20, NULL, 2, &deviceTask_handle);
    configASSERT(status == pdPASS);

     vTaskStartScheduler();

	while(1)
	{
	}

    return 0;
}

void host_comms(void* parameters)
{
	uint8_t temp, temp2;
    while (USART_ReceiveDataIT(&usart1_handle, &rx_buf[0], rcv_len) != USART_READY );
	while(1)
	{
//		if(rxCmplt == SET)
//		{
//			rxCmplt = RESET;
//			serialDataHead = rx_buf[0];
//			dataCount++;
//			while(1)
//			{
//				USART_ReceiveData(&usart1_handle, &rx_buf[dataCount], serialDataHead);
//				if(rx_buf[serialDataHead  + dataCount - 1] != 0){
//					dataCount = dataCount + serialDataHead;
//					serialDataHead = rx_buf[dataCount - 1];
//					rx_buf[dataCount - 1] = 0x00;
//				}else
//				{
//					break;
//				}
//			}
//			dataCount = 0;
//			if(rx_buf[1] == 0xF2 && rx_buf[2] == 0x02 && rx_buf[3] == 0x01){
//				pd_swap_to_sink(&I2C1Handle);
//				power_direction = pd_get_power_direction(&I2C1Handle);
//			}else if(rx_buf[1] == 0xF2 && rx_buf[2] == 0x02 && rx_buf[3] == 0x02){
//				pd_swap_to_source(&I2C1Handle);
//				vTaskDelay(pdMS_TO_TICKS(1000));
//				pd_swap_to_UFP(&I2C1Handle);
//				power_direction = pd_get_power_direction(&I2C1Handle);
//			}else if(rx_buf[1] == 0xF3 && rx_buf[2] == 0x01 && rx_buf[3] == 0x08){
//				msg[0] = FW_VERSION & 0xFF;
//				msg[1] = (FW_VERSION >> 8) & 0xFF;
//				msg[2] = (FW_VERSION >> 16) & 0xFF;
//				msg[3] = (FW_VERSION >> 24) & 0xFF;
//				encodeData(&msg[0], 4, &encMsg[0], &encDataLen);
//				temp = encDataLen;
//				temp2 = 0;
//				while(temp > 0){
//				    while( USART_SendDataIT(&usart1_handle, &encMsg[temp2], 1) != USART_READY);
//					delay(100000);
//					temp--;
//					temp2++;
//				}
//			}else if(rx_buf[1] == 0xF3 && rx_buf[2] == 0x05 && rx_buf[3] == 0x10){
//				get_bat_report(&I2C1Handle, &pbatReport);
//				msg[0] = pbatReport.SOC;
//				msg[1] = pbatReport.SOH;
//				msg[2] = pbatReport.remainingCapacity[0];
//				msg[3] = pbatReport.remainingCapacity[1];
//				msg[4] = pbatReport.fullCapacity[0];
//				msg[5] = pbatReport.fullCapacity[1];
//				msg[6] = pbatReport.voltage[0];
//				msg[7] = pbatReport.voltage[1];
//				msg[8] = pbatReport.current[0];
//				msg[9] = pbatReport.current[1];
//				msg[10] = pbatReport.temperature[0];
//				msg[11] = pbatReport.temperature[1];
//				msg[12] = pbatReport.timeToEmpty[0];
//				msg[13] = pbatReport.timeToEmpty[1];
//				msg[14] = pbatReport.timeToFull[0];
//				msg[15] = pbatReport.timeToFull[1];
//				msg[16] = power_direction;
//				encodeData(&msg[0], 17, &encMsg[0], &encDataLen);
//				temp = encDataLen;
//				temp2 = 0;
//				while(temp > 0){
//				    while( USART_SendDataIT(&usart1_handle, &encMsg[temp2], 1) != USART_READY);
//					delay(100000);
//					temp--;
//					temp2++;
//				}
//			}
//			while ( USART_ReceiveDataIT(&usart1_handle, &rx_buf[0], rcv_len) != USART_READY );
//		}

		vTaskDelay(pdMS_TO_TICKS(1000));
		taskYIELD();
	}
}

void device_task(void* parameters)
{
	uint8_t power_dir, plug;
	while(1)
	{
		if(plugAction == PD_PLUG_CONNECTED){
			if(power_direction == SOURCING)
			{
				ledOnOff(LED0, ON);
				ledOnOff(LED1, ON);
				ledOnOff(LED2, OFF);
			}else if (power_direction == SINKING)
			{
				ledOnOff(LED0, ON);
				ledOnOff(LED1, ON);
				setLED(LED2);
			}
		}else
		{
			ledOnOff(LED0, OFF);
		    ledOnOff(LED1, OFF);
		    ledOnOff(LED2, OFF);
		}

		vTaskDelay(pdMS_TO_TICKS(1000));
		taskYIELD();
	}
}

void EXTI4_15_IRQHandler(void)
{
    uint8_t pd_val, knock_val;
    pd_val = GPIO_ReadFromInputPin(GPIOA, PD_INTERRUPT);
    knock_val = GPIO_ReadFromInputPin(GPIOA, KNOCK_INTERRUPT);
    delay(100000);
    if(pd_val == 0)
    {
    	GPIO_IRQHandling(PD_INTERRUPT);
    	pd_IRQHandling(&I2C1Handle);
    }
    if(knock_val == 1)
    {
    	GPIO_IRQHandling(KNOCK_INTERRUPT);
    	knock_IRQHandling();
    }
}

void I2C1_IRQHandler(void)
{
	I2C_EV_IRQHandling(&I2C1Handle);
}

void USART1_IRQHandler(void)
{
	USART_IRQHandling(&usart1_handle);
}

void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
   if(ApEv == USART_EVENT_RX_CMPLT)
   {
       rx_buf[rxCount++];

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {

   }
}


