/*
 * Version: 0.1.1
 * Workflow version: 0.0.1
 *
 * file: stm32f030x4.h
 *
 * Created on: Jun 30, 2023
 * Author: Ahmed Ali
 * Company: espresso Displays
 * Project: Volta
 */

#ifndef INC_STM32F030X4_H_
#define INC_STM32F030X4_H_

#include<stddef.h>
#include<stdint.h>

#define __vo volatile
#define __weak __attribute__((weak))


/********************************** Processor Specific Details **********************************/
/*
 * ARM Cortex Mx Processor NVIC ISERx register Addresses
 */
#define NVIC_ISER0          ( (__vo uint32_t*)0xE000E100 )

/*
 * ARM Cortex Mx Processor NVIC ICERx register Addresses
 */
#define NVIC_ICER0 			((__vo uint32_t*)0xE000E180)

/*
 * ARM Cortex Mx Processor Priority Register Address Calculation
 */
#define NVIC_PR_BASE_ADDR 	((__vo uint32_t*)0xE000E400)

/*
 * ARM Cortex Mx Processor number of priority bits implemented in Priority Register
 */
#define NO_PR_BITS_IMPLEMENTED  4



/*
 * base addresses of Flash and SRAM memories
 */

#define FLASH_BASEADDR						0x08000000U
#define SRAM_BASEADDR						0x20000000U        //SRAM is 4 Kbytes


/*
 * AHBx and APBx Bus Peripheral base addresses
 */

#define PERIPH_BASEADDR 						0x40000000U
#define APB1PERIPH_BASEADDR					    PERIPH_BASEADDR
#define AHB1PERIPH_BASEADDR						0x40020000U
#define AHB2PERIPH_BASEADDR						0x48000000U

/*
 * Base addresses of peripherals on AHB1 bus
 */

#define RCC_BASEADDR                     (AHB1PERIPH_BASEADDR + 0x1000)

/*
 * Base addresses of peripherals on APB1 bus
 */

#define I2C1_BASEADDR						(APB1PERIPH_BASEADDR + 0x5400)
#define USART1_BASEADDR						(0x40013800U)
#define EXTI_BASEADDR						(0x40010400U)
#define SYSCFG_BASEADDR        				(0x40010000U)

/*
 * Base addresses of peripherals on AHB2 bus
 */

#define GPIOA_BASEADDR                   (AHB2PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR                   (AHB2PERIPH_BASEADDR + 0x0400)


/**********************************peripheral register definition structures **********************************/

/*
 * peripheral register definition structure for GPIO
 */

typedef struct
{
	__vo uint32_t MODER;                       
	__vo uint32_t OTYPER;                       
	__vo uint32_t OSPEEDR;
	__vo uint32_t PUPDR;
	__vo uint32_t IDR;
	__vo uint32_t ODR;
	__vo uint32_t BSRR;
	__vo uint32_t LCKR;
	__vo uint32_t AFR[2];	
    __vo uint32_t BRR;				 
}GPIO_RegDef_t;


/*
 * peripheral register definition structure for RCC
 */
typedef struct
{
  __vo uint32_t CR;                										
  __vo uint32_t CFGR;          
  __vo uint32_t CIR;    
  __vo uint32_t APB2RSTR;    
  __vo uint32_t APB1RSTR;    
  __vo uint32_t AHBENR;
  __vo uint32_t APB2ENR;
  __vo uint32_t APB1ENR;
  __vo uint32_t BDCR;
  __vo uint32_t CSR;
  __vo uint32_t AHBRSTR;
  __vo uint32_t CFGR2;
  __vo uint32_t CFGR3;
  __vo uint32_t CR2;
} RCC_RegDef_t;

/*
 * peripheral register definition structure for EXTI
 */
 typedef struct
{
  __vo uint32_t IMR;      
  __vo uint32_t EMR;      
  __vo uint32_t RTSR;     
  __vo uint32_t FTSR;     
  __vo uint32_t SWIER;    
  __vo uint32_t PR;       
} EXTI_RegDef_t;

/*
 * peripheral register definition structure for SYSCFG
 */
typedef struct
{
	__vo uint32_t CFGR1;                
	__vo uint32_t EXTICR[4];    
	__vo uint32_t CFGR2;         
} SYSCFG_RegDef_t;

/*
 * peripheral register definition structure for I2C
 */
typedef struct
{
  __vo uint32_t CR1;        
  __vo uint32_t CR2;       
  __vo uint32_t OAR1;      
  __vo uint32_t OAR2;       
  __vo uint32_t TIMINGR;         
  __vo uint32_t TIMEOUTR;       
  __vo uint32_t ISR;        
  __vo uint32_t ICR;        
  __vo uint32_t PECR;     
  __vo uint32_t RXDR;       
  __vo uint32_t TXDR;  
}I2C_RegDef_t;

/*
 * peripheral register definition structure for USART
 */
typedef struct
{
    __vo uint32_t CR1;  
    __vo uint32_t CR2;    
	__vo uint32_t CR3;   
    __vo uint32_t BRR;  
    uint32_t reserved0;
    __vo uint32_t PTOR;  
    __vo uint32_t RQR;  
	__vo uint32_t SR;   
    __vo uint32_t ICR;    
	__vo uint32_t RDR;    
    __vo uint32_t TDR;             
} USART_RegDef_t;


/*
 * peripheral definitions ( Peripheral base addresses typecasted to xxx_RegDef_t)
 */
#define GPIOA  				((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB  				((GPIO_RegDef_t*)GPIOB_BASEADDR)

#define RCC 				((RCC_RegDef_t*)RCC_BASEADDR)
#define EXTI				((EXTI_RegDef_t*)EXTI_BASEADDR)
#define SYSCFG				((SYSCFG_RegDef_t*)SYSCFG_BASEADDR)

#define I2C1  				((I2C_RegDef_t*)I2C1_BASEADDR)

#define USART1  			((USART_RegDef_t*)USART1_BASEADDR)

/*
 * Clock Enable Macros for GPIOx peripherals
 */
#define GPIOA_PCLK_EN()    	(RCC->AHBENR |= (1 << 17))
#define GPIOB_PCLK_EN()		(RCC->AHBENR |= (1 << 18))

/*
 * Clock Enable Macros for I2Cx peripherals
 */
#define I2C1_PCLK_EN()     (RCC->APB1ENR |= (1 << 21))

 /*
 * Clock Enable Macros for USARTx peripherals
 */
#define USART1_PCLK_EN() (RCC->APB2ENR |= (1 << 14))

 /*
 * Clock Enable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_EN() (RCC->APB2ENR |= (1 << 0))


/*
 * Clock DISABLE macros for GPIOx peripheral
 */
#define GPIOA_PCLK_DI()		( RCC->AHBENR &= ~(1 << 17) )
#define GPIOB_PCLK_DI()		( RCC->AHBENR &= ~(1 << 18) )

/*
 * Clock DISABLE macros for I2Cx peripheral
 */
#define I2C1_PCLK_DI() (RCC->APB1ENR &= ~(1 << 21))

/*
 * IRQ(Interrupt Request) Numbers 
 */

#define IRQ_NO_EXTI0_1 		5
#define IRQ_NO_EXTI2_3 		6
#define IRQ_NO_EXTI4_15 	7
#define IRQ_NO_I2C1       23
#define IRQ_NO_USART1     27





/*
 * Generric Macros
 */
#define ENABLE 				1
#define DISABLE 			0
#define ON          0
#define OFF          1
#define SET 				ENABLE
#define RESET 				DISABLE
#define GPIO_PIN_SET        SET
#define GPIO_PIN_RESET      RESET
#define FLAG_RESET         RESET
#define FLAG_SET 			SET


/******************************************************************************************
 *Bit position definitions of I2C peripheral
 ******************************************************************************************/
/*
* Bit position definitions I2C_CR1
*/
#define I2C_CR1_PE						    0
#define I2C_CR1_TXIE						  1
#define I2C_CR1_RXIE						  2
#define I2C_CR1_ADDRIE						3
#define I2C_CR1_NACKIE						4
#define I2C_CR1_STOPIE						5
#define I2C_CR1_TCIE						  6
#define I2C_CR1_ERRIE						  7
#define I2C_CR1_NOSTRETCH  				17

/*
* Bit position definitions I2C_CR2
*/
#define I2C_CR2_START 					13
#define I2C_CR2_STOP  				 	14
#define I2C_CR2_ADDMODE    			11
#define I2C_CR2_ADD0    				0
#define I2C_CR2_AUTOEND         25
#define I2C_CR2_RD_WRN          10

/*
 * Bit position definitions I2C_OAR1
 */

 /*
 * Bit position definitions I2C_OAR2
 */

/*
 * Bit position definitions I2C_SR1
 */
#define I2C_SR1_ADDR 				 	3
#define I2C_SR1_STOPF 					5
#define I2C_SR1_RXNE 					2
#define I2C_SR1_TXE 					0
#define I2C_SR1_TXIS 					1
#define I2C_SR1_NACKF 					4
#define I2C_SR1_TC 					    6
#define I2C_SR1_TCR 					    7
#define I2C_SR1_BERR 					8
#define I2C_SR1_ARLO 					9
#define I2C_SR1_OVR 					10
#define I2C_SR1_TIMEOUT 				12
#define I2C_SR1_BUSY 				    15
#define I2C_SR1_PECERR 				    11            

/*
 * Bit position definitions I2C_ICR
 */
#define I2C_ICR_ADDRCF 					3
#define I2C_ICR_NACKCF 					4
#define I2C_ICR_STOPCF 					5
#define I2C_ICR_BERRCF 				  8
#define I2C_ICR_ARLOCF 					9
#define I2C_ICR_OVRCF 					10
#define I2C_ICR_PECERRCF 				11
#define I2C_ICR_TIMEOUTCF 			12
#define I2C_ICR_ALERTCF 				13


/*
 * Bit position definitions USART_CR1
 */
#define USART_CR1_MME					  13
#define USART_CR1_CMIE					14
#define USART_CR1_RTOIE					26
#define USART_CR1_RWU 					1
#define USART_CR1_RE  					2
#define USART_CR1_TE 					  3
#define USART_CR1_IDLEIE 				4
#define USART_CR1_RXNEIE  			5
#define USART_CR1_TCIE					6
#define USART_CR1_TXEIE					7
#define USART_CR1_PEIE 					8
#define USART_CR1_PS 					  9
#define USART_CR1_PCE 					10
#define USART_CR1_WAKE  				11
#define USART_CR1_M0 					  12
#define USART_CR1_M1 					  28
#define USART_CR1_UE 					  0
#define USART_CR1_OVER8  				15

/*
 * Bit position definitions USART_CR2
 */
#define USART_CR2_LBCL   				8
#define USART_CR2_CPHA   				9
#define USART_CR2_CPOL   				10
#define USART_CR2_STOP   				12
#define USART_CR2_CLKEN   			11
#define USART_CR2_SWAP     			15

/*
 * Bit position definitions USART_CR3
 */
#define USART_CR3_EIE   				0
#define USART_CR3_HDSEL   			3
#define USART_CR3_DMAR  				6
#define USART_CR3_DMAT   				7
#define USART_CR3_RTSE   				8
#define USART_CR3_CTSE   				9
#define USART_CR3_CTSIE   			10
#define USART_CR3_ONEBIT   			11

/*
 * Bit position definitions USART_SR
 */

#define USART_SR_PE        				0
#define USART_SR_FE        				1
#define USART_SR_NF        				2
#define USART_SR_ORE       				3
#define USART_SR_IDLE       			4
#define USART_SR_RXNE        			5
#define USART_SR_TC        				6
#define USART_SR_TXE        			7
#define USART_SR_CTSIF        		9
#define USART_SR_CTS        			10

/*
 * Bit position definitions USART_ICR
 */
#define USART_ICR_TCCF        		6
#define USART_ICR_CTSCF        		9
#define USART_ICR_IDLECF        	4


#include "stm32f030x4_gpio_driver.h"

#endif /* INC_STM32F030X4_H_ */
