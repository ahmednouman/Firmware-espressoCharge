/*
 * Version: 0.1.1
 * Workflow version: 0.0.1
 *
 * stm32f030x4_usart_driver.c
 *
 * Created on: Jun 30, 2023
 * Author: Ahmed Ali
 * Company: espresso Displays
 * Project: Volta
 */

#include "stm32f030x4_usart_driver.h"
#include "stm32f030x4_rcc_driver.h"

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
	if (Cmd == ENABLE)
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
	else
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
}

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
	if (EnorDi == ENABLE)
	{
		if (pUSARTx == USART1)
			USART1_PCLK_EN();
	}
	else
	{
		//TODO
	}
}

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
	if (pUSARTx->SR & StatusFlagName)
		return FLAG_SET;

	return FLAG_RESET;
}


void USART_Init(USART_Handle_t *pUSARTHandle)
{
	uint32_t tempreg = 0;

	// USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
	// USART1_PCLK_EN();
	RCC->APB2ENR |= (1 << 14)

	if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
		tempreg |= (1 << USART_CR1_RE);
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
		tempreg |= (1 << USART_CR1_TE);
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));

	tempreg &= ~(1 << USART_CR1_M1);
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M0;

	if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
	{
		tempreg |= (1 << USART_CR1_PCE);
	}
	else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
	{
		tempreg |= (1 << USART_CR1_PCE);
		tempreg |= (1 << USART_CR1_PS);
	}

	pUSARTHandle->pUSARTx->CR1 = tempreg;

	tempreg = 0;
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
	pUSARTHandle->pUSARTx->CR2 = tempreg;

	tempreg = 0;

	if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
	{
		tempreg |= (1 << USART_CR3_CTSE);
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
	{
		tempreg |= (1 << USART_CR3_RTSE);
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
	{
		tempreg |= (1 << USART_CR3_CTSE);
		tempreg |= (1 << USART_CR3_RTSE);
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;

	pUSARTHandle->pUSARTx->BRR = 0x45U;
}

uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
    uint8_t txstate = pUSARTHandle->TxBusyState;

    if(txstate != USART_BUSY_IN_TX)
    {
        pUSARTHandle->TxLen = Len;
        pUSARTHandle->pTxBuffer = pTxBuffer;
        pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;

        pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TXEIE);
        pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TCIE);
    }

    return txstate;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
    uint8_t rxstate = pUSARTHandle->RxBusyState;

    if(rxstate != USART_BUSY_IN_RX)
    {
        pUSARTHandle->RxLen = Len;
        pUSARTHandle->pRxBuffer = pRxBuffer;
        pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;

        (void)pUSARTHandle->pUSARTx->RDR;

        pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
    }

    return rxstate;
}

void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName)
{
    pUSARTx->SR &= ~(StatusFlagName);
}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
    uint32_t temp1, temp2, temp3;
    uint16_t *pdata;

    /*************************Check for TC flag ********************************************/
    temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TC);
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TCIE);

    if(temp1 && temp2)
    {
        if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
        {
            if(!pUSARTHandle->TxLen)
            {
                pUSARTHandle->pUSARTx->ICR |= (1 << USART_ICR_TCCF);
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TCIE);
                pUSARTHandle->TxBusyState = USART_READY;
                pUSARTHandle->pTxBuffer = NULL;
                pUSARTHandle->TxLen = 0;
                USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
            }
        }
    }

    /*************************Check for TXE flag ********************************************/
    temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TXE);
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TXEIE);

    if(temp1 && temp2)
    {
        if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
        {
            if(pUSARTHandle->TxLen > 0)
            {
                if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
                {
                    pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
                    pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
                    
                    if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
                    {
                        pUSARTHandle->pTxBuffer++;
                        pUSARTHandle->pTxBuffer++;
                        pUSARTHandle->TxLen -= 2;
                    }
                    else
                    {
                        pUSARTHandle->pTxBuffer++;
                        pUSARTHandle->TxLen -= 1;
                    }
                }
                else
                {
                    pUSARTHandle->pUSARTx->TDR = (*pUSARTHandle->pTxBuffer & (uint8_t)0xFF);
                    pUSARTHandle->pTxBuffer++;
                    pUSARTHandle->TxLen -= 1;
                }
            }
            if(pUSARTHandle->TxLen == 0)
            {
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE);
            }
        }
    }

    /*************************Check for RXNE flag ********************************************/
    temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_RXNE);
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_RXNEIE);

    if(temp1 && temp2)
    {
        if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
        {
            if(pUSARTHandle->RxLen > 0)
            {
                if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
                {
                    if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
                    {
                        *((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->RDR & (uint16_t)0x01FF);
                        pUSARTHandle->pRxBuffer++;
                        pUSARTHandle->pRxBuffer++;
                        pUSARTHandle->RxLen -= 2;
                    }
                    else
                    {
                        *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->RDR & (uint8_t)0xFF);
                        pUSARTHandle->pRxBuffer++;
                        pUSARTHandle->RxLen -= 1;
                    }
                }
                else
                {
                    if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
                    {
                        *pUSARTHandle->pRxBuffer = (uint8_t)(pUSARTHandle->pUSARTx->RDR & (uint8_t)0xFF);
                    }
                    else
                    {
                        *pUSARTHandle->pRxBuffer = (uint8_t)(pUSARTHandle->pUSARTx->RDR & (uint8_t)0x7F);
                    }
                    
                    pUSARTHandle->pRxBuffer++;
                    pUSARTHandle->RxLen -= 1;
                }
            }

            if(!pUSARTHandle->RxLen)
            {
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_RXNEIE);
                pUSARTHandle->RxBusyState = USART_READY;
                USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_RX_CMPLT);
            }
        }
    }

    /*************************Check for CTS flag ********************************************/
    // temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_CTS);
    // temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSE);
    // temp3 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSIE);

    // if(temp1 && temp2)
    // {
    //     pUSARTHandle->pUSARTx->ICR |= (1 << USART_ICR_CTSCF);
    //     USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_CTS);
    // }

    /*************************Check for IDLE detection flag ********************************************/
    temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_IDLE);
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_IDLEIE);

    if(temp1 && temp2)
    {
        pUSARTHandle->pUSARTx->ICR |= (1 << USART_ICR_IDLECF);
        USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
    }

    /*************************Check for Overrun detection flag ********************************************/
    // temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
    // temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;

    // if(temp1 && temp2)
    // {
    //     USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
    // }

    /*************************Check for Error Flag ********************************************/
    // temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_EIE);

    // if(temp2)
    // {
    //     temp1 = pUSARTHandle->pUSARTx->SR;
    //     if(temp1 & (1 << USART_SR_FE))
    //     {
    //         USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_FE);
    //     }

    //     if(temp1 & (1 << USART_SR_NF))
    //     {
    //         USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_NE);
    //     }

    //     if(temp1 & (1 << USART_SR_ORE))
    //     {
    //         USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
    //     }
    // }
}

__weak void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t event)
{
    // Weak callback implementation, can be overridden by the user
}
