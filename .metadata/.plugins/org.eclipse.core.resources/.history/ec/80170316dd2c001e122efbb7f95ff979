/*
 * Version: 0.1.1
 * Workflow version: 0.0.1
 *
 * file: stm32f030x4_gpio_driver.c
 *
 * Created on: Jun 30, 2023
 * Author: Ahmed Ali
 * Company: espresso Displays
 * Project: Volta
 */

#include "stm32f030x4_gpio_driver.h"
#include "generic_api.h"


void GPIO_Init2()
{
	GPIO_Handle_t IO;

	IO.pGPIOx = GPIOB;
	GPIOB_PCLK_EN();
	IO.pGPIOx->ODR |= ( 1 << 1);
	IO.pGPIOx->MODER &= ~(0x3 << 1);
	IO.pGPIOx->MODER |= 0x4U;

	IO.pGPIOx->OSPEEDR &= ~(0x3 << 1);
	IO.pGPIOx->OSPEEDR |= 0xCU;

	IO.pGPIOx->PUPDR &= ~(0x3 << 1);
	IO.pGPIOx->OTYPER &= ~(0x3 << 1);

    memset(&IO, 0, sizeof(IO));

	EXTI->FTSR |= ( 1 << 4);
    EXTI->RTSR &= ~( 1 << 4);

	EXTI->RTSR |= ( 1 << 5);
	EXTI->FTSR &= ~( 1 << 5);

	SYSCFG_PCLK_EN();
	SYSCFG->EXTICR[1] = 0x00 << (0 * 4);
	EXTI->IMR |=  0x3 << 4;

	IO.pGPIOx = GPIOA;
	GPIOA_PCLK_EN();
	IO.pGPIOx->ODR |= ( 0x3 << 6);
	IO.pGPIOx->MODER |= 0x282850A0U;

	IO.pGPIOx->OSPEEDR |= 0xC3CFFE0U;

	IO.pGPIOx->PUPDR |= 0x24000A41U;

	IO.pGPIOx->OTYPER |= 0x600U;

	IO.pGPIOx->AFR[1] &= ~(0xFF << (4 * 1));
	IO.pGPIOx->AFR[1] |= (0x44 << (4 * 1));

	IO.pGPIOx->AFR[0] &= ~(0xFF << (4 * 2));
	IO.pGPIOx->AFR[0] |= (0x11 << (4 * 2));
}

void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{
		// if(pGPIOx == GPIOA){
		// 	GPIOA_REG_RESET();
		// }else if(pGPIOx == GPIOB){
		// 	GPIOB_REG_RESET();
		// }
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
	return value;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
	if(Value == GPIO_PIN_SET)
	{
		pGPIOx->ODR |= ( 1 << PinNumber);
	}else
	{
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber);
}

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
    if(EnorDi == ENABLE)
    {
        if(IRQNumber <= 31)
        {
            *NVIC_ISER0 |= ( 1 << IRQNumber );
        }

    }else
    {
        if(IRQNumber <= 31)
        {
             *NVIC_ICER0 |= ( 1 << IRQNumber );
        }
    }
}

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
    uint8_t iprx = IRQNumber / 4;
    uint8_t iprx_section = IRQNumber % 4;

    uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PR_BITS_IMPLEMENTED);
    *(NVIC_PR_BASE_ADDR + iprx  ) |= ( IRQPriority <<  shift_amount);
}

void GPIO_IRQHandling(uint8_t PinNumber)
{
    if(EXTI->PR & (1 << PinNumber))
    {
        EXTI->PR |= (1 << PinNumber);
    }
}
