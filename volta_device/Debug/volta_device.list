
volta_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e50  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003f84  08003f84  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f84  08003f84  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  20000068  08003ff4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  08003ff4  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e51a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002351  00000000  00000000  0002e5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009a3a  00000000  00000000  000308fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0003a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c80  00000000  00000000  0003ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006c25  00000000  00000000  0003ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f05b  00000000  00000000  000426a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00017ceb  00000000  00000000  00051700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000693eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001db8  00000000  00000000  0006943c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ef8 	.word	0x08003ef8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003ef8 	.word	0x08003ef8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <respond_to_host>:
		temp2++;
	}
}

void respond_to_host()
{
 8000220:	b570      	push	{r4, r5, r6, lr}
	uint8_t temp, temp2;
	temp = encDataLen;
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <respond_to_host+0x2c>)
 8000224:	781d      	ldrb	r5, [r3, #0]
 8000226:	b2ed      	uxtb	r5, r5
	temp2 = 0;
 8000228:	2400      	movs	r4, #0
	while(temp > 0){
 800022a:	e00b      	b.n	8000244 <respond_to_host+0x24>
	    while( USART_SendDataIT(&usart1_handle, &encMsg[temp2], 1) != USART_READY);
 800022c:	4908      	ldr	r1, [pc, #32]	; (8000250 <respond_to_host+0x30>)
 800022e:	1909      	adds	r1, r1, r4
 8000230:	2201      	movs	r2, #1
 8000232:	4808      	ldr	r0, [pc, #32]	; (8000254 <respond_to_host+0x34>)
 8000234:	f002 fd5e 	bl	8002cf4 <USART_SendDataIT>
 8000238:	2800      	cmp	r0, #0
 800023a:	d1f7      	bne.n	800022c <respond_to_host+0xc>
		temp--;
 800023c:	3d01      	subs	r5, #1
 800023e:	b2ed      	uxtb	r5, r5
		temp2++;
 8000240:	3401      	adds	r4, #1
 8000242:	b2e4      	uxtb	r4, r4
	while(temp > 0){
 8000244:	2d00      	cmp	r5, #0
 8000246:	d1f1      	bne.n	800022c <respond_to_host+0xc>
	}
}
 8000248:	bd70      	pop	{r4, r5, r6, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000095 	.word	0x20000095
 8000250:	20000098 	.word	0x20000098
 8000254:	2000096c 	.word	0x2000096c

08000258 <pd_restart_setup>:
{
 8000258:	b510      	push	{r4, lr}
	pd_interrupt_clear_all(&I2C1Handle);
 800025a:	4c15      	ldr	r4, [pc, #84]	; (80002b0 <pd_restart_setup+0x58>)
 800025c:	0020      	movs	r0, r4
 800025e:	f003 f86f 	bl	8003340 <pd_interrupt_clear_all>
	pd_interrupt_mask(&I2C1Handle);
 8000262:	0020      	movs	r0, r4
 8000264:	f003 f824 	bl	80032b0 <pd_interrupt_mask>
	pd_set_sleep_config(&I2C1Handle, ENABLE);
 8000268:	2101      	movs	r1, #1
 800026a:	0020      	movs	r0, r4
 800026c:	f003 f80d 	bl	800328a <pd_set_sleep_config>
	chg_set_ic_power_mode(&I2C1Handle, LOW_POWER);
 8000270:	2101      	movs	r1, #1
 8000272:	0020      	movs	r0, r4
 8000274:	f002 fe18 	bl	8002ea8 <chg_set_ic_power_mode>
	gauge_unseal(&I2C1Handle);
 8000278:	0020      	movs	r0, r4
 800027a:	f003 f9a3 	bl	80035c4 <gauge_unseal>
	gauge_reset(&I2C1Handle);
 800027e:	0020      	movs	r0, r4
 8000280:	f003 f9fe 	bl	8003680 <gauge_reset>
	gauge_full_sleep_enable(&I2C1Handle);
 8000284:	0020      	movs	r0, r4
 8000286:	f003 fa17 	bl	80036b8 <gauge_full_sleep_enable>
	plugAction = pd_get_plug_detect(&I2C1Handle);
 800028a:	0020      	movs	r0, r4
 800028c:	f002 ff54 	bl	8003138 <pd_get_plug_detect>
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <pd_restart_setup+0x5c>)
 8000292:	7018      	strb	r0, [r3, #0]
	if(plugAction == PD_PLUG_CONNECTED){
 8000294:	2801      	cmp	r0, #1
 8000296:	d000      	beq.n	800029a <pd_restart_setup+0x42>
}
 8000298:	bd10      	pop	{r4, pc}
		power_direction = pd_get_power_direction(&I2C1Handle);
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <pd_restart_setup+0x58>)
 800029c:	f002 ff5a 	bl	8003154 <pd_get_power_direction>
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <pd_restart_setup+0x60>)
 80002a2:	7018      	strb	r0, [r3, #0]
		if(power_direction == SOURCING){
 80002a4:	2801      	cmp	r0, #1
 80002a6:	d1f7      	bne.n	8000298 <pd_restart_setup+0x40>
			pd_swap_to_UFP(&I2C1Handle);
 80002a8:	4801      	ldr	r0, [pc, #4]	; (80002b0 <pd_restart_setup+0x58>)
 80002aa:	f002 ff6b 	bl	8003184 <pd_swap_to_UFP>
}
 80002ae:	e7f3      	b.n	8000298 <pd_restart_setup+0x40>
 80002b0:	2000091c 	.word	0x2000091c
 80002b4:	20000910 	.word	0x20000910
 80002b8:	20000064 	.word	0x20000064

080002bc <device_task>:

void device_task(void* parameters)
{
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	b085      	sub	sp, #20
	__vo uint8_t led_to_glow, pd_int_pin;
	__vo uint16_t brightness_val;

	__vo uint16_t battery_voltage = 0, battery_current = 0xFFFF;
 80002c0:	ab03      	add	r3, sp, #12
 80002c2:	2200      	movs	r2, #0
 80002c4:	801a      	strh	r2, [r3, #0]
 80002c6:	230a      	movs	r3, #10
 80002c8:	446b      	add	r3, sp
 80002ca:	3a01      	subs	r2, #1
 80002cc:	801a      	strh	r2, [r3, #0]
 80002ce:	e1ec      	b.n	80006aa <device_task+0x3ee>

	while(1)
	{
		pd_int_pin = GPIO_ReadFromInputPin(GPIOA, PD_INTERRUPT);
		if(pd_int_pin == 0){
			pd_restart_setup();
 80002d0:	f7ff ffc2 	bl	8000258 <pd_restart_setup>
 80002d4:	e1f5      	b.n	80006c2 <device_task+0x406>
		}

		pd_mode = pd_get_mode(&I2C1Handle);
		if(pd_mode != PD_MODE_APP){
			led_blink(LED3, 8, 50000, &current_brightness);
 80002d6:	4bc3      	ldr	r3, [pc, #780]	; (80005e4 <device_task+0x328>)
 80002d8:	4ac3      	ldr	r2, [pc, #780]	; (80005e8 <device_task+0x32c>)
 80002da:	2108      	movs	r1, #8
 80002dc:	2000      	movs	r0, #0
 80002de:	f003 fb4b 	bl	8003978 <led_blink>
 80002e2:	e1f7      	b.n	80006d4 <device_task+0x418>
//			pd_restart_setup();
		}

		if(plugAction == PD_PLUG_CONNECTED){

			get_bat_SOC(&I2C1Handle, &pbatReport);
 80002e4:	4cc1      	ldr	r4, [pc, #772]	; (80005ec <device_task+0x330>)
 80002e6:	4dc2      	ldr	r5, [pc, #776]	; (80005f0 <device_task+0x334>)
 80002e8:	0021      	movs	r1, r4
 80002ea:	0028      	movs	r0, r5
 80002ec:	f003 f8ba 	bl	8003464 <get_bat_SOC>
			get_bat_voltage(&I2C1Handle, &pbatReport);
 80002f0:	0021      	movs	r1, r4
 80002f2:	0028      	movs	r0, r5
 80002f4:	f003 f8f0 	bl	80034d8 <get_bat_voltage>
			get_bat_current(&I2C1Handle, &pbatReport);
 80002f8:	0021      	movs	r1, r4
 80002fa:	0028      	movs	r0, r5
 80002fc:	f003 f8fc 	bl	80034f8 <get_bat_current>
			bat_soc = pbatReport.SOC;
 8000300:	7822      	ldrb	r2, [r4, #0]
 8000302:	4bbc      	ldr	r3, [pc, #752]	; (80005f4 <device_task+0x338>)
 8000304:	701a      	strb	r2, [r3, #0]
			if(deadBatFlag){
 8000306:	4bbc      	ldr	r3, [pc, #752]	; (80005f8 <device_task+0x33c>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d002      	beq.n	8000314 <device_task+0x58>
				bat_soc = 0;
 800030e:	4bb9      	ldr	r3, [pc, #740]	; (80005f4 <device_task+0x338>)
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
			}

			if(bat_soc != currentSOC){
 8000314:	4bb7      	ldr	r3, [pc, #732]	; (80005f4 <device_task+0x338>)
 8000316:	781a      	ldrb	r2, [r3, #0]
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	4bb8      	ldr	r3, [pc, #736]	; (80005fc <device_task+0x340>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	429a      	cmp	r2, r3
 8000322:	d002      	beq.n	800032a <device_task+0x6e>
				deviceUpdateLED = true;
 8000324:	4bb6      	ldr	r3, [pc, #728]	; (8000600 <device_task+0x344>)
 8000326:	2201      	movs	r2, #1
 8000328:	701a      	strb	r2, [r3, #0]
			}
			battery_voltage = (pbatReport.voltage[1] << 8) | pbatReport.voltage[0];
 800032a:	4bb0      	ldr	r3, [pc, #704]	; (80005ec <device_task+0x330>)
 800032c:	79d9      	ldrb	r1, [r3, #7]
 800032e:	0209      	lsls	r1, r1, #8
 8000330:	799a      	ldrb	r2, [r3, #6]
 8000332:	430a      	orrs	r2, r1
 8000334:	a903      	add	r1, sp, #12
 8000336:	800a      	strh	r2, [r1, #0]
			battery_current = (pbatReport.current[1] << 8) | pbatReport.current[0];
 8000338:	7a5a      	ldrb	r2, [r3, #9]
 800033a:	0212      	lsls	r2, r2, #8
 800033c:	7a1b      	ldrb	r3, [r3, #8]
 800033e:	4313      	orrs	r3, r2
 8000340:	220a      	movs	r2, #10
 8000342:	446a      	add	r2, sp
 8000344:	8013      	strh	r3, [r2, #0]

			if(deviceUpdateLED || (lastPowerDirection != power_direction))
 8000346:	4bae      	ldr	r3, [pc, #696]	; (8000600 <device_task+0x344>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d106      	bne.n	800035c <device_task+0xa0>
 800034e:	4bad      	ldr	r3, [pc, #692]	; (8000604 <device_task+0x348>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	b2db      	uxtb	r3, r3
 8000354:	4aac      	ldr	r2, [pc, #688]	; (8000608 <device_task+0x34c>)
 8000356:	7812      	ldrb	r2, [r2, #0]
 8000358:	4293      	cmp	r3, r2
 800035a:	d010      	beq.n	800037e <device_task+0xc2>
			{
				if(lastPowerDirection != power_direction){
 800035c:	4ba9      	ldr	r3, [pc, #676]	; (8000604 <device_task+0x348>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	4aa9      	ldr	r2, [pc, #676]	; (8000608 <device_task+0x34c>)
 8000364:	7812      	ldrb	r2, [r2, #0]
 8000366:	4293      	cmp	r3, r2
 8000368:	d002      	beq.n	8000370 <device_task+0xb4>
					chargeOKCycleCount = 0;
 800036a:	4ba8      	ldr	r3, [pc, #672]	; (800060c <device_task+0x350>)
 800036c:	2100      	movs	r1, #0
 800036e:	7019      	strb	r1, [r3, #0]
				}
				if(!sourceCountDone){
 8000370:	4ba7      	ldr	r3, [pc, #668]	; (8000610 <device_task+0x354>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d031      	beq.n	80003dc <device_task+0x120>
						deviceTaskDelay = 700;
					}else{
						deviceTaskDelay = 1000;
					}
				}
				deviceUpdateLED = false;
 8000378:	4ba1      	ldr	r3, [pc, #644]	; (8000600 <device_task+0x344>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
			}
			if(power_direction == SINKING)
 800037e:	4ba2      	ldr	r3, [pc, #648]	; (8000608 <device_task+0x34c>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d000      	beq.n	8000388 <device_task+0xcc>
 8000386:	e0b3      	b.n	80004f0 <device_task+0x234>
			{
				if(battery_current > 10){
 8000388:	330a      	adds	r3, #10
 800038a:	446b      	add	r3, sp
 800038c:	881b      	ldrh	r3, [r3, #0]
 800038e:	b29b      	uxth	r3, r3
 8000390:	2b0a      	cmp	r3, #10
 8000392:	d94a      	bls.n	800042a <device_task+0x16e>
					charge_ok = true;
 8000394:	2301      	movs	r3, #1
 8000396:	4a9f      	ldr	r2, [pc, #636]	; (8000614 <device_task+0x358>)
 8000398:	7013      	strb	r3, [r2, #0]
					charge_ok_val = 1;
 800039a:	4a9f      	ldr	r2, [pc, #636]	; (8000618 <device_task+0x35c>)
 800039c:	7013      	strb	r3, [r2, #0]
					chargeOKCycleCount = 0;
 800039e:	4b9b      	ldr	r3, [pc, #620]	; (800060c <device_task+0x350>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
				}else{
					charge_ok = false;
					charge_ok_val = 0;
					chargeOKCycleCount++;
				}
				if(led_to_glow != 0xFF && charge_ok){
 80003a4:	230f      	movs	r3, #15
 80003a6:	446b      	add	r3, sp
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	2bff      	cmp	r3, #255	; 0xff
 80003ae:	d077      	beq.n	80004a0 <device_task+0x1e4>
 80003b0:	4b98      	ldr	r3, [pc, #608]	; (8000614 <device_task+0x358>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d073      	beq.n	80004a0 <device_task+0x1e4>
					if(chargeOK_prev != charge_ok){
 80003b8:	2309      	movs	r3, #9
 80003ba:	446b      	add	r3, sp
 80003bc:	781a      	ldrb	r2, [r3, #0]
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	4b94      	ldr	r3, [pc, #592]	; (8000614 <device_task+0x358>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d04a      	beq.n	8000460 <device_task+0x1a4>
						deviceUpdateLED = true;
 80003ca:	4b8d      	ldr	r3, [pc, #564]	; (8000600 <device_task+0x344>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
						dim_leds(&leds, &leds_to_control, &current_brightness);
						led_blink(LED1, 3, 150000, &current_brightness);
						IWDG_Refresh(&hiwdg);
					}
				}
				sourceLEDCount = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	4a92      	ldr	r2, [pc, #584]	; (800061c <device_task+0x360>)
 80003d4:	7013      	strb	r3, [r2, #0]
				sourceCountDone = false;
 80003d6:	4a8e      	ldr	r2, [pc, #568]	; (8000610 <device_task+0x354>)
 80003d8:	7013      	strb	r3, [r2, #0]
 80003da:	e145      	b.n	8000668 <device_task+0x3ac>
					led_to_glow = led_logic_handler(bat_soc, plugAction, power_direction, false, &leds_to_control);
 80003dc:	4b85      	ldr	r3, [pc, #532]	; (80005f4 <device_task+0x338>)
 80003de:	7818      	ldrb	r0, [r3, #0]
 80003e0:	b2c0      	uxtb	r0, r0
 80003e2:	4b8f      	ldr	r3, [pc, #572]	; (8000620 <device_task+0x364>)
 80003e4:	7819      	ldrb	r1, [r3, #0]
 80003e6:	4d8f      	ldr	r5, [pc, #572]	; (8000624 <device_task+0x368>)
 80003e8:	9500      	str	r5, [sp, #0]
 80003ea:	2300      	movs	r3, #0
 80003ec:	f003 fa72 	bl	80038d4 <led_logic_handler>
 80003f0:	230f      	movs	r3, #15
 80003f2:	446b      	add	r3, sp
 80003f4:	7018      	strb	r0, [r3, #0]
					IWDG_Refresh(&hiwdg);
 80003f6:	4c8c      	ldr	r4, [pc, #560]	; (8000628 <device_task+0x36c>)
 80003f8:	0020      	movs	r0, r4
 80003fa:	f003 fcb5 	bl	8003d68 <IWDG_Refresh>
					brighten_leds(&leds, &leds_to_control, &current_brightness);
 80003fe:	4a79      	ldr	r2, [pc, #484]	; (80005e4 <device_task+0x328>)
 8000400:	0029      	movs	r1, r5
 8000402:	488a      	ldr	r0, [pc, #552]	; (800062c <device_task+0x370>)
 8000404:	f003 fc1c 	bl	8003c40 <brighten_leds>
					IWDG_Refresh(&hiwdg);
 8000408:	0020      	movs	r0, r4
 800040a:	f003 fcad 	bl	8003d68 <IWDG_Refresh>
					if(power_direction == SINKING){
 800040e:	4b7e      	ldr	r3, [pc, #504]	; (8000608 <device_task+0x34c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <device_task+0x164>
						deviceTaskDelay = 700;
 8000416:	4b86      	ldr	r3, [pc, #536]	; (8000630 <device_task+0x374>)
 8000418:	22af      	movs	r2, #175	; 0xaf
 800041a:	0092      	lsls	r2, r2, #2
 800041c:	801a      	strh	r2, [r3, #0]
 800041e:	e7ab      	b.n	8000378 <device_task+0xbc>
						deviceTaskDelay = 1000;
 8000420:	4b83      	ldr	r3, [pc, #524]	; (8000630 <device_task+0x374>)
 8000422:	22fa      	movs	r2, #250	; 0xfa
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	801a      	strh	r2, [r3, #0]
 8000428:	e7a6      	b.n	8000378 <device_task+0xbc>
				}else if( battery_current <= 10 && chargeOKCycleCount == 3){
 800042a:	230a      	movs	r3, #10
 800042c:	446b      	add	r3, sp
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	b29b      	uxth	r3, r3
 8000432:	2b0a      	cmp	r3, #10
 8000434:	d803      	bhi.n	800043e <device_task+0x182>
 8000436:	4b75      	ldr	r3, [pc, #468]	; (800060c <device_task+0x350>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b03      	cmp	r3, #3
 800043c:	d00a      	beq.n	8000454 <device_task+0x198>
					charge_ok = false;
 800043e:	2300      	movs	r3, #0
 8000440:	4a74      	ldr	r2, [pc, #464]	; (8000614 <device_task+0x358>)
 8000442:	7013      	strb	r3, [r2, #0]
					charge_ok_val = 0;
 8000444:	4a74      	ldr	r2, [pc, #464]	; (8000618 <device_task+0x35c>)
 8000446:	7013      	strb	r3, [r2, #0]
					chargeOKCycleCount++;
 8000448:	4a70      	ldr	r2, [pc, #448]	; (800060c <device_task+0x350>)
 800044a:	7813      	ldrb	r3, [r2, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	b2db      	uxtb	r3, r3
 8000450:	7013      	strb	r3, [r2, #0]
 8000452:	e7a7      	b.n	80003a4 <device_task+0xe8>
					charge_ok = false;
 8000454:	2300      	movs	r3, #0
 8000456:	4a6f      	ldr	r2, [pc, #444]	; (8000614 <device_task+0x358>)
 8000458:	7013      	strb	r3, [r2, #0]
					charge_ok_val = 0;
 800045a:	4a6f      	ldr	r2, [pc, #444]	; (8000618 <device_task+0x35c>)
 800045c:	7013      	strb	r3, [r2, #0]
 800045e:	e7a1      	b.n	80003a4 <device_task+0xe8>
					    IWDG_Refresh(&hiwdg);
 8000460:	4871      	ldr	r0, [pc, #452]	; (8000628 <device_task+0x36c>)
 8000462:	f003 fc81 	bl	8003d68 <IWDG_Refresh>
						dim_led(led_to_glow, &current_brightness);
 8000466:	250f      	movs	r5, #15
 8000468:	446d      	add	r5, sp
 800046a:	7828      	ldrb	r0, [r5, #0]
 800046c:	b2c0      	uxtb	r0, r0
 800046e:	4c5d      	ldr	r4, [pc, #372]	; (80005e4 <device_task+0x328>)
 8000470:	0021      	movs	r1, r4
 8000472:	f003 facb 	bl	8003a0c <dim_led>
						vTaskDelay(pdMS_TO_TICKS(500));
 8000476:	20fa      	movs	r0, #250	; 0xfa
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	f001 fb97 	bl	8001bac <vTaskDelay>
						brighten_led(led_to_glow, &current_brightness);
 800047e:	7828      	ldrb	r0, [r5, #0]
 8000480:	b2c0      	uxtb	r0, r0
 8000482:	0021      	movs	r1, r4
 8000484:	f003 fb1a 	bl	8003abc <brighten_led>
						if(bat_soc < 10){
 8000488:	4b5a      	ldr	r3, [pc, #360]	; (80005f4 <device_task+0x338>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b09      	cmp	r3, #9
 8000490:	d802      	bhi.n	8000498 <device_task+0x1dc>
							lowBatteryUserNotified = false;
 8000492:	4b68      	ldr	r3, [pc, #416]	; (8000634 <device_task+0x378>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
						IWDG_Refresh(&hiwdg);
 8000498:	4863      	ldr	r0, [pc, #396]	; (8000628 <device_task+0x36c>)
 800049a:	f003 fc65 	bl	8003d68 <IWDG_Refresh>
 800049e:	e797      	b.n	80003d0 <device_task+0x114>
				}else if(!charge_ok && chargeOKCycleCount == 3){
 80004a0:	4b5c      	ldr	r3, [pc, #368]	; (8000614 <device_task+0x358>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d193      	bne.n	80003d0 <device_task+0x114>
 80004a8:	4b58      	ldr	r3, [pc, #352]	; (800060c <device_task+0x350>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d18f      	bne.n	80003d0 <device_task+0x114>
					if(bat_soc < 99){
 80004b0:	4b50      	ldr	r3, [pc, #320]	; (80005f4 <device_task+0x338>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	2b62      	cmp	r3, #98	; 0x62
 80004b8:	d88a      	bhi.n	80003d0 <device_task+0x114>
						IWDG_Refresh(&hiwdg);
 80004ba:	4d5b      	ldr	r5, [pc, #364]	; (8000628 <device_task+0x36c>)
 80004bc:	0028      	movs	r0, r5
 80004be:	f003 fc53 	bl	8003d68 <IWDG_Refresh>
						brighten_leds(&leds, &leds_to_control, &current_brightness);
 80004c2:	4c48      	ldr	r4, [pc, #288]	; (80005e4 <device_task+0x328>)
 80004c4:	4f57      	ldr	r7, [pc, #348]	; (8000624 <device_task+0x368>)
 80004c6:	4e59      	ldr	r6, [pc, #356]	; (800062c <device_task+0x370>)
 80004c8:	0022      	movs	r2, r4
 80004ca:	0039      	movs	r1, r7
 80004cc:	0030      	movs	r0, r6
 80004ce:	f003 fbb7 	bl	8003c40 <brighten_leds>
						dim_leds(&leds, &leds_to_control, &current_brightness);
 80004d2:	0022      	movs	r2, r4
 80004d4:	0039      	movs	r1, r7
 80004d6:	0030      	movs	r0, r6
 80004d8:	f003 fb52 	bl	8003b80 <dim_leds>
						led_blink(LED1, 3, 150000, &current_brightness);
 80004dc:	0023      	movs	r3, r4
 80004de:	4a56      	ldr	r2, [pc, #344]	; (8000638 <device_task+0x37c>)
 80004e0:	2103      	movs	r1, #3
 80004e2:	200c      	movs	r0, #12
 80004e4:	f003 fa48 	bl	8003978 <led_blink>
						IWDG_Refresh(&hiwdg);
 80004e8:	0028      	movs	r0, r5
 80004ea:	f003 fc3d 	bl	8003d68 <IWDG_Refresh>
 80004ee:	e76f      	b.n	80003d0 <device_task+0x114>
			}else if(power_direction == SOURCING)
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d000      	beq.n	80004f6 <device_task+0x23a>
 80004f4:	e0b8      	b.n	8000668 <device_task+0x3ac>
			{
				if(bat_soc < 10){
 80004f6:	4b3f      	ldr	r3, [pc, #252]	; (80005f4 <device_task+0x338>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	d838      	bhi.n	8000572 <device_task+0x2b6>
					if(!knocked){
 8000500:	4b4e      	ldr	r3, [pc, #312]	; (800063c <device_task+0x380>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d112      	bne.n	800052e <device_task+0x272>
						if(!lowBatteryUserNotified){
 8000508:	4b4a      	ldr	r3, [pc, #296]	; (8000634 <device_task+0x378>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d000      	beq.n	8000512 <device_task+0x256>
 8000510:	e0aa      	b.n	8000668 <device_task+0x3ac>
							IWDG_Refresh(&hiwdg);
 8000512:	4c45      	ldr	r4, [pc, #276]	; (8000628 <device_task+0x36c>)
 8000514:	0020      	movs	r0, r4
 8000516:	f003 fc27 	bl	8003d68 <IWDG_Refresh>
							led_blink(LED1, 3, 150000, &current_brightness);
 800051a:	4b32      	ldr	r3, [pc, #200]	; (80005e4 <device_task+0x328>)
 800051c:	4a46      	ldr	r2, [pc, #280]	; (8000638 <device_task+0x37c>)
 800051e:	2103      	movs	r1, #3
 8000520:	200c      	movs	r0, #12
 8000522:	f003 fa29 	bl	8003978 <led_blink>
							IWDG_Refresh(&hiwdg);
 8000526:	0020      	movs	r0, r4
 8000528:	f003 fc1e 	bl	8003d68 <IWDG_Refresh>
 800052c:	e09c      	b.n	8000668 <device_task+0x3ac>
						}
					}else{
						if(lowBatteryUserNotified){
 800052e:	4b41      	ldr	r3, [pc, #260]	; (8000634 <device_task+0x378>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d016      	beq.n	8000564 <device_task+0x2a8>
							if(ledLowCount < 4){
 8000536:	4b42      	ldr	r3, [pc, #264]	; (8000640 <device_task+0x384>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	2b03      	cmp	r3, #3
 800053e:	d905      	bls.n	800054c <device_task+0x290>
								led_blink(LED1, 3, 150000, &current_brightness);
								ledLowCount++;
							}else{
								knocked = false;
 8000540:	2300      	movs	r3, #0
 8000542:	4a3e      	ldr	r2, [pc, #248]	; (800063c <device_task+0x380>)
 8000544:	7013      	strb	r3, [r2, #0]
								ledLowCount = 0;
 8000546:	4a3e      	ldr	r2, [pc, #248]	; (8000640 <device_task+0x384>)
 8000548:	7013      	strb	r3, [r2, #0]
 800054a:	e08d      	b.n	8000668 <device_task+0x3ac>
								led_blink(LED1, 3, 150000, &current_brightness);
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <device_task+0x328>)
 800054e:	4a3a      	ldr	r2, [pc, #232]	; (8000638 <device_task+0x37c>)
 8000550:	2103      	movs	r1, #3
 8000552:	200c      	movs	r0, #12
 8000554:	f003 fa10 	bl	8003978 <led_blink>
								ledLowCount++;
 8000558:	4a39      	ldr	r2, [pc, #228]	; (8000640 <device_task+0x384>)
 800055a:	7813      	ldrb	r3, [r2, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	7013      	strb	r3, [r2, #0]
 8000562:	e081      	b.n	8000668 <device_task+0x3ac>
							}
						}else{
							lowBatteryUserNotified = true;
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <device_task+0x378>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
							knocked = false;
 800056a:	4b34      	ldr	r3, [pc, #208]	; (800063c <device_task+0x380>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e07a      	b.n	8000668 <device_task+0x3ac>
						}
					}
				}else{
					if(sourceLEDCount == 6){
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <device_task+0x360>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b06      	cmp	r3, #6
 8000578:	d009      	beq.n	800058e <device_task+0x2d2>
						dim_leds(&leds, &leds_to_control, &current_brightness);
						IWDG_Refresh(&hiwdg);
						sourceLEDCount = 0;
						sourceCountDone = true;
					}else{
						if(!sourceCountDone){
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <device_task+0x354>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d172      	bne.n	8000668 <device_task+0x3ac>
							sourceLEDCount++;
 8000582:	4a26      	ldr	r2, [pc, #152]	; (800061c <device_task+0x360>)
 8000584:	7813      	ldrb	r3, [r2, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	b2db      	uxtb	r3, r3
 800058a:	7013      	strb	r3, [r2, #0]
 800058c:	e06c      	b.n	8000668 <device_task+0x3ac>
						IWDG_Refresh(&hiwdg);
 800058e:	4c26      	ldr	r4, [pc, #152]	; (8000628 <device_task+0x36c>)
 8000590:	0020      	movs	r0, r4
 8000592:	f003 fbe9 	bl	8003d68 <IWDG_Refresh>
						dim_leds(&leds, &leds_to_control, &current_brightness);
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <device_task+0x328>)
 8000598:	4922      	ldr	r1, [pc, #136]	; (8000624 <device_task+0x368>)
 800059a:	4824      	ldr	r0, [pc, #144]	; (800062c <device_task+0x370>)
 800059c:	f003 faf0 	bl	8003b80 <dim_leds>
						IWDG_Refresh(&hiwdg);
 80005a0:	0020      	movs	r0, r4
 80005a2:	f003 fbe1 	bl	8003d68 <IWDG_Refresh>
						sourceLEDCount = 0;
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <device_task+0x360>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
						sourceCountDone = true;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <device_task+0x354>)
 80005ae:	3201      	adds	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e059      	b.n	8000668 <device_task+0x3ac>
			}
		}else
		{
			deviceTaskDelay = 1000;
			if(!knocked && deviceUpdateLED){
				IWDG_Refresh(&hiwdg);
 80005b4:	481c      	ldr	r0, [pc, #112]	; (8000628 <device_task+0x36c>)
 80005b6:	f003 fbd7 	bl	8003d68 <IWDG_Refresh>
				dim_leds(&leds, &leds_to_control, &current_brightness);
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <device_task+0x328>)
 80005bc:	4919      	ldr	r1, [pc, #100]	; (8000624 <device_task+0x368>)
 80005be:	481b      	ldr	r0, [pc, #108]	; (800062c <device_task+0x370>)
 80005c0:	f003 fade 	bl	8003b80 <dim_leds>
				deviceUpdateLED = false;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <device_task+0x344>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e048      	b.n	800065e <device_task+0x3a2>
			}else if(knocked){
				if(bat_soc < 10){
					if(ledLowCount < 4){
						led_blink(LED1, 3, 150000, &current_brightness);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <device_task+0x328>)
 80005ce:	4a1a      	ldr	r2, [pc, #104]	; (8000638 <device_task+0x37c>)
 80005d0:	2103      	movs	r1, #3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f003 f9d0 	bl	8003978 <led_blink>
						ledLowCount++;
 80005d8:	4a19      	ldr	r2, [pc, #100]	; (8000640 <device_task+0x384>)
 80005da:	7813      	ldrb	r3, [r2, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	7013      	strb	r3, [r2, #0]
 80005e2:	e03c      	b.n	800065e <device_task+0x3a2>
 80005e4:	20000088 	.word	0x20000088
 80005e8:	0000c350 	.word	0x0000c350
 80005ec:	20000100 	.word	0x20000100
 80005f0:	2000091c 	.word	0x2000091c
 80005f4:	20000084 	.word	0x20000084
 80005f8:	2000008e 	.word	0x2000008e
 80005fc:	20000086 	.word	0x20000086
 8000600:	20000094 	.word	0x20000094
 8000604:	20000008 	.word	0x20000008
 8000608:	20000064 	.word	0x20000064
 800060c:	20000085 	.word	0x20000085
 8000610:	20000111 	.word	0x20000111
 8000614:	20000004 	.word	0x20000004
 8000618:	20000005 	.word	0x20000005
 800061c:	20000112 	.word	0x20000112
 8000620:	20000910 	.word	0x20000910
 8000624:	200000b4 	.word	0x200000b4
 8000628:	2000093c 	.word	0x2000093c
 800062c:	2000000c 	.word	0x2000000c
 8000630:	20000006 	.word	0x20000006
 8000634:	200000b7 	.word	0x200000b7
 8000638:	000249f0 	.word	0x000249f0
 800063c:	200000b1 	.word	0x200000b1
 8000640:	200000b2 	.word	0x200000b2
					}else{
						knocked = false;
						ledLowCount = 0;
					}
				}else{
					if(knockActiveCount == 6){
 8000644:	4b53      	ldr	r3, [pc, #332]	; (8000794 <device_task+0x4d8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b06      	cmp	r3, #6
 800064a:	d06a      	beq.n	8000722 <device_task+0x466>
						IWDG_Refresh(&hiwdg);
						dim_leds(&leds, &leds_to_control, &current_brightness);
						knockActiveCount = 0;
						knocked = false;
					}else if(deviceUpdateLED){
 800064c:	4b52      	ldr	r3, [pc, #328]	; (8000798 <device_task+0x4dc>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d174      	bne.n	800073e <device_task+0x482>
						led_to_glow = led_logic_handler(bat_soc, plugAction, power_direction, false, &leds_to_control);
						IWDG_Refresh(&hiwdg);
						brighten_leds(&leds, &leds_to_control, &current_brightness);
						deviceUpdateLED = false;
					}
					knockActiveCount++;
 8000654:	4a4f      	ldr	r2, [pc, #316]	; (8000794 <device_task+0x4d8>)
 8000656:	7813      	ldrb	r3, [r2, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	7013      	strb	r3, [r2, #0]
				}

			}


			if(!knocked){
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <device_task+0x4e0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d100      	bne.n	8000668 <device_task+0x3ac>
 8000666:	e083      	b.n	8000770 <device_task+0x4b4>
				prepare_to_wakeup();
			}

		}

		currentSOC = bat_soc;
 8000668:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <device_task+0x4e4>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4a4d      	ldr	r2, [pc, #308]	; (80007a4 <device_task+0x4e8>)
 8000670:	7013      	strb	r3, [r2, #0]
		lastPowerDirection = power_direction;
 8000672:	4b4d      	ldr	r3, [pc, #308]	; (80007a8 <device_task+0x4ec>)
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <device_task+0x4f0>)
 8000678:	701a      	strb	r2, [r3, #0]
		chargeOK_prev = charge_ok;
 800067a:	4b4d      	ldr	r3, [pc, #308]	; (80007b0 <device_task+0x4f4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2209      	movs	r2, #9
 8000682:	446a      	add	r2, sp
 8000684:	7013      	strb	r3, [r2, #0]

		IWDG_Refresh(&hiwdg);
 8000686:	484b      	ldr	r0, [pc, #300]	; (80007b4 <device_task+0x4f8>)
 8000688:	f003 fb6e 	bl	8003d68 <IWDG_Refresh>
		vTaskDelay(pdMS_TO_TICKS(deviceTaskDelay));
 800068c:	4b4a      	ldr	r3, [pc, #296]	; (80007b8 <device_task+0x4fc>)
 800068e:	8818      	ldrh	r0, [r3, #0]
 8000690:	0143      	lsls	r3, r0, #5
 8000692:	1a1b      	subs	r3, r3, r0
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	18c0      	adds	r0, r0, r3
 8000698:	00c0      	lsls	r0, r0, #3
 800069a:	21fa      	movs	r1, #250	; 0xfa
 800069c:	0089      	lsls	r1, r1, #2
 800069e:	f7ff fd33 	bl	8000108 <__udivsi3>
 80006a2:	f001 fa83 	bl	8001bac <vTaskDelay>
		taskYIELD();
 80006a6:	f001 fe67 	bl	8002378 <vPortYield>
		pd_int_pin = GPIO_ReadFromInputPin(GPIOA, PD_INTERRUPT);
 80006aa:	2090      	movs	r0, #144	; 0x90
 80006ac:	2104      	movs	r1, #4
 80006ae:	05c0      	lsls	r0, r0, #23
 80006b0:	f002 f9c2 	bl	8002a38 <GPIO_ReadFromInputPin>
 80006b4:	230e      	movs	r3, #14
 80006b6:	446b      	add	r3, sp
 80006b8:	7018      	strb	r0, [r3, #0]
		if(pd_int_pin == 0){
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d100      	bne.n	80006c2 <device_task+0x406>
 80006c0:	e606      	b.n	80002d0 <device_task+0x14>
		pd_mode = pd_get_mode(&I2C1Handle);
 80006c2:	483e      	ldr	r0, [pc, #248]	; (80007bc <device_task+0x500>)
 80006c4:	f002 fd86 	bl	80031d4 <pd_get_mode>
 80006c8:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <device_task+0x504>)
 80006ca:	7018      	strb	r0, [r3, #0]
		if(pd_mode != PD_MODE_APP){
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d000      	beq.n	80006d4 <device_task+0x418>
 80006d2:	e600      	b.n	80002d6 <device_task+0x1a>
		if(plugAction == PD_PLUG_CONNECTED){
 80006d4:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <device_task+0x508>)
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	2901      	cmp	r1, #1
 80006da:	d100      	bne.n	80006de <device_task+0x422>
 80006dc:	e602      	b.n	80002e4 <device_task+0x28>
			deviceTaskDelay = 1000;
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <device_task+0x4fc>)
 80006e0:	22fa      	movs	r2, #250	; 0xfa
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	801a      	strh	r2, [r3, #0]
			if(!knocked && deviceUpdateLED){
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <device_task+0x4e0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d104      	bne.n	80006f8 <device_task+0x43c>
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <device_task+0x4dc>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d000      	beq.n	80006f8 <device_task+0x43c>
 80006f6:	e75d      	b.n	80005b4 <device_task+0x2f8>
			}else if(knocked){
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <device_task+0x4e0>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0ae      	beq.n	800065e <device_task+0x3a2>
				if(bat_soc < 10){
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <device_task+0x4e4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b09      	cmp	r3, #9
 8000708:	d89c      	bhi.n	8000644 <device_task+0x388>
					if(ledLowCount < 4){
 800070a:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <device_task+0x50c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b03      	cmp	r3, #3
 8000712:	d800      	bhi.n	8000716 <device_task+0x45a>
 8000714:	e75a      	b.n	80005cc <device_task+0x310>
						knocked = false;
 8000716:	2300      	movs	r3, #0
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <device_task+0x4e0>)
 800071a:	7013      	strb	r3, [r2, #0]
						ledLowCount = 0;
 800071c:	4a2a      	ldr	r2, [pc, #168]	; (80007c8 <device_task+0x50c>)
 800071e:	7013      	strb	r3, [r2, #0]
 8000720:	e79d      	b.n	800065e <device_task+0x3a2>
						IWDG_Refresh(&hiwdg);
 8000722:	4824      	ldr	r0, [pc, #144]	; (80007b4 <device_task+0x4f8>)
 8000724:	f003 fb20 	bl	8003d68 <IWDG_Refresh>
						dim_leds(&leds, &leds_to_control, &current_brightness);
 8000728:	4a28      	ldr	r2, [pc, #160]	; (80007cc <device_task+0x510>)
 800072a:	4929      	ldr	r1, [pc, #164]	; (80007d0 <device_task+0x514>)
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <device_task+0x518>)
 800072e:	f003 fa27 	bl	8003b80 <dim_leds>
						knockActiveCount = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <device_task+0x4d8>)
 8000736:	7013      	strb	r3, [r2, #0]
						knocked = false;
 8000738:	4a18      	ldr	r2, [pc, #96]	; (800079c <device_task+0x4e0>)
 800073a:	7013      	strb	r3, [r2, #0]
 800073c:	e78a      	b.n	8000654 <device_task+0x398>
						led_to_glow = led_logic_handler(bat_soc, plugAction, power_direction, false, &leds_to_control);
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <device_task+0x4e4>)
 8000740:	7818      	ldrb	r0, [r3, #0]
 8000742:	b2c0      	uxtb	r0, r0
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <device_task+0x4ec>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	4c21      	ldr	r4, [pc, #132]	; (80007d0 <device_task+0x514>)
 800074a:	9400      	str	r4, [sp, #0]
 800074c:	2300      	movs	r3, #0
 800074e:	f003 f8c1 	bl	80038d4 <led_logic_handler>
 8000752:	230f      	movs	r3, #15
 8000754:	446b      	add	r3, sp
 8000756:	7018      	strb	r0, [r3, #0]
						IWDG_Refresh(&hiwdg);
 8000758:	4816      	ldr	r0, [pc, #88]	; (80007b4 <device_task+0x4f8>)
 800075a:	f003 fb05 	bl	8003d68 <IWDG_Refresh>
						brighten_leds(&leds, &leds_to_control, &current_brightness);
 800075e:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <device_task+0x510>)
 8000760:	0021      	movs	r1, r4
 8000762:	481c      	ldr	r0, [pc, #112]	; (80007d4 <device_task+0x518>)
 8000764:	f003 fa6c 	bl	8003c40 <brighten_leds>
						deviceUpdateLED = false;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <device_task+0x4dc>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e771      	b.n	8000654 <device_task+0x398>
				IWDG_Refresh(&hiwdg);
 8000770:	4c10      	ldr	r4, [pc, #64]	; (80007b4 <device_task+0x4f8>)
 8000772:	0020      	movs	r0, r4
 8000774:	f003 faf8 	bl	8003d68 <IWDG_Refresh>
				dim_leds(&leds, &leds_to_control, &current_brightness);
 8000778:	4a14      	ldr	r2, [pc, #80]	; (80007cc <device_task+0x510>)
 800077a:	4915      	ldr	r1, [pc, #84]	; (80007d0 <device_task+0x514>)
 800077c:	4815      	ldr	r0, [pc, #84]	; (80007d4 <device_task+0x518>)
 800077e:	f003 f9ff 	bl	8003b80 <dim_leds>
				IWDG_Refresh(&hiwdg);
 8000782:	0020      	movs	r0, r4
 8000784:	f003 faf0 	bl	8003d68 <IWDG_Refresh>
				prepare_to_sleep();
 8000788:	f003 fb34 	bl	8003df4 <prepare_to_sleep>
				prepare_to_wakeup();
 800078c:	f003 fb62 	bl	8003e54 <prepare_to_wakeup>
 8000790:	e76a      	b.n	8000668 <device_task+0x3ac>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	200000b0 	.word	0x200000b0
 8000798:	20000094 	.word	0x20000094
 800079c:	200000b1 	.word	0x200000b1
 80007a0:	20000084 	.word	0x20000084
 80007a4:	20000086 	.word	0x20000086
 80007a8:	20000064 	.word	0x20000064
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000004 	.word	0x20000004
 80007b4:	2000093c 	.word	0x2000093c
 80007b8:	20000006 	.word	0x20000006
 80007bc:	2000091c 	.word	0x2000091c
 80007c0:	2000000f 	.word	0x2000000f
 80007c4:	20000910 	.word	0x20000910
 80007c8:	200000b2 	.word	0x200000b2
 80007cc:	20000088 	.word	0x20000088
 80007d0:	200000b4 	.word	0x200000b4
 80007d4:	2000000c 	.word	0x2000000c

080007d8 <main>:
{
 80007d8:	b500      	push	{lr}
 80007da:	b083      	sub	sp, #12
	delay(2000000);
 80007dc:	4817      	ldr	r0, [pc, #92]	; (800083c <main+0x64>)
 80007de:	f001 ff71 	bl	80026c4 <delay>
	IWDG_Init();
 80007e2:	f003 fa95 	bl	8003d10 <IWDG_Init>
	IO_Init();
 80007e6:	f002 ffd9 	bl	800379c <IO_Init>
	I2c_Init();
 80007ea:	f003 f839 	bl	8003860 <I2c_Init>
	USART1_Init();
 80007ee:	f003 f81f 	bl	8003830 <USART1_Init>
	pd_restart_setup();
 80007f2:	f7ff fd31 	bl	8000258 <pd_restart_setup>
	Knock_PD_trigger_IT_enable();
 80007f6:	f003 f849 	bl	800388c <Knock_PD_trigger_IT_enable>
 	status = xTaskCreate(host_comms, "Host_Comms", 50, NULL, 2, &hostComms_handle);
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <main+0x68>)
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	2302      	movs	r3, #2
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2300      	movs	r3, #0
 8000804:	2232      	movs	r2, #50	; 0x32
 8000806:	490f      	ldr	r1, [pc, #60]	; (8000844 <main+0x6c>)
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <main+0x70>)
 800080a:	f001 f855 	bl	80018b8 <xTaskCreate>
    configASSERT(status == pdPASS);
 800080e:	2801      	cmp	r0, #1
 8000810:	d001      	beq.n	8000816 <main+0x3e>
 8000812:	b672      	cpsid	i
 8000814:	e7fe      	b.n	8000814 <main+0x3c>
 	status = xTaskCreate(device_task, "Device_Task", 35, NULL, 2, &deviceTask_handle);
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <main+0x74>)
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	2302      	movs	r3, #2
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	2223      	movs	r2, #35	; 0x23
 8000822:	490b      	ldr	r1, [pc, #44]	; (8000850 <main+0x78>)
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <main+0x7c>)
 8000826:	f001 f847 	bl	80018b8 <xTaskCreate>
    configASSERT(status == pdPASS);
 800082a:	2801      	cmp	r0, #1
 800082c:	d001      	beq.n	8000832 <main+0x5a>
 800082e:	b672      	cpsid	i
 8000830:	e7fe      	b.n	8000830 <main+0x58>
    vTaskStartScheduler();
 8000832:	f001 f8a1 	bl	8001978 <vTaskStartScheduler>
}
 8000836:	2000      	movs	r0, #0
 8000838:	b003      	add	sp, #12
 800083a:	bd00      	pop	{pc}
 800083c:	001e8480 	.word	0x001e8480
 8000840:	200000ac 	.word	0x200000ac
 8000844:	08003f2c 	.word	0x08003f2c
 8000848:	08000cf9 	.word	0x08000cf9
 800084c:	20000090 	.word	0x20000090
 8000850:	08003f38 	.word	0x08003f38
 8000854:	080002bd 	.word	0x080002bd

08000858 <send_ok_msg>:
{
 8000858:	b570      	push	{r4, r5, r6, lr}
	msg[0] = 0x4F;
 800085a:	480f      	ldr	r0, [pc, #60]	; (8000898 <send_ok_msg+0x40>)
 800085c:	234f      	movs	r3, #79	; 0x4f
 800085e:	7003      	strb	r3, [r0, #0]
	msg[1] = 0x4B;
 8000860:	3b04      	subs	r3, #4
 8000862:	7043      	strb	r3, [r0, #1]
	encodeData(&msg[0], 2, &encMsg[0], &encDataLen);
 8000864:	4c0d      	ldr	r4, [pc, #52]	; (800089c <send_ok_msg+0x44>)
 8000866:	0023      	movs	r3, r4
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <send_ok_msg+0x48>)
 800086a:	2102      	movs	r1, #2
 800086c:	f001 ff49 	bl	8002702 <encodeData>
	temp = encDataLen;
 8000870:	7825      	ldrb	r5, [r4, #0]
 8000872:	b2ed      	uxtb	r5, r5
	temp2 = 0;
 8000874:	2400      	movs	r4, #0
	while(temp > 0){
 8000876:	e00b      	b.n	8000890 <send_ok_msg+0x38>
	    while( USART_SendDataIT(&usart1_handle, &encMsg[temp2], 1) != USART_READY);
 8000878:	4909      	ldr	r1, [pc, #36]	; (80008a0 <send_ok_msg+0x48>)
 800087a:	1909      	adds	r1, r1, r4
 800087c:	2201      	movs	r2, #1
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <send_ok_msg+0x4c>)
 8000880:	f002 fa38 	bl	8002cf4 <USART_SendDataIT>
 8000884:	2800      	cmp	r0, #0
 8000886:	d1f7      	bne.n	8000878 <send_ok_msg+0x20>
		temp--;
 8000888:	3d01      	subs	r5, #1
 800088a:	b2ed      	uxtb	r5, r5
		temp2++;
 800088c:	3401      	adds	r4, #1
 800088e:	b2e4      	uxtb	r4, r4
	while(temp > 0){
 8000890:	2d00      	cmp	r5, #0
 8000892:	d1f1      	bne.n	8000878 <send_ok_msg+0x20>
}
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	200000b8 	.word	0x200000b8
 800089c:	20000095 	.word	0x20000095
 80008a0:	20000098 	.word	0x20000098
 80008a4:	2000096c 	.word	0x2000096c

080008a8 <process_command>:
{
 80008a8:	b530      	push	{r4, r5, lr}
 80008aa:	b083      	sub	sp, #12
	if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x02 && cmd_buf[3] == 0x01){
 80008ac:	7843      	ldrb	r3, [r0, #1]
 80008ae:	2bf2      	cmp	r3, #242	; 0xf2
 80008b0:	d01f      	beq.n	80008f2 <process_command+0x4a>
	}else if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x02 && cmd_buf[3] == 0x02){
 80008b2:	2bf2      	cmp	r3, #242	; 0xf2
 80008b4:	d032      	beq.n	800091c <process_command+0x74>
	}else if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x02 && cmd_buf[3] == 0xFF && cmd_buf[4] == 0x00){
 80008b6:	2bf2      	cmp	r3, #242	; 0xf2
 80008b8:	d04a      	beq.n	8000950 <process_command+0xa8>
	}else if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x05 && cmd_buf[3] == 0xFF && cmd_buf[4] == 0x00){
 80008ba:	2bf2      	cmp	r3, #242	; 0xf2
 80008bc:	d06a      	beq.n	8000994 <process_command+0xec>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x01 && cmd_buf[3] == 0x08){
 80008be:	2bf3      	cmp	r3, #243	; 0xf3
 80008c0:	d100      	bne.n	80008c4 <process_command+0x1c>
 80008c2:	e07e      	b.n	80009c2 <process_command+0x11a>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x05 && cmd_buf[3] == 0x10){
 80008c4:	2bf3      	cmp	r3, #243	; 0xf3
 80008c6:	d100      	bne.n	80008ca <process_command+0x22>
 80008c8:	e093      	b.n	80009f2 <process_command+0x14a>
	else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x02 && cmd_buf[3] == 0x19){
 80008ca:	2bf3      	cmp	r3, #243	; 0xf3
 80008cc:	d100      	bne.n	80008d0 <process_command+0x28>
 80008ce:	e0d4      	b.n	8000a7a <process_command+0x1d2>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x40){
 80008d0:	2bf3      	cmp	r3, #243	; 0xf3
 80008d2:	d100      	bne.n	80008d6 <process_command+0x2e>
 80008d4:	e0f3      	b.n	8000abe <process_command+0x216>
	}else if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x40){
 80008d6:	2bf2      	cmp	r3, #242	; 0xf2
 80008d8:	d100      	bne.n	80008dc <process_command+0x34>
 80008da:	e10b      	b.n	8000af4 <process_command+0x24c>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x03 && cmd_buf[3] == 0x58){
 80008dc:	2bf3      	cmp	r3, #243	; 0xf3
 80008de:	d100      	bne.n	80008e2 <process_command+0x3a>
 80008e0:	e117      	b.n	8000b12 <process_command+0x26a>
	}else if(cmd_buf[1] == 0xF0 && cmd_buf[2] == 0x03){
 80008e2:	2bf0      	cmp	r3, #240	; 0xf0
 80008e4:	d100      	bne.n	80008e8 <process_command+0x40>
 80008e6:	e129      	b.n	8000b3c <process_command+0x294>
	}else if(cmd_buf[1] == 0xF0 && cmd_buf[2] == 0x05){
 80008e8:	2bf0      	cmp	r3, #240	; 0xf0
 80008ea:	d100      	bne.n	80008ee <process_command+0x46>
 80008ec:	e13a      	b.n	8000b64 <process_command+0x2bc>
}
 80008ee:	b003      	add	sp, #12
 80008f0:	bd30      	pop	{r4, r5, pc}
	if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x02 && cmd_buf[3] == 0x01){
 80008f2:	7882      	ldrb	r2, [r0, #2]
 80008f4:	2a02      	cmp	r2, #2
 80008f6:	d1dc      	bne.n	80008b2 <process_command+0xa>
 80008f8:	78c2      	ldrb	r2, [r0, #3]
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d1d9      	bne.n	80008b2 <process_command+0xa>
		pd_swap_to_sink(&I2C1Handle);
 80008fe:	4ca3      	ldr	r4, [pc, #652]	; (8000b8c <process_command+0x2e4>)
 8000900:	0020      	movs	r0, r4
 8000902:	f002 fc3a 	bl	800317a <pd_swap_to_sink>
		power_direction = pd_get_power_direction(&I2C1Handle);
 8000906:	0020      	movs	r0, r4
 8000908:	f002 fc24 	bl	8003154 <pd_get_power_direction>
 800090c:	4ba0      	ldr	r3, [pc, #640]	; (8000b90 <process_command+0x2e8>)
 800090e:	7018      	strb	r0, [r3, #0]
		sourceCountDone = false;
 8000910:	2300      	movs	r3, #0
 8000912:	4aa0      	ldr	r2, [pc, #640]	; (8000b94 <process_command+0x2ec>)
 8000914:	7013      	strb	r3, [r2, #0]
		sourceLEDCount = 0;
 8000916:	4aa0      	ldr	r2, [pc, #640]	; (8000b98 <process_command+0x2f0>)
 8000918:	7013      	strb	r3, [r2, #0]
 800091a:	e7e8      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x02 && cmd_buf[3] == 0x02){
 800091c:	7882      	ldrb	r2, [r0, #2]
 800091e:	2a02      	cmp	r2, #2
 8000920:	d1c9      	bne.n	80008b6 <process_command+0xe>
 8000922:	78c2      	ldrb	r2, [r0, #3]
 8000924:	2a02      	cmp	r2, #2
 8000926:	d1c6      	bne.n	80008b6 <process_command+0xe>
		pd_swap_to_source(&I2C1Handle);
 8000928:	4c98      	ldr	r4, [pc, #608]	; (8000b8c <process_command+0x2e4>)
 800092a:	0020      	movs	r0, r4
 800092c:	f002 fc20 	bl	8003170 <pd_swap_to_source>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000930:	20fa      	movs	r0, #250	; 0xfa
 8000932:	0080      	lsls	r0, r0, #2
 8000934:	f001 f93a 	bl	8001bac <vTaskDelay>
		pd_swap_to_UFP(&I2C1Handle);
 8000938:	0020      	movs	r0, r4
 800093a:	f002 fc23 	bl	8003184 <pd_swap_to_UFP>
		power_direction = pd_get_power_direction(&I2C1Handle);
 800093e:	0020      	movs	r0, r4
 8000940:	f002 fc08 	bl	8003154 <pd_get_power_direction>
 8000944:	4b92      	ldr	r3, [pc, #584]	; (8000b90 <process_command+0x2e8>)
 8000946:	7018      	strb	r0, [r3, #0]
		deviceUpdateLED = true;
 8000948:	4b94      	ldr	r3, [pc, #592]	; (8000b9c <process_command+0x2f4>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e7ce      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x02 && cmd_buf[3] == 0xFF && cmd_buf[4] == 0x00){
 8000950:	7882      	ldrb	r2, [r0, #2]
 8000952:	2a02      	cmp	r2, #2
 8000954:	d1b1      	bne.n	80008ba <process_command+0x12>
 8000956:	78c2      	ldrb	r2, [r0, #3]
 8000958:	2aff      	cmp	r2, #255	; 0xff
 800095a:	d1ae      	bne.n	80008ba <process_command+0x12>
 800095c:	7902      	ldrb	r2, [r0, #4]
 800095e:	2a00      	cmp	r2, #0
 8000960:	d1ab      	bne.n	80008ba <process_command+0x12>
		pd_reset(&I2C1Handle);
 8000962:	4c8a      	ldr	r4, [pc, #552]	; (8000b8c <process_command+0x2e4>)
 8000964:	0020      	movs	r0, r4
 8000966:	f002 fbe2 	bl	800312e <pd_reset>
		delay(4000000);
 800096a:	488d      	ldr	r0, [pc, #564]	; (8000ba0 <process_command+0x2f8>)
 800096c:	f001 feaa 	bl	80026c4 <delay>
		pd_restart_setup();
 8000970:	f7ff fc72 	bl	8000258 <pd_restart_setup>
		pd_swap_to_UFP(&I2C1Handle);
 8000974:	0020      	movs	r0, r4
 8000976:	f002 fc05 	bl	8003184 <pd_swap_to_UFP>
		plugAction = pd_get_plug_detect(&I2C1Handle);
 800097a:	0020      	movs	r0, r4
 800097c:	f002 fbdc 	bl	8003138 <pd_get_plug_detect>
 8000980:	4b88      	ldr	r3, [pc, #544]	; (8000ba4 <process_command+0x2fc>)
 8000982:	7018      	strb	r0, [r3, #0]
		if(plugAction == PD_PLUG_CONNECTED){
 8000984:	2801      	cmp	r0, #1
 8000986:	d1b2      	bne.n	80008ee <process_command+0x46>
		    power_direction = pd_get_power_direction(&I2C1Handle);
 8000988:	4880      	ldr	r0, [pc, #512]	; (8000b8c <process_command+0x2e4>)
 800098a:	f002 fbe3 	bl	8003154 <pd_get_power_direction>
 800098e:	4b80      	ldr	r3, [pc, #512]	; (8000b90 <process_command+0x2e8>)
 8000990:	7018      	strb	r0, [r3, #0]
 8000992:	e7ac      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x05 && cmd_buf[3] == 0xFF && cmd_buf[4] == 0x00){
 8000994:	7882      	ldrb	r2, [r0, #2]
 8000996:	2a05      	cmp	r2, #5
 8000998:	d000      	beq.n	800099c <process_command+0xf4>
 800099a:	e790      	b.n	80008be <process_command+0x16>
 800099c:	78c2      	ldrb	r2, [r0, #3]
 800099e:	2aff      	cmp	r2, #255	; 0xff
 80009a0:	d000      	beq.n	80009a4 <process_command+0xfc>
 80009a2:	e78c      	b.n	80008be <process_command+0x16>
 80009a4:	7902      	ldrb	r2, [r0, #4]
 80009a6:	2a00      	cmp	r2, #0
 80009a8:	d000      	beq.n	80009ac <process_command+0x104>
 80009aa:	e788      	b.n	80008be <process_command+0x16>
		gauge_unseal(&I2C1Handle);
 80009ac:	4c77      	ldr	r4, [pc, #476]	; (8000b8c <process_command+0x2e4>)
 80009ae:	0020      	movs	r0, r4
 80009b0:	f002 fe08 	bl	80035c4 <gauge_unseal>
		gauge_reset(&I2C1Handle);
 80009b4:	0020      	movs	r0, r4
 80009b6:	f002 fe63 	bl	8003680 <gauge_reset>
		gauge_full_sleep_enable(&I2C1Handle);
 80009ba:	0020      	movs	r0, r4
 80009bc:	f002 fe7c 	bl	80036b8 <gauge_full_sleep_enable>
 80009c0:	e795      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x01 && cmd_buf[3] == 0x08){
 80009c2:	7882      	ldrb	r2, [r0, #2]
 80009c4:	2a01      	cmp	r2, #1
 80009c6:	d000      	beq.n	80009ca <process_command+0x122>
 80009c8:	e77c      	b.n	80008c4 <process_command+0x1c>
 80009ca:	78c2      	ldrb	r2, [r0, #3]
 80009cc:	2a08      	cmp	r2, #8
 80009ce:	d000      	beq.n	80009d2 <process_command+0x12a>
 80009d0:	e778      	b.n	80008c4 <process_command+0x1c>
		msg[0] = FW_VERSION & 0xFF;
 80009d2:	4875      	ldr	r0, [pc, #468]	; (8000ba8 <process_command+0x300>)
 80009d4:	2300      	movs	r3, #0
 80009d6:	7003      	strb	r3, [r0, #0]
		msg[1] = (FW_VERSION >> 8) & 0xFF;
 80009d8:	7043      	strb	r3, [r0, #1]
		msg[2] = (FW_VERSION >> 16) & 0xFF;
 80009da:	3303      	adds	r3, #3
 80009dc:	7083      	strb	r3, [r0, #2]
		msg[3] = (FW_VERSION >> 24) & 0xFF;
 80009de:	3b02      	subs	r3, #2
 80009e0:	70c3      	strb	r3, [r0, #3]
		encodeData(&msg[0], 4, &encMsg[0], &encDataLen);
 80009e2:	4b72      	ldr	r3, [pc, #456]	; (8000bac <process_command+0x304>)
 80009e4:	4a72      	ldr	r2, [pc, #456]	; (8000bb0 <process_command+0x308>)
 80009e6:	2104      	movs	r1, #4
 80009e8:	f001 fe8b 	bl	8002702 <encodeData>
		respond_to_host();
 80009ec:	f7ff fc18 	bl	8000220 <respond_to_host>
 80009f0:	e77d      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x05 && cmd_buf[3] == 0x10){
 80009f2:	7882      	ldrb	r2, [r0, #2]
 80009f4:	2a05      	cmp	r2, #5
 80009f6:	d000      	beq.n	80009fa <process_command+0x152>
 80009f8:	e767      	b.n	80008ca <process_command+0x22>
 80009fa:	78c2      	ldrb	r2, [r0, #3]
 80009fc:	2a10      	cmp	r2, #16
 80009fe:	d000      	beq.n	8000a02 <process_command+0x15a>
 8000a00:	e763      	b.n	80008ca <process_command+0x22>
		get_bat_report(&I2C1Handle, &pbatReport);
 8000a02:	496c      	ldr	r1, [pc, #432]	; (8000bb4 <process_command+0x30c>)
 8000a04:	4861      	ldr	r0, [pc, #388]	; (8000b8c <process_command+0x2e4>)
 8000a06:	f002 fdb7 	bl	8003578 <get_bat_report>
		if(deadBatFlag){
 8000a0a:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <process_command+0x310>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d006      	beq.n	8000a20 <process_command+0x178>
			pbatReport.SOC = 0;
 8000a12:	4b68      	ldr	r3, [pc, #416]	; (8000bb4 <process_command+0x30c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
			pbatReport.remainingCapacity[0] = 0;
 8000a18:	709a      	strb	r2, [r3, #2]
			pbatReport.remainingCapacity[1] = 0;
 8000a1a:	70da      	strb	r2, [r3, #3]
			pbatReport.timeToEmpty[0] = 0;
 8000a1c:	731a      	strb	r2, [r3, #12]
			pbatReport.timeToEmpty[1] = 0;
 8000a1e:	735a      	strb	r2, [r3, #13]
		msg[0] = pbatReport.SOC;
 8000a20:	4b64      	ldr	r3, [pc, #400]	; (8000bb4 <process_command+0x30c>)
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	4860      	ldr	r0, [pc, #384]	; (8000ba8 <process_command+0x300>)
 8000a26:	7002      	strb	r2, [r0, #0]
		msg[1] = pbatReport.SOH;
 8000a28:	785a      	ldrb	r2, [r3, #1]
 8000a2a:	7042      	strb	r2, [r0, #1]
		msg[2] = pbatReport.remainingCapacity[0];
 8000a2c:	789a      	ldrb	r2, [r3, #2]
 8000a2e:	7082      	strb	r2, [r0, #2]
		msg[3] = pbatReport.remainingCapacity[1];
 8000a30:	78da      	ldrb	r2, [r3, #3]
 8000a32:	70c2      	strb	r2, [r0, #3]
		msg[4] = pbatReport.fullCapacity[0];
 8000a34:	791a      	ldrb	r2, [r3, #4]
 8000a36:	7102      	strb	r2, [r0, #4]
		msg[5] = pbatReport.fullCapacity[1];
 8000a38:	795a      	ldrb	r2, [r3, #5]
 8000a3a:	7142      	strb	r2, [r0, #5]
		msg[6] = pbatReport.voltage[0];
 8000a3c:	799a      	ldrb	r2, [r3, #6]
 8000a3e:	7182      	strb	r2, [r0, #6]
		msg[7] = pbatReport.voltage[1];
 8000a40:	79da      	ldrb	r2, [r3, #7]
 8000a42:	71c2      	strb	r2, [r0, #7]
		msg[8] = pbatReport.current[0];
 8000a44:	7a1a      	ldrb	r2, [r3, #8]
 8000a46:	7202      	strb	r2, [r0, #8]
		msg[9] = pbatReport.current[1];
 8000a48:	7a5a      	ldrb	r2, [r3, #9]
 8000a4a:	7242      	strb	r2, [r0, #9]
		msg[10] = pbatReport.temperature[0];
 8000a4c:	7a9a      	ldrb	r2, [r3, #10]
 8000a4e:	7282      	strb	r2, [r0, #10]
		msg[11] = pbatReport.temperature[1];
 8000a50:	7ada      	ldrb	r2, [r3, #11]
 8000a52:	72c2      	strb	r2, [r0, #11]
		msg[12] = pbatReport.timeToEmpty[0];
 8000a54:	7b1a      	ldrb	r2, [r3, #12]
 8000a56:	7302      	strb	r2, [r0, #12]
		msg[13] = pbatReport.timeToEmpty[1];
 8000a58:	7b5a      	ldrb	r2, [r3, #13]
 8000a5a:	7342      	strb	r2, [r0, #13]
		msg[14] = pbatReport.timeToFull[0];
 8000a5c:	7b9a      	ldrb	r2, [r3, #14]
 8000a5e:	7382      	strb	r2, [r0, #14]
		msg[15] = pbatReport.timeToFull[1];
 8000a60:	7bdb      	ldrb	r3, [r3, #15]
 8000a62:	73c3      	strb	r3, [r0, #15]
		msg[16] = power_direction;
 8000a64:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <process_command+0x2e8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	7403      	strb	r3, [r0, #16]
		encodeData(&msg[0], 17, &encMsg[0], &encDataLen);
 8000a6a:	4b50      	ldr	r3, [pc, #320]	; (8000bac <process_command+0x304>)
 8000a6c:	4a50      	ldr	r2, [pc, #320]	; (8000bb0 <process_command+0x308>)
 8000a6e:	2111      	movs	r1, #17
 8000a70:	f001 fe47 	bl	8002702 <encodeData>
		respond_to_host();
 8000a74:	f7ff fbd4 	bl	8000220 <respond_to_host>
 8000a78:	e739      	b.n	80008ee <process_command+0x46>
	else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x02 && cmd_buf[3] == 0x19){
 8000a7a:	7882      	ldrb	r2, [r0, #2]
 8000a7c:	2a02      	cmp	r2, #2
 8000a7e:	d000      	beq.n	8000a82 <process_command+0x1da>
 8000a80:	e726      	b.n	80008d0 <process_command+0x28>
 8000a82:	78c2      	ldrb	r2, [r0, #3]
 8000a84:	2a19      	cmp	r2, #25
 8000a86:	d000      	beq.n	8000a8a <process_command+0x1e2>
 8000a88:	e722      	b.n	80008d0 <process_command+0x28>
		pd_mode = pd_get_mode(&I2C1Handle);
 8000a8a:	4d40      	ldr	r5, [pc, #256]	; (8000b8c <process_command+0x2e4>)
 8000a8c:	0028      	movs	r0, r5
 8000a8e:	f002 fba1 	bl	80031d4 <pd_get_mode>
 8000a92:	4c4a      	ldr	r4, [pc, #296]	; (8000bbc <process_command+0x314>)
 8000a94:	7020      	strb	r0, [r4, #0]
		deadBatFlag = pd_get_dead_flag(&I2C1Handle);
 8000a96:	0028      	movs	r0, r5
 8000a98:	f002 fb79 	bl	800318e <pd_get_dead_flag>
 8000a9c:	4a46      	ldr	r2, [pc, #280]	; (8000bb8 <process_command+0x310>)
 8000a9e:	7010      	strb	r0, [r2, #0]
		msg[0] = pd_mode;
 8000aa0:	7823      	ldrb	r3, [r4, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4840      	ldr	r0, [pc, #256]	; (8000ba8 <process_command+0x300>)
 8000aa6:	7003      	strb	r3, [r0, #0]
		msg[1] = deadBatFlag;
 8000aa8:	7813      	ldrb	r3, [r2, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	7043      	strb	r3, [r0, #1]
		encodeData(&msg[0], 2, &encMsg[0], &encDataLen);
 8000aae:	4b3f      	ldr	r3, [pc, #252]	; (8000bac <process_command+0x304>)
 8000ab0:	4a3f      	ldr	r2, [pc, #252]	; (8000bb0 <process_command+0x308>)
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	f001 fe25 	bl	8002702 <encodeData>
		respond_to_host();
 8000ab8:	f7ff fbb2 	bl	8000220 <respond_to_host>
 8000abc:	e717      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x40){
 8000abe:	7882      	ldrb	r2, [r0, #2]
 8000ac0:	2a40      	cmp	r2, #64	; 0x40
 8000ac2:	d000      	beq.n	8000ac6 <process_command+0x21e>
 8000ac4:	e707      	b.n	80008d6 <process_command+0x2e>
		uint8_t temp_device_addr = cmd_buf[3], temp_reg_addr = cmd_buf[4], temp_len = cmd_buf[5];
 8000ac6:	78c1      	ldrb	r1, [r0, #3]
 8000ac8:	7902      	ldrb	r2, [r0, #4]
 8000aca:	7944      	ldrb	r4, [r0, #5]
		if(cmd_buf[3] == PD_SLAVE_ADDR){
 8000acc:	2920      	cmp	r1, #32
 8000ace:	d00e      	beq.n	8000aee <process_command+0x246>
		read_i2c_generic(&I2C1Handle, cmd_buf[3], cmd_buf[4], &msg[0], temp_len);
 8000ad0:	4d35      	ldr	r5, [pc, #212]	; (8000ba8 <process_command+0x300>)
 8000ad2:	9400      	str	r4, [sp, #0]
 8000ad4:	002b      	movs	r3, r5
 8000ad6:	482d      	ldr	r0, [pc, #180]	; (8000b8c <process_command+0x2e4>)
 8000ad8:	f003 f94c 	bl	8003d74 <read_i2c_generic>
		encodeData(&msg[0], temp_len, &encMsg[0], &encDataLen);
 8000adc:	4b33      	ldr	r3, [pc, #204]	; (8000bac <process_command+0x304>)
 8000ade:	4a34      	ldr	r2, [pc, #208]	; (8000bb0 <process_command+0x308>)
 8000ae0:	0021      	movs	r1, r4
 8000ae2:	0028      	movs	r0, r5
 8000ae4:	f001 fe0d 	bl	8002702 <encodeData>
		respond_to_host();
 8000ae8:	f7ff fb9a 	bl	8000220 <respond_to_host>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x40){
 8000aec:	e6ff      	b.n	80008ee <process_command+0x46>
			temp_len++;
 8000aee:	3401      	adds	r4, #1
 8000af0:	b2e4      	uxtb	r4, r4
 8000af2:	e7ed      	b.n	8000ad0 <process_command+0x228>
	}else if(cmd_buf[1] == 0xF2 && cmd_buf[2] == 0x40){
 8000af4:	7882      	ldrb	r2, [r0, #2]
 8000af6:	2a40      	cmp	r2, #64	; 0x40
 8000af8:	d000      	beq.n	8000afc <process_command+0x254>
 8000afa:	e6ef      	b.n	80008dc <process_command+0x34>
		write_i2c_generic(&I2C1Handle, cmd_buf[3], cmd_buf[4], &cmd_buf[6], cmd_buf[5]);
 8000afc:	1d83      	adds	r3, r0, #6
 8000afe:	7902      	ldrb	r2, [r0, #4]
 8000b00:	78c1      	ldrb	r1, [r0, #3]
 8000b02:	7940      	ldrb	r0, [r0, #5]
 8000b04:	9000      	str	r0, [sp, #0]
 8000b06:	4821      	ldr	r0, [pc, #132]	; (8000b8c <process_command+0x2e4>)
 8000b08:	f003 f95c 	bl	8003dc4 <write_i2c_generic>
		send_ok_msg();
 8000b0c:	f7ff fea4 	bl	8000858 <send_ok_msg>
 8000b10:	e6ed      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF3 && cmd_buf[2] == 0x03 && cmd_buf[3] == 0x58){
 8000b12:	7882      	ldrb	r2, [r0, #2]
 8000b14:	2a03      	cmp	r2, #3
 8000b16:	d000      	beq.n	8000b1a <process_command+0x272>
 8000b18:	e6e3      	b.n	80008e2 <process_command+0x3a>
 8000b1a:	78c2      	ldrb	r2, [r0, #3]
 8000b1c:	2a58      	cmp	r2, #88	; 0x58
 8000b1e:	d000      	beq.n	8000b22 <process_command+0x27a>
 8000b20:	e6df      	b.n	80008e2 <process_command+0x3a>
		msg[0] = charge_ok_val;
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <process_command+0x318>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <process_command+0x300>)
 8000b2a:	7003      	strb	r3, [r0, #0]
		encodeData(&msg[0], 1, &encMsg[0], &encDataLen);
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <process_command+0x304>)
 8000b2e:	4a20      	ldr	r2, [pc, #128]	; (8000bb0 <process_command+0x308>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	f001 fde6 	bl	8002702 <encodeData>
		respond_to_host();
 8000b36:	f7ff fb73 	bl	8000220 <respond_to_host>
 8000b3a:	e6d8      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF0 && cmd_buf[2] == 0x03){
 8000b3c:	7882      	ldrb	r2, [r0, #2]
 8000b3e:	2a03      	cmp	r2, #3
 8000b40:	d000      	beq.n	8000b44 <process_command+0x29c>
 8000b42:	e6d1      	b.n	80008e8 <process_command+0x40>
		patchSize = ( (cmd_buf[3] << 8) | (cmd_buf[4]) );
 8000b44:	78c2      	ldrb	r2, [r0, #3]
 8000b46:	0212      	lsls	r2, r2, #8
 8000b48:	7903      	ldrb	r3, [r0, #4]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <process_command+0x31c>)
 8000b4e:	8013      	strh	r3, [r2, #0]
		system_mode = PROGRAM_PD_MODE;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <process_command+0x320>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(deviceTask_handle);
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <process_command+0x324>)
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	f001 f885 	bl	8001c68 <vTaskSuspend>
		send_ok_msg();
 8000b5e:	f7ff fe7b 	bl	8000858 <send_ok_msg>
 8000b62:	e6c4      	b.n	80008ee <process_command+0x46>
	}else if(cmd_buf[1] == 0xF0 && cmd_buf[2] == 0x05){
 8000b64:	7883      	ldrb	r3, [r0, #2]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d000      	beq.n	8000b6c <process_command+0x2c4>
 8000b6a:	e6c0      	b.n	80008ee <process_command+0x46>
		patchSize = ( (cmd_buf[3] << 8) | (cmd_buf[4]) );
 8000b6c:	78c2      	ldrb	r2, [r0, #3]
 8000b6e:	0212      	lsls	r2, r2, #8
 8000b70:	7903      	ldrb	r3, [r0, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <process_command+0x31c>)
 8000b76:	8013      	strh	r3, [r2, #0]
		system_mode = PROGRAM_GAUGE_MODE;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <process_command+0x320>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(deviceTask_handle);
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <process_command+0x324>)
 8000b80:	6818      	ldr	r0, [r3, #0]
 8000b82:	f001 f871 	bl	8001c68 <vTaskSuspend>
		send_ok_msg();
 8000b86:	f7ff fe67 	bl	8000858 <send_ok_msg>
}
 8000b8a:	e6b0      	b.n	80008ee <process_command+0x46>
 8000b8c:	2000091c 	.word	0x2000091c
 8000b90:	20000064 	.word	0x20000064
 8000b94:	20000111 	.word	0x20000111
 8000b98:	20000112 	.word	0x20000112
 8000b9c:	20000094 	.word	0x20000094
 8000ba0:	003d0900 	.word	0x003d0900
 8000ba4:	20000910 	.word	0x20000910
 8000ba8:	200000b8 	.word	0x200000b8
 8000bac:	20000095 	.word	0x20000095
 8000bb0:	20000098 	.word	0x20000098
 8000bb4:	20000100 	.word	0x20000100
 8000bb8:	2000008e 	.word	0x2000008e
 8000bbc:	2000000f 	.word	0x2000000f
 8000bc0:	20000005 	.word	0x20000005
 8000bc4:	200000fe 	.word	0x200000fe
 8000bc8:	20000113 	.word	0x20000113
 8000bcc:	20000090 	.word	0x20000090

08000bd0 <process_pd_binary_fw>:
{
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	000c      	movs	r4, r1
	pd_patch_eprom(&I2C1Handle, &cmd_buf[1], frame_len - 2);
 8000bd4:	1e8a      	subs	r2, r1, #2
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	1c41      	adds	r1, r0, #1
 8000bda:	481b      	ldr	r0, [pc, #108]	; (8000c48 <process_pd_binary_fw+0x78>)
 8000bdc:	f002 fc04 	bl	80033e8 <pd_patch_eprom>
	patchSize = patchSize - (frame_len - 4);
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <process_pd_binary_fw+0x7c>)
 8000be2:	8819      	ldrh	r1, [r3, #0]
 8000be4:	1b09      	subs	r1, r1, r4
 8000be6:	3104      	adds	r1, #4
 8000be8:	b289      	uxth	r1, r1
 8000bea:	8019      	strh	r1, [r3, #0]
    if(patchSize == 0){
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <process_pd_binary_fw+0x2a>
	send_ok_msg();
 8000bf4:	f7ff fe30 	bl	8000858 <send_ok_msg>
}
 8000bf8:	bd10      	pop	{r4, pc}
    	send_ok_msg();
 8000bfa:	f7ff fe2d 	bl	8000858 <send_ok_msg>
    	uint8_t res = pd_reset(&I2C1Handle);
 8000bfe:	4812      	ldr	r0, [pc, #72]	; (8000c48 <process_pd_binary_fw+0x78>)
 8000c00:	f002 fa95 	bl	800312e <pd_reset>
 8000c04:	0004      	movs	r4, r0
    	delay(4000000);
 8000c06:	4812      	ldr	r0, [pc, #72]	; (8000c50 <process_pd_binary_fw+0x80>)
 8000c08:	f001 fd5c 	bl	80026c4 <delay>
    	if(res == 0x00){
 8000c0c:	2c00      	cmp	r4, #0
 8000c0e:	d1f1      	bne.n	8000bf4 <process_pd_binary_fw+0x24>
    		pd_restart_setup();
 8000c10:	f7ff fb22 	bl	8000258 <pd_restart_setup>
    		pd_swap_to_UFP(&I2C1Handle);
 8000c14:	4c0c      	ldr	r4, [pc, #48]	; (8000c48 <process_pd_binary_fw+0x78>)
 8000c16:	0020      	movs	r0, r4
 8000c18:	f002 fab4 	bl	8003184 <pd_swap_to_UFP>
    		plugAction = pd_get_plug_detect(&I2C1Handle);
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f002 fa8b 	bl	8003138 <pd_get_plug_detect>
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <process_pd_binary_fw+0x84>)
 8000c24:	7018      	strb	r0, [r3, #0]
    		if(plugAction == PD_PLUG_CONNECTED){
 8000c26:	2801      	cmp	r0, #1
 8000c28:	d007      	beq.n	8000c3a <process_pd_binary_fw+0x6a>
    		system_mode = APP_MODE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <process_pd_binary_fw+0x88>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
    		vTaskResume(deviceTask_handle);
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <process_pd_binary_fw+0x8c>)
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	f000 fe70 	bl	8001918 <vTaskResume>
 8000c38:	e7dc      	b.n	8000bf4 <process_pd_binary_fw+0x24>
    			power_direction = pd_get_power_direction(&I2C1Handle);
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <process_pd_binary_fw+0x78>)
 8000c3c:	f002 fa8a 	bl	8003154 <pd_get_power_direction>
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <process_pd_binary_fw+0x90>)
 8000c42:	7018      	strb	r0, [r3, #0]
 8000c44:	e7f1      	b.n	8000c2a <process_pd_binary_fw+0x5a>
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	2000091c 	.word	0x2000091c
 8000c4c:	200000fe 	.word	0x200000fe
 8000c50:	003d0900 	.word	0x003d0900
 8000c54:	20000910 	.word	0x20000910
 8000c58:	20000113 	.word	0x20000113
 8000c5c:	20000090 	.word	0x20000090
 8000c60:	20000064 	.word	0x20000064

08000c64 <process_gauge_binary_fw>:
{
 8000c64:	b510      	push	{r4, lr}
	if(cmd_buf[1] == 0x57){
 8000c66:	7843      	ldrb	r3, [r0, #1]
 8000c68:	2b57      	cmp	r3, #87	; 0x57
 8000c6a:	d00f      	beq.n	8000c8c <process_gauge_binary_fw+0x28>
	}else if(cmd_buf[1] == 0x43){
 8000c6c:	2b43      	cmp	r3, #67	; 0x43
 8000c6e:	d014      	beq.n	8000c9a <process_gauge_binary_fw+0x36>
	}else if(cmd_buf[1] == 0x58){
 8000c70:	2b58      	cmp	r3, #88	; 0x58
 8000c72:	d019      	beq.n	8000ca8 <process_gauge_binary_fw+0x44>
	patchSize = patchSize - 1;
 8000c74:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <process_gauge_binary_fw+0x84>)
 8000c76:	8813      	ldrh	r3, [r2, #0]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	8013      	strh	r3, [r2, #0]
	if(patchSize == 0){
 8000c7e:	8813      	ldrh	r3, [r2, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d01f      	beq.n	8000cc6 <process_gauge_binary_fw+0x62>
	send_ok_msg();
 8000c86:	f7ff fde7 	bl	8000858 <send_ok_msg>
}
 8000c8a:	bd10      	pop	{r4, pc}
		gauge_flash_write_binary(&I2C1Handle, &cmd_buf[1], frame_len - 4 );
 8000c8c:	3904      	subs	r1, #4
 8000c8e:	b2ca      	uxtb	r2, r1
 8000c90:	1c41      	adds	r1, r0, #1
 8000c92:	4816      	ldr	r0, [pc, #88]	; (8000cec <process_gauge_binary_fw+0x88>)
 8000c94:	f002 fd2c 	bl	80036f0 <gauge_flash_write_binary>
 8000c98:	e7ec      	b.n	8000c74 <process_gauge_binary_fw+0x10>
		gauge_flash_read_binary(&I2C1Handle, &cmd_buf[1], frame_len - 4 );
 8000c9a:	3904      	subs	r1, #4
 8000c9c:	b2ca      	uxtb	r2, r1
 8000c9e:	1c41      	adds	r1, r0, #1
 8000ca0:	4812      	ldr	r0, [pc, #72]	; (8000cec <process_gauge_binary_fw+0x88>)
 8000ca2:	f002 fd37 	bl	8003714 <gauge_flash_read_binary>
 8000ca6:	e7e5      	b.n	8000c74 <process_gauge_binary_fw+0x10>
		uint32_t wait_val = cmd_buf[2] * 100;
 8000ca8:	7882      	ldrb	r2, [r0, #2]
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	4342      	muls	r2, r0
		vTaskDelay(pdMS_TO_TICKS(wait_val));
 8000cae:	0153      	lsls	r3, r2, #5
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	0098      	lsls	r0, r3, #2
 8000cb4:	1880      	adds	r0, r0, r2
 8000cb6:	00c0      	lsls	r0, r0, #3
 8000cb8:	21fa      	movs	r1, #250	; 0xfa
 8000cba:	0089      	lsls	r1, r1, #2
 8000cbc:	f7ff fa24 	bl	8000108 <__udivsi3>
 8000cc0:	f000 ff74 	bl	8001bac <vTaskDelay>
 8000cc4:	e7d6      	b.n	8000c74 <process_gauge_binary_fw+0x10>
		send_ok_msg();
 8000cc6:	f7ff fdc7 	bl	8000858 <send_ok_msg>
		gauge_unseal(&I2C1Handle);
 8000cca:	4c08      	ldr	r4, [pc, #32]	; (8000cec <process_gauge_binary_fw+0x88>)
 8000ccc:	0020      	movs	r0, r4
 8000cce:	f002 fc79 	bl	80035c4 <gauge_unseal>
		gauge_reset(&I2C1Handle);
 8000cd2:	0020      	movs	r0, r4
 8000cd4:	f002 fcd4 	bl	8003680 <gauge_reset>
		system_mode = APP_MODE;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <process_gauge_binary_fw+0x8c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		vTaskResume(deviceTask_handle);
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <process_gauge_binary_fw+0x90>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	f000 fe19 	bl	8001918 <vTaskResume>
 8000ce6:	e7ce      	b.n	8000c86 <process_gauge_binary_fw+0x22>
 8000ce8:	200000fe 	.word	0x200000fe
 8000cec:	2000091c 	.word	0x2000091c
 8000cf0:	20000113 	.word	0x20000113
 8000cf4:	20000090 	.word	0x20000090

08000cf8 <host_comms>:
{
 8000cf8:	b530      	push	{r4, r5, lr}
 8000cfa:	b095      	sub	sp, #84	; 0x54
    while (USART_ReceiveDataIT(&usart1_handle, &rx_buf[0], rcv_len) != USART_READY );
 8000cfc:	4b51      	ldr	r3, [pc, #324]	; (8000e44 <host_comms+0x14c>)
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	4951      	ldr	r1, [pc, #324]	; (8000e48 <host_comms+0x150>)
 8000d04:	4851      	ldr	r0, [pc, #324]	; (8000e4c <host_comms+0x154>)
 8000d06:	f002 f809 	bl	8002d1c <USART_ReceiveDataIT>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d1f6      	bne.n	8000cfc <host_comms+0x4>
 8000d0e:	e079      	b.n	8000e04 <host_comms+0x10c>
					cmd_buf[i] = rx_buf[i];
 8000d10:	4a4d      	ldr	r2, [pc, #308]	; (8000e48 <host_comms+0x150>)
 8000d12:	5cd1      	ldrb	r1, [r2, r3]
 8000d14:	aa02      	add	r2, sp, #8
 8000d16:	54d1      	strb	r1, [r2, r3]
					cmd_frame_len++;
 8000d18:	3501      	adds	r5, #1
 8000d1a:	b2ed      	uxtb	r5, r5
					zeroOk = false;
 8000d1c:	2100      	movs	r1, #0
			for (uint8_t i = 0; i < rxCount; i++)
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4a4b      	ldr	r2, [pc, #300]	; (8000e50 <host_comms+0x158>)
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d91f      	bls.n	8000d6c <host_comms+0x74>
				if (i < length && (zeroOk || rx_buf[i] != 0))
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	d905      	bls.n	8000d3c <host_comms+0x44>
 8000d30:	2900      	cmp	r1, #0
 8000d32:	d1ed      	bne.n	8000d10 <host_comms+0x18>
 8000d34:	4a44      	ldr	r2, [pc, #272]	; (8000e48 <host_comms+0x150>)
 8000d36:	5cd2      	ldrb	r2, [r2, r3]
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d1e9      	bne.n	8000d10 <host_comms+0x18>
				else if (i == length && rx_buf[i] == 0)
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	d003      	beq.n	8000d48 <host_comms+0x50>
				else if (i == length && rx_buf[i] != 0)
 8000d40:	429c      	cmp	r4, r3
 8000d42:	d007      	beq.n	8000d54 <host_comms+0x5c>
					processMsg = false;
 8000d44:	2000      	movs	r0, #0
 8000d46:	e7ea      	b.n	8000d1e <host_comms+0x26>
				else if (i == length && rx_buf[i] == 0)
 8000d48:	4a3f      	ldr	r2, [pc, #252]	; (8000e48 <host_comms+0x150>)
 8000d4a:	5cd2      	ldrb	r2, [r2, r3]
 8000d4c:	2a00      	cmp	r2, #0
 8000d4e:	d1f7      	bne.n	8000d40 <host_comms+0x48>
					processMsg = true;
 8000d50:	2001      	movs	r0, #1
 8000d52:	e7e4      	b.n	8000d1e <host_comms+0x26>
				else if (i == length && rx_buf[i] != 0)
 8000d54:	4a3c      	ldr	r2, [pc, #240]	; (8000e48 <host_comms+0x150>)
 8000d56:	5cd2      	ldrb	r2, [r2, r3]
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	d005      	beq.n	8000d68 <host_comms+0x70>
					length += rx_buf[i];
 8000d5c:	1914      	adds	r4, r2, r4
 8000d5e:	b2e4      	uxtb	r4, r4
					cmd_frame_len++;
 8000d60:	3501      	adds	r5, #1
 8000d62:	b2ed      	uxtb	r5, r5
					zeroOk = true;
 8000d64:	2101      	movs	r1, #1
					cmd_frame_len++;
 8000d66:	e7da      	b.n	8000d1e <host_comms+0x26>
					processMsg = false;
 8000d68:	2000      	movs	r0, #0
 8000d6a:	e7d8      	b.n	8000d1e <host_comms+0x26>
			if (processMsg)
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d109      	bne.n	8000d84 <host_comms+0x8c>
			memset(rx_buf, -1, MSG_SIZE);
 8000d70:	2101      	movs	r1, #1
 8000d72:	2246      	movs	r2, #70	; 0x46
 8000d74:	4249      	negs	r1, r1
 8000d76:	4834      	ldr	r0, [pc, #208]	; (8000e48 <host_comms+0x150>)
 8000d78:	f003 f8b5 	bl	8003ee6 <memset>
			rxCount = 0;
 8000d7c:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <host_comms+0x158>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
		{
 8000d82:	e037      	b.n	8000df4 <host_comms+0xfc>
				__vo uint8_t len_byte = cmd_frame_len - 2;
 8000d84:	1eaa      	subs	r2, r5, #2
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	466b      	mov	r3, sp
 8000d8a:	715a      	strb	r2, [r3, #5]
				__vo uint8_t checksum_byte = cmd_buf[len_byte + 1];
 8000d8c:	795a      	ldrb	r2, [r3, #5]
 8000d8e:	3201      	adds	r2, #1
 8000d90:	a902      	add	r1, sp, #8
 8000d92:	5c8a      	ldrb	r2, [r1, r2]
 8000d94:	1d9c      	adds	r4, r3, #6
 8000d96:	719a      	strb	r2, [r3, #6]
				__vo uint8_t checksum_cal = calculateXorChecksum(&cmd_buf[1], len_byte);
 8000d98:	7959      	ldrb	r1, [r3, #5]
 8000d9a:	b2c9      	uxtb	r1, r1
 8000d9c:	2009      	movs	r0, #9
 8000d9e:	4468      	add	r0, sp
 8000da0:	f001 fca3 	bl	80026ea <calculateXorChecksum>
 8000da4:	466b      	mov	r3, sp
 8000da6:	71d8      	strb	r0, [r3, #7]
 8000da8:	3307      	adds	r3, #7
				if(checksum_byte == checksum_cal){
 8000daa:	7822      	ldrb	r2, [r4, #0]
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d1dc      	bne.n	8000d70 <host_comms+0x78>
					if(system_mode == APP_MODE){
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <host_comms+0x15c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00c      	beq.n	8000dd8 <host_comms+0xe0>
					}else if(system_mode == PROGRAM_PD_MODE){
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <host_comms+0x15c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d00d      	beq.n	8000de2 <host_comms+0xea>
					}else if(system_mode == PROGRAM_GAUGE_MODE){
 8000dc6:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <host_comms+0x15c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d1d0      	bne.n	8000d70 <host_comms+0x78>
						process_gauge_binary_fw(cmd_buf, cmd_frame_len);
 8000dce:	0029      	movs	r1, r5
 8000dd0:	a802      	add	r0, sp, #8
 8000dd2:	f7ff ff47 	bl	8000c64 <process_gauge_binary_fw>
 8000dd6:	e7cb      	b.n	8000d70 <host_comms+0x78>
						process_command(cmd_buf, cmd_frame_len);
 8000dd8:	0029      	movs	r1, r5
 8000dda:	a802      	add	r0, sp, #8
 8000ddc:	f7ff fd64 	bl	80008a8 <process_command>
 8000de0:	e7c6      	b.n	8000d70 <host_comms+0x78>
						process_pd_binary_fw(cmd_buf, cmd_frame_len);
 8000de2:	0029      	movs	r1, r5
 8000de4:	a802      	add	r0, sp, #8
 8000de6:	f7ff fef3 	bl	8000bd0 <process_pd_binary_fw>
 8000dea:	e7c1      	b.n	8000d70 <host_comms+0x78>
		else if (rxCount != 0)
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <host_comms+0x158>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d11d      	bne.n	8000e30 <host_comms+0x138>
		IWDG_Refresh(&hiwdg);
 8000df4:	4818      	ldr	r0, [pc, #96]	; (8000e58 <host_comms+0x160>)
 8000df6:	f002 ffb7 	bl	8003d68 <IWDG_Refresh>
		vTaskDelay(pdMS_TO_TICKS(40));
 8000dfa:	2028      	movs	r0, #40	; 0x28
 8000dfc:	f000 fed6 	bl	8001bac <vTaskDelay>
		taskYIELD();
 8000e00:	f001 faba 	bl	8002378 <vPortYield>
		if (rx_buf[0] != 0x00 && rx_buf[rxCount-1] == 0x00)
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <host_comms+0x150>)
 8000e06:	781c      	ldrb	r4, [r3, #0]
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	d0ef      	beq.n	8000dec <host_comms+0xf4>
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <host_comms+0x158>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <host_comms+0x150>)
 8000e14:	5cd5      	ldrb	r5, [r2, r3]
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d1e8      	bne.n	8000dec <host_comms+0xf4>
			uint8_t cmd_buf[MSG_SIZE] = {0};
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	2242      	movs	r2, #66	; 0x42
 8000e20:	2100      	movs	r1, #0
 8000e22:	a803      	add	r0, sp, #12
 8000e24:	f003 f85f 	bl	8003ee6 <memset>
			for (uint8_t i = 0; i < rxCount; i++)
 8000e28:	002b      	movs	r3, r5
			bool processMsg = false;
 8000e2a:	2000      	movs	r0, #0
			bool zeroOk = false;
 8000e2c:	2100      	movs	r1, #0
			for (uint8_t i = 0; i < rxCount; i++)
 8000e2e:	e778      	b.n	8000d22 <host_comms+0x2a>
			memset(rx_buf, -1, MSG_SIZE);
 8000e30:	2101      	movs	r1, #1
 8000e32:	2246      	movs	r2, #70	; 0x46
 8000e34:	4249      	negs	r1, r1
 8000e36:	4804      	ldr	r0, [pc, #16]	; (8000e48 <host_comms+0x150>)
 8000e38:	f003 f855 	bl	8003ee6 <memset>
			rxCount = 0;
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <host_comms+0x158>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
 8000e42:	e7d7      	b.n	8000df4 <host_comms+0xfc>
 8000e44:	20000010 	.word	0x20000010
 8000e48:	20000014 	.word	0x20000014
 8000e4c:	2000096c 	.word	0x2000096c
 8000e50:	20000110 	.word	0x20000110
 8000e54:	20000113 	.word	0x20000113
 8000e58:	2000093c 	.word	0x2000093c

08000e5c <EXTI4_15_IRQHandler>:
	}
}

void EXTI4_15_IRQHandler(void)
{
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	b082      	sub	sp, #8
	GPIO_IRQHandling(KNOCK_INTERRUPT);
 8000e60:	2005      	movs	r0, #5
 8000e62:	f001 fe19 	bl	8002a98 <GPIO_IRQHandling>
    uint8_t pd_val, knock_val;
    pd_val = GPIO_ReadFromInputPin(GPIOA, PD_INTERRUPT);
 8000e66:	2590      	movs	r5, #144	; 0x90
 8000e68:	05ed      	lsls	r5, r5, #23
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	0028      	movs	r0, r5
 8000e6e:	f001 fde3 	bl	8002a38 <GPIO_ReadFromInputPin>
 8000e72:	0004      	movs	r4, r0
    knock_val = GPIO_ReadFromInputPin(GPIOA, KNOCK_INTERRUPT);
 8000e74:	2105      	movs	r1, #5
 8000e76:	0028      	movs	r0, r5
 8000e78:	f001 fdde 	bl	8002a38 <GPIO_ReadFromInputPin>
    delay(100000);
 8000e7c:	482b      	ldr	r0, [pc, #172]	; (8000f2c <EXTI4_15_IRQHandler+0xd0>)
 8000e7e:	f001 fc21 	bl	80026c4 <delay>
    if(pd_val == 0)
 8000e82:	2c00      	cmp	r4, #0
 8000e84:	d11a      	bne.n	8000ebc <EXTI4_15_IRQHandler+0x60>
    {
    	GPIO_IRQHandling(PD_INTERRUPT);
 8000e86:	2004      	movs	r0, #4
 8000e88:	f001 fe06 	bl	8002a98 <GPIO_IRQHandling>
    	if(system_mode == APP_MODE){
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <EXTI4_15_IRQHandler+0xd4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d139      	bne.n	8000f08 <EXTI4_15_IRQHandler+0xac>
    		deviceUpdateLED = true;
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <EXTI4_15_IRQHandler+0xd8>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
    		chargeOKCycleCount = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <EXTI4_15_IRQHandler+0xdc>)
 8000e9e:	7013      	strb	r3, [r2, #0]
    		sourceCountDone = false;
 8000ea0:	4a26      	ldr	r2, [pc, #152]	; (8000f3c <EXTI4_15_IRQHandler+0xe0>)
 8000ea2:	7013      	strb	r3, [r2, #0]
    		knocked = false;
 8000ea4:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <EXTI4_15_IRQHandler+0xe4>)
 8000ea6:	7013      	strb	r3, [r2, #0]
    		sourceLEDCount = 0;
 8000ea8:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <EXTI4_15_IRQHandler+0xe8>)
 8000eaa:	7013      	strb	r3, [r2, #0]
    		ledLowCount = 0;
 8000eac:	4a26      	ldr	r2, [pc, #152]	; (8000f48 <EXTI4_15_IRQHandler+0xec>)
 8000eae:	7013      	strb	r3, [r2, #0]
    		lowBatteryUserNotified = false;
 8000eb0:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <EXTI4_15_IRQHandler+0xf0>)
 8000eb2:	7013      	strb	r3, [r2, #0]
    		pd_IRQHandling(&I2C1Handle);
 8000eb4:	4826      	ldr	r0, [pc, #152]	; (8000f50 <EXTI4_15_IRQHandler+0xf4>)
 8000eb6:	f002 fa5d 	bl	8003374 <pd_IRQHandling>
 8000eba:	e025      	b.n	8000f08 <EXTI4_15_IRQHandler+0xac>
    	}
    }
    else{
    	GPIO_IRQHandling(KNOCK_INTERRUPT);
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f001 fdeb 	bl	8002a98 <GPIO_IRQHandling>
    	GPIO_IRQHandling(PD_INTERRUPT);
 8000ec2:	2004      	movs	r0, #4
 8000ec4:	f001 fde8 	bl	8002a98 <GPIO_IRQHandling>
    	knocked = true;
 8000ec8:	4d1d      	ldr	r5, [pc, #116]	; (8000f40 <EXTI4_15_IRQHandler+0xe4>)
 8000eca:	2301      	movs	r3, #1
 8000ecc:	702b      	strb	r3, [r5, #0]
    	knockActiveCount = 0;
 8000ece:	2400      	movs	r4, #0
 8000ed0:	4a20      	ldr	r2, [pc, #128]	; (8000f54 <EXTI4_15_IRQHandler+0xf8>)
 8000ed2:	7014      	strb	r4, [r2, #0]
    	deviceUpdateLED = true;
 8000ed4:	4a17      	ldr	r2, [pc, #92]	; (8000f34 <EXTI4_15_IRQHandler+0xd8>)
 8000ed6:	7013      	strb	r3, [r2, #0]
		get_bat_SOC(&I2C1Handle, &pbatReport);
 8000ed8:	4e1f      	ldr	r6, [pc, #124]	; (8000f58 <EXTI4_15_IRQHandler+0xfc>)
 8000eda:	0031      	movs	r1, r6
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <EXTI4_15_IRQHandler+0xf4>)
 8000ede:	f002 fac1 	bl	8003464 <get_bat_SOC>
		bat_soc = pbatReport.SOC;
 8000ee2:	7832      	ldrb	r2, [r6, #0]
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <EXTI4_15_IRQHandler+0x100>)
 8000ee6:	701a      	strb	r2, [r3, #0]
    	led_logic_handler(bat_soc, plugAction, power_direction, knocked, &leds_to_control);
 8000ee8:	7818      	ldrb	r0, [r3, #0]
 8000eea:	b2c0      	uxtb	r0, r0
 8000eec:	782b      	ldrb	r3, [r5, #0]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <EXTI4_15_IRQHandler+0x104>)
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	491b      	ldr	r1, [pc, #108]	; (8000f64 <EXTI4_15_IRQHandler+0x108>)
 8000ef6:	7809      	ldrb	r1, [r1, #0]
 8000ef8:	4d1b      	ldr	r5, [pc, #108]	; (8000f68 <EXTI4_15_IRQHandler+0x10c>)
 8000efa:	9500      	str	r5, [sp, #0]
 8000efc:	f002 fcea 	bl	80038d4 <led_logic_handler>
		sourceCountDone = false;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <EXTI4_15_IRQHandler+0xe0>)
 8000f02:	701c      	strb	r4, [r3, #0]
		sourceLEDCount = 0;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <EXTI4_15_IRQHandler+0xe8>)
 8000f06:	701c      	strb	r4, [r3, #0]
    }

    if(system_mode == PROGRAM_PD_MODE || system_mode == PROGRAM_GAUGE_MODE)
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <EXTI4_15_IRQHandler+0xd4>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <EXTI4_15_IRQHandler+0xc0>
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <EXTI4_15_IRQHandler+0xd4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d001      	beq.n	8000f1c <EXTI4_15_IRQHandler+0xc0>
    {
    	GPIO_IRQHandling(PD_INTERRUPT);
    	GPIO_IRQHandling(KNOCK_INTERRUPT);
    }
}
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
    	GPIO_IRQHandling(PD_INTERRUPT);
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f001 fdbb 	bl	8002a98 <GPIO_IRQHandling>
    	GPIO_IRQHandling(KNOCK_INTERRUPT);
 8000f22:	2005      	movs	r0, #5
 8000f24:	f001 fdb8 	bl	8002a98 <GPIO_IRQHandling>
}
 8000f28:	e7f6      	b.n	8000f18 <EXTI4_15_IRQHandler+0xbc>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	000186a0 	.word	0x000186a0
 8000f30:	20000113 	.word	0x20000113
 8000f34:	20000094 	.word	0x20000094
 8000f38:	20000085 	.word	0x20000085
 8000f3c:	20000111 	.word	0x20000111
 8000f40:	200000b1 	.word	0x200000b1
 8000f44:	20000112 	.word	0x20000112
 8000f48:	200000b2 	.word	0x200000b2
 8000f4c:	200000b7 	.word	0x200000b7
 8000f50:	2000091c 	.word	0x2000091c
 8000f54:	200000b0 	.word	0x200000b0
 8000f58:	20000100 	.word	0x20000100
 8000f5c:	20000084 	.word	0x20000084
 8000f60:	20000064 	.word	0x20000064
 8000f64:	20000910 	.word	0x20000910
 8000f68:	200000b4 	.word	0x200000b4

08000f6c <I2C1_IRQHandler>:

void I2C1_IRQHandler(void)
{
 8000f6c:	b510      	push	{r4, lr}
	I2C_EV_IRQHandling(&I2C1Handle);
 8000f6e:	4802      	ldr	r0, [pc, #8]	; (8000f78 <I2C1_IRQHandler+0xc>)
 8000f70:	f001 fe6b 	bl	8002c4a <I2C_EV_IRQHandling>
}
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	2000091c 	.word	0x2000091c

08000f7c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000f7c:	b510      	push	{r4, lr}
	USART_IRQHandling(&usart1_handle);
 8000f7e:	4802      	ldr	r0, [pc, #8]	; (8000f88 <USART1_IRQHandler+0xc>)
 8000f80:	f001 fedb 	bl	8002d3a <USART_IRQHandling>
}
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	2000096c 	.word	0x2000096c

08000f8c <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000f8c:	b510      	push	{r4, lr}
   if(ApEv == USART_EVENT_RX_CMPLT)
 8000f8e:	2901      	cmp	r1, #1
 8000f90:	d000      	beq.n	8000f94 <USART_ApplicationEventCallback+0x8>

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {

   }
}
 8000f92:	bd10      	pop	{r4, pc}
       rx_buf[rxCount++] = (uint8_t)(pUSARTHandle->pUSARTx->RDR & (uint8_t)0xFF);
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <USART_ApplicationEventCallback+0x44>)
 8000f9a:	7813      	ldrb	r3, [r2, #0]
 8000f9c:	b2d9      	uxtb	r1, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	7013      	strb	r3, [r2, #0]
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <USART_ApplicationEventCallback+0x48>)
 8000fa6:	5458      	strb	r0, [r3, r1]
       if (rxCount >= MSG_SIZE)
 8000fa8:	7813      	ldrb	r3, [r2, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b45      	cmp	r3, #69	; 0x45
 8000fae:	d902      	bls.n	8000fb6 <USART_ApplicationEventCallback+0x2a>
    	   rxCount = 0;
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
       while (USART_ReceiveDataIT(&usart1_handle, &rx_buf[rxCount], rcv_len) != USART_READY );
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <USART_ApplicationEventCallback+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <USART_ApplicationEventCallback+0x4c>)
 8000fbc:	7812      	ldrb	r2, [r2, #0]
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <USART_ApplicationEventCallback+0x48>)
 8000fc2:	18c9      	adds	r1, r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <USART_ApplicationEventCallback+0x50>)
 8000fc6:	f001 fea9 	bl	8002d1c <USART_ReceiveDataIT>
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d1f3      	bne.n	8000fb6 <USART_ApplicationEventCallback+0x2a>
 8000fce:	e7e0      	b.n	8000f92 <USART_ApplicationEventCallback+0x6>
 8000fd0:	20000110 	.word	0x20000110
 8000fd4:	20000014 	.word	0x20000014
 8000fd8:	20000010 	.word	0x20000010
 8000fdc:	2000096c 	.word	0x2000096c

08000fe0 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler: ldr   r0, =_estack
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fe2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe4:	e000      	b.n	8000fe8 <Reset_Handler+0x8>
 8000fe6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	; (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	; (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	; (800102c <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100e:	f002 ff3d 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001012:	f7ff fbe1 	bl	80007d8 <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
Reset_Handler: ldr   r0, =_estack
 8001018:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001024:	08003f8c 	.word	0x08003f8c
  ldr r2, =_sbss
 8001028:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800102c:	2000098c 	.word	0x2000098c

08001030 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>

08001032 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001032:	0003      	movs	r3, r0
 8001034:	3308      	adds	r3, #8
 8001036:	6043      	str	r3, [r0, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001038:	2201      	movs	r2, #1
 800103a:	4252      	negs	r2, r2
 800103c:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800103e:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001040:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001042:	2300      	movs	r3, #0
 8001044:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001046:	4770      	bx	lr

08001048 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001048:	2300      	movs	r3, #0
 800104a:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800104c:	4770      	bx	lr

0800104e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
 800104e:	6843      	ldr	r3, [r0, #4]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001050:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001056:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001058:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800105a:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 800105c:	6803      	ldr	r3, [r0, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	6003      	str	r3, [r0, #0]
}
 8001062:	4770      	bx	lr

08001064 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001064:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001066:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001068:	1c63      	adds	r3, r4, #1
 800106a:	d010      	beq.n	800108e <vListInsert+0x2a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800106c:	0003      	movs	r3, r0
 800106e:	3308      	adds	r3, #8
 8001070:	001a      	movs	r2, r3
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	681d      	ldr	r5, [r3, #0]
 8001076:	42a5      	cmp	r5, r4
 8001078:	d9fa      	bls.n	8001070 <vListInsert+0xc>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800107a:	6853      	ldr	r3, [r2, #4]
 800107c:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800107e:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001080:	608a      	str	r2, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8001082:	6051      	str	r1, [r2, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001084:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 8001086:	6803      	ldr	r3, [r0, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	6003      	str	r3, [r0, #0]
}
 800108c:	bd30      	pop	{r4, r5, pc}
        pxIterator = pxList->xListEnd.pxPrevious;
 800108e:	6902      	ldr	r2, [r0, #16]
 8001090:	e7f3      	b.n	800107a <vListInsert+0x16>

08001092 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001092:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001094:	6841      	ldr	r1, [r0, #4]
 8001096:	6882      	ldr	r2, [r0, #8]
 8001098:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800109a:	6841      	ldr	r1, [r0, #4]
 800109c:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	4282      	cmp	r2, r0
 80010a2:	d006      	beq.n	80010b2 <uxListRemove+0x20>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80010a4:	2200      	movs	r2, #0
 80010a6:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	3a01      	subs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80010ae:	6818      	ldr	r0, [r3, #0]
}
 80010b0:	4770      	bx	lr
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80010b2:	6882      	ldr	r2, [r0, #8]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	e7f5      	b.n	80010a4 <uxListRemove+0x12>

080010b8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010b8:	b510      	push	{r4, lr}
 80010ba:	0004      	movs	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010bc:	f001 f968 	bl	8002390 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80010c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d004      	beq.n	80010d2 <prvIsQueueFull+0x1a>
        {
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
 80010c8:	2400      	movs	r4, #0
        }
    }
    taskEXIT_CRITICAL();
 80010ca:	f001 f96d 	bl	80023a8 <vPortExitCritical>

    return xReturn;
}
 80010ce:	0020      	movs	r0, r4
 80010d0:	bd10      	pop	{r4, pc}
            xReturn = pdTRUE;
 80010d2:	2401      	movs	r4, #1
 80010d4:	e7f9      	b.n	80010ca <prvIsQueueFull+0x12>

080010d6 <prvIsQueueEmpty>:
{
 80010d6:	b510      	push	{r4, lr}
 80010d8:	0004      	movs	r4, r0
    taskENTER_CRITICAL();
 80010da:	f001 f959 	bl	8002390 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d104      	bne.n	80010ee <prvIsQueueEmpty+0x18>
            xReturn = pdTRUE;
 80010e4:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
 80010e6:	f001 f95f 	bl	80023a8 <vPortExitCritical>
}
 80010ea:	0020      	movs	r0, r4
 80010ec:	bd10      	pop	{r4, pc}
            xReturn = pdFALSE;
 80010ee:	2400      	movs	r4, #0
 80010f0:	e7f9      	b.n	80010e6 <prvIsQueueEmpty+0x10>

080010f2 <prvCopyDataToQueue>:
{
 80010f2:	b570      	push	{r4, r5, r6, lr}
 80010f4:	0004      	movs	r4, r0
 80010f6:	0015      	movs	r5, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010f8:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80010fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d10c      	bne.n	800111a <prvCopyDataToQueue+0x28>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <prvCopyDataToQueue+0x1c>
    BaseType_t xReturn = pdFALSE;
 8001106:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001108:	3601      	adds	r6, #1
 800110a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800110c:	bd70      	pop	{r4, r5, r6, pc}
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800110e:	6880      	ldr	r0, [r0, #8]
 8001110:	f000 fece 	bl	8001eb0 <xTaskPriorityDisinherit>
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001114:	2300      	movs	r3, #0
 8001116:	60a3      	str	r3, [r4, #8]
 8001118:	e7f6      	b.n	8001108 <prvCopyDataToQueue+0x16>
    else if( xPosition == queueSEND_TO_BACK )
 800111a:	2d00      	cmp	r5, #0
 800111c:	d10e      	bne.n	800113c <prvCopyDataToQueue+0x4a>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800111e:	6840      	ldr	r0, [r0, #4]
 8001120:	f002 fed8 	bl	8003ed4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001128:	4694      	mov	ip, r2
 800112a:	4463      	add	r3, ip
 800112c:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800112e:	68a2      	ldr	r2, [r4, #8]
 8001130:	4293      	cmp	r3, r2
 8001132:	d31b      	bcc.n	800116c <prvCopyDataToQueue+0x7a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8001138:	0028      	movs	r0, r5
 800113a:	e7e5      	b.n	8001108 <prvCopyDataToQueue+0x16>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800113c:	68c0      	ldr	r0, [r0, #12]
 800113e:	f002 fec9 	bl	8003ed4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001144:	425a      	negs	r2, r3
 8001146:	68e1      	ldr	r1, [r4, #12]
 8001148:	1acb      	subs	r3, r1, r3
 800114a:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800114c:	6821      	ldr	r1, [r4, #0]
 800114e:	428b      	cmp	r3, r1
 8001150:	d203      	bcs.n	800115a <prvCopyDataToQueue+0x68>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001152:	68a3      	ldr	r3, [r4, #8]
 8001154:	469c      	mov	ip, r3
 8001156:	4462      	add	r2, ip
 8001158:	60e2      	str	r2, [r4, #12]
        if( xPosition == queueOVERWRITE )
 800115a:	2d02      	cmp	r5, #2
 800115c:	d001      	beq.n	8001162 <prvCopyDataToQueue+0x70>
    BaseType_t xReturn = pdFALSE;
 800115e:	2000      	movs	r0, #0
 8001160:	e7d2      	b.n	8001108 <prvCopyDataToQueue+0x16>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001162:	2e00      	cmp	r6, #0
 8001164:	d004      	beq.n	8001170 <prvCopyDataToQueue+0x7e>
                --uxMessagesWaiting;
 8001166:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 8001168:	2000      	movs	r0, #0
 800116a:	e7cd      	b.n	8001108 <prvCopyDataToQueue+0x16>
 800116c:	0028      	movs	r0, r5
 800116e:	e7cb      	b.n	8001108 <prvCopyDataToQueue+0x16>
 8001170:	2000      	movs	r0, #0
 8001172:	e7c9      	b.n	8001108 <prvCopyDataToQueue+0x16>

08001174 <prvCopyDataFromQueue>:
{
 8001174:	b510      	push	{r4, lr}
 8001176:	0003      	movs	r3, r0
 8001178:	0008      	movs	r0, r1
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800117a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800117c:	2a00      	cmp	r2, #0
 800117e:	d00a      	beq.n	8001196 <prvCopyDataFromQueue+0x22>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001180:	68d9      	ldr	r1, [r3, #12]
 8001182:	1889      	adds	r1, r1, r2
 8001184:	60d9      	str	r1, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001186:	689c      	ldr	r4, [r3, #8]
 8001188:	42a1      	cmp	r1, r4
 800118a:	d301      	bcc.n	8001190 <prvCopyDataFromQueue+0x1c>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800118c:	6819      	ldr	r1, [r3, #0]
 800118e:	60d9      	str	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001190:	68d9      	ldr	r1, [r3, #12]
 8001192:	f002 fe9f 	bl	8003ed4 <memcpy>
}
 8001196:	bd10      	pop	{r4, pc}

08001198 <prvUnlockQueue>:
{
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	0005      	movs	r5, r0
    taskENTER_CRITICAL();
 800119c:	f001 f8f8 	bl	8002390 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 80011a0:	2345      	movs	r3, #69	; 0x45
 80011a2:	5cec      	ldrb	r4, [r5, r3]
 80011a4:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80011a6:	e001      	b.n	80011ac <prvUnlockQueue+0x14>
            --cTxLock;
 80011a8:	3c01      	subs	r4, #1
 80011aa:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80011ac:	2c00      	cmp	r4, #0
 80011ae:	dd0b      	ble.n	80011c8 <prvUnlockQueue+0x30>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d008      	beq.n	80011c8 <prvUnlockQueue+0x30>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011b6:	0028      	movs	r0, r5
 80011b8:	3024      	adds	r0, #36	; 0x24
 80011ba:	f000 fddd 	bl	8001d78 <xTaskRemoveFromEventList>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d0f2      	beq.n	80011a8 <prvUnlockQueue+0x10>
                            vTaskMissedYield();
 80011c2:	f000 fe5d 	bl	8001e80 <vTaskMissedYield>
 80011c6:	e7ef      	b.n	80011a8 <prvUnlockQueue+0x10>
        pxQueue->cTxLock = queueUNLOCKED;
 80011c8:	2345      	movs	r3, #69	; 0x45
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	54ea      	strb	r2, [r5, r3]
    taskEXIT_CRITICAL();
 80011ce:	f001 f8eb 	bl	80023a8 <vPortExitCritical>
    taskENTER_CRITICAL();
 80011d2:	f001 f8dd 	bl	8002390 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 80011d6:	2344      	movs	r3, #68	; 0x44
 80011d8:	5cec      	ldrb	r4, [r5, r3]
 80011da:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80011dc:	e001      	b.n	80011e2 <prvUnlockQueue+0x4a>
                --cRxLock;
 80011de:	3c01      	subs	r4, #1
 80011e0:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80011e2:	2c00      	cmp	r4, #0
 80011e4:	dd0b      	ble.n	80011fe <prvUnlockQueue+0x66>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011e6:	692b      	ldr	r3, [r5, #16]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <prvUnlockQueue+0x66>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011ec:	0028      	movs	r0, r5
 80011ee:	3010      	adds	r0, #16
 80011f0:	f000 fdc2 	bl	8001d78 <xTaskRemoveFromEventList>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d0f2      	beq.n	80011de <prvUnlockQueue+0x46>
                    vTaskMissedYield();
 80011f8:	f000 fe42 	bl	8001e80 <vTaskMissedYield>
 80011fc:	e7ef      	b.n	80011de <prvUnlockQueue+0x46>
        pxQueue->cRxLock = queueUNLOCKED;
 80011fe:	2344      	movs	r3, #68	; 0x44
 8001200:	22ff      	movs	r2, #255	; 0xff
 8001202:	54ea      	strb	r2, [r5, r3]
    taskEXIT_CRITICAL();
 8001204:	f001 f8d0 	bl	80023a8 <vPortExitCritical>
}
 8001208:	bd70      	pop	{r4, r5, r6, pc}

0800120a <xQueueGenericReset>:
{
 800120a:	b570      	push	{r4, r5, r6, lr}
 800120c:	0004      	movs	r4, r0
 800120e:	000d      	movs	r5, r1
    configASSERT( pxQueue );
 8001210:	2800      	cmp	r0, #0
 8001212:	d01d      	beq.n	8001250 <xQueueGenericReset+0x46>
    taskENTER_CRITICAL();
 8001214:	f001 f8bc 	bl	8002390 <vPortEnterCritical>
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001218:	6822      	ldr	r2, [r4, #0]
 800121a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800121c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800121e:	0001      	movs	r1, r0
 8001220:	4359      	muls	r1, r3
 8001222:	1851      	adds	r1, r2, r1
 8001224:	60a1      	str	r1, [r4, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001226:	2100      	movs	r1, #0
 8001228:	63a1      	str	r1, [r4, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800122a:	6062      	str	r2, [r4, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800122c:	3b01      	subs	r3, #1
 800122e:	4343      	muls	r3, r0
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	60e3      	str	r3, [r4, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	2244      	movs	r2, #68	; 0x44
 8001238:	54a3      	strb	r3, [r4, r2]
        pxQueue->cTxLock = queueUNLOCKED;
 800123a:	3201      	adds	r2, #1
 800123c:	54a3      	strb	r3, [r4, r2]
        if( xNewQueue == pdFALSE )
 800123e:	2d00      	cmp	r5, #0
 8001240:	d10d      	bne.n	800125e <xQueueGenericReset+0x54>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001242:	6923      	ldr	r3, [r4, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d105      	bne.n	8001254 <xQueueGenericReset+0x4a>
    taskEXIT_CRITICAL();
 8001248:	f001 f8ae 	bl	80023a8 <vPortExitCritical>
}
 800124c:	2001      	movs	r0, #1
 800124e:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( pxQueue );
 8001250:	b672      	cpsid	i
 8001252:	e7fe      	b.n	8001252 <xQueueGenericReset+0x48>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001254:	0020      	movs	r0, r4
 8001256:	3010      	adds	r0, #16
 8001258:	f000 fd8e 	bl	8001d78 <xTaskRemoveFromEventList>
 800125c:	e7f4      	b.n	8001248 <xQueueGenericReset+0x3e>
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800125e:	0020      	movs	r0, r4
 8001260:	3010      	adds	r0, #16
 8001262:	f7ff fee6 	bl	8001032 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001266:	0020      	movs	r0, r4
 8001268:	3024      	adds	r0, #36	; 0x24
 800126a:	f7ff fee2 	bl	8001032 <vListInitialise>
 800126e:	e7eb      	b.n	8001248 <xQueueGenericReset+0x3e>

08001270 <prvInitialiseNewQueue>:
{
 8001270:	b570      	push	{r4, r5, r6, lr}
 8001272:	001d      	movs	r5, r3
 8001274:	9c04      	ldr	r4, [sp, #16]
    if( uxItemSize == ( UBaseType_t ) 0 )
 8001276:	2900      	cmp	r1, #0
 8001278:	d109      	bne.n	800128e <prvInitialiseNewQueue+0x1e>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800127a:	6024      	str	r4, [r4, #0]
    pxNewQueue->uxLength = uxQueueLength;
 800127c:	63e0      	str	r0, [r4, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800127e:	6421      	str	r1, [r4, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001280:	2101      	movs	r1, #1
 8001282:	0020      	movs	r0, r4
 8001284:	f7ff ffc1 	bl	800120a <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 8001288:	234c      	movs	r3, #76	; 0x4c
 800128a:	54e5      	strb	r5, [r4, r3]
}
 800128c:	bd70      	pop	{r4, r5, r6, pc}
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800128e:	6022      	str	r2, [r4, #0]
 8001290:	e7f4      	b.n	800127c <prvInitialiseNewQueue+0xc>

08001292 <xQueueGenericCreate>:
    {
 8001292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001294:	b083      	sub	sp, #12
 8001296:	0004      	movs	r4, r0
 8001298:	000d      	movs	r5, r1
 800129a:	0016      	movs	r6, r2
        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800129c:	2800      	cmp	r0, #0
 800129e:	d101      	bne.n	80012a4 <xQueueGenericCreate+0x12>
 80012a0:	b672      	cpsid	i
 80012a2:	e7fe      	b.n	80012a2 <xQueueGenericCreate+0x10>
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012a4:	000f      	movs	r7, r1
 80012a6:	4347      	muls	r7, r0
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80012a8:	2900      	cmp	r1, #0
 80012aa:	d006      	beq.n	80012ba <xQueueGenericCreate+0x28>
 80012ac:	0038      	movs	r0, r7
 80012ae:	f7fe ff2b 	bl	8000108 <__udivsi3>
 80012b2:	42a0      	cmp	r0, r4
 80012b4:	d001      	beq.n	80012ba <xQueueGenericCreate+0x28>
 80012b6:	b672      	cpsid	i
 80012b8:	e7fe      	b.n	80012b8 <xQueueGenericCreate+0x26>
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80012ba:	003b      	movs	r3, r7
 80012bc:	3351      	adds	r3, #81	; 0x51
 80012be:	d901      	bls.n	80012c4 <xQueueGenericCreate+0x32>
 80012c0:	b672      	cpsid	i
 80012c2:	e7fe      	b.n	80012c2 <xQueueGenericCreate+0x30>
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80012c4:	0038      	movs	r0, r7
 80012c6:	3050      	adds	r0, #80	; 0x50
 80012c8:	f001 f952 	bl	8002570 <pvPortMalloc>
 80012cc:	1e07      	subs	r7, r0, #0
        if( pxNewQueue != NULL )
 80012ce:	d007      	beq.n	80012e0 <xQueueGenericCreate+0x4e>
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80012d0:	0002      	movs	r2, r0
 80012d2:	3250      	adds	r2, #80	; 0x50
            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80012d4:	9000      	str	r0, [sp, #0]
 80012d6:	0033      	movs	r3, r6
 80012d8:	0029      	movs	r1, r5
 80012da:	0020      	movs	r0, r4
 80012dc:	f7ff ffc8 	bl	8001270 <prvInitialiseNewQueue>
    }
 80012e0:	0038      	movs	r0, r7
 80012e2:	b003      	add	sp, #12
 80012e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012e6 <xQueueGenericSend>:
{
 80012e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e8:	b085      	sub	sp, #20
 80012ea:	0004      	movs	r4, r0
 80012ec:	000f      	movs	r7, r1
 80012ee:	9201      	str	r2, [sp, #4]
 80012f0:	001d      	movs	r5, r3
    configASSERT( pxQueue );
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d008      	beq.n	8001308 <xQueueGenericSend+0x22>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d008      	beq.n	800130c <xQueueGenericSend+0x26>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80012fa:	2d02      	cmp	r5, #2
 80012fc:	d10b      	bne.n	8001316 <xQueueGenericSend+0x30>
 80012fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001300:	2b01      	cmp	r3, #1
 8001302:	d008      	beq.n	8001316 <xQueueGenericSend+0x30>
 8001304:	b672      	cpsid	i
 8001306:	e7fe      	b.n	8001306 <xQueueGenericSend+0x20>
    configASSERT( pxQueue );
 8001308:	b672      	cpsid	i
 800130a:	e7fe      	b.n	800130a <xQueueGenericSend+0x24>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800130c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f3      	beq.n	80012fa <xQueueGenericSend+0x14>
 8001312:	b672      	cpsid	i
 8001314:	e7fe      	b.n	8001314 <xQueueGenericSend+0x2e>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001316:	f000 fdb9 	bl	8001e8c <xTaskGetSchedulerState>
 800131a:	1e06      	subs	r6, r0, #0
 800131c:	d104      	bne.n	8001328 <xQueueGenericSend+0x42>
 800131e:	9b01      	ldr	r3, [sp, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d02b      	beq.n	800137c <xQueueGenericSend+0x96>
 8001324:	b672      	cpsid	i
 8001326:	e7fe      	b.n	8001326 <xQueueGenericSend+0x40>
 8001328:	2600      	movs	r6, #0
 800132a:	e027      	b.n	800137c <xQueueGenericSend+0x96>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800132c:	002a      	movs	r2, r5
 800132e:	0039      	movs	r1, r7
 8001330:	0020      	movs	r0, r4
 8001332:	f7ff fede 	bl	80010f2 <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001338:	2b00      	cmp	r3, #0
 800133a:	d104      	bne.n	8001346 <xQueueGenericSend+0x60>
                taskEXIT_CRITICAL();
 800133c:	f001 f834 	bl	80023a8 <vPortExitCritical>
                return pdPASS;
 8001340:	2001      	movs	r0, #1
}
 8001342:	b005      	add	sp, #20
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001346:	0020      	movs	r0, r4
 8001348:	3024      	adds	r0, #36	; 0x24
 800134a:	f000 fd15 	bl	8001d78 <xTaskRemoveFromEventList>
 800134e:	e7f5      	b.n	800133c <xQueueGenericSend+0x56>
                    taskEXIT_CRITICAL();
 8001350:	f001 f82a 	bl	80023a8 <vPortExitCritical>
                    return errQUEUE_FULL;
 8001354:	2000      	movs	r0, #0
 8001356:	e7f4      	b.n	8001342 <xQueueGenericSend+0x5c>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001358:	a802      	add	r0, sp, #8
 800135a:	f000 fd4f 	bl	8001dfc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800135e:	3601      	adds	r6, #1
 8001360:	e019      	b.n	8001396 <xQueueGenericSend+0xb0>
        prvLockQueue( pxQueue );
 8001362:	2344      	movs	r3, #68	; 0x44
 8001364:	2200      	movs	r2, #0
 8001366:	54e2      	strb	r2, [r4, r3]
 8001368:	e020      	b.n	80013ac <xQueueGenericSend+0xc6>
 800136a:	2345      	movs	r3, #69	; 0x45
 800136c:	2200      	movs	r2, #0
 800136e:	54e2      	strb	r2, [r4, r3]
 8001370:	e021      	b.n	80013b6 <xQueueGenericSend+0xd0>
                prvUnlockQueue( pxQueue );
 8001372:	0020      	movs	r0, r4
 8001374:	f7ff ff10 	bl	8001198 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001378:	f000 fbac 	bl	8001ad4 <xTaskResumeAll>
        taskENTER_CRITICAL();
 800137c:	f001 f808 	bl	8002390 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001382:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001384:	4293      	cmp	r3, r2
 8001386:	d3d1      	bcc.n	800132c <xQueueGenericSend+0x46>
 8001388:	2d02      	cmp	r5, #2
 800138a:	d0cf      	beq.n	800132c <xQueueGenericSend+0x46>
                if( xTicksToWait == ( TickType_t ) 0 )
 800138c:	9b01      	ldr	r3, [sp, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0de      	beq.n	8001350 <xQueueGenericSend+0x6a>
                else if( xEntryTimeSet == pdFALSE )
 8001392:	2e00      	cmp	r6, #0
 8001394:	d0e0      	beq.n	8001358 <xQueueGenericSend+0x72>
        taskEXIT_CRITICAL();
 8001396:	f001 f807 	bl	80023a8 <vPortExitCritical>
        vTaskSuspendAll();
 800139a:	f000 fb23 	bl	80019e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800139e:	f000 fff7 	bl	8002390 <vPortEnterCritical>
 80013a2:	2344      	movs	r3, #68	; 0x44
 80013a4:	5ce2      	ldrb	r2, [r4, r3]
 80013a6:	b252      	sxtb	r2, r2
 80013a8:	1c53      	adds	r3, r2, #1
 80013aa:	d0da      	beq.n	8001362 <xQueueGenericSend+0x7c>
 80013ac:	2345      	movs	r3, #69	; 0x45
 80013ae:	5ce2      	ldrb	r2, [r4, r3]
 80013b0:	b252      	sxtb	r2, r2
 80013b2:	1c53      	adds	r3, r2, #1
 80013b4:	d0d9      	beq.n	800136a <xQueueGenericSend+0x84>
 80013b6:	f000 fff7 	bl	80023a8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	a802      	add	r0, sp, #8
 80013be:	f000 fd29 	bl	8001e14 <xTaskCheckForTimeOut>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d113      	bne.n	80013ee <xQueueGenericSend+0x108>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013c6:	0020      	movs	r0, r4
 80013c8:	f7ff fe76 	bl	80010b8 <prvIsQueueFull>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d0d0      	beq.n	8001372 <xQueueGenericSend+0x8c>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013d0:	0020      	movs	r0, r4
 80013d2:	3010      	adds	r0, #16
 80013d4:	9901      	ldr	r1, [sp, #4]
 80013d6:	f000 fca5 	bl	8001d24 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80013da:	0020      	movs	r0, r4
 80013dc:	f7ff fedc 	bl	8001198 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80013e0:	f000 fb78 	bl	8001ad4 <xTaskResumeAll>
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d1c9      	bne.n	800137c <xQueueGenericSend+0x96>
                    portYIELD_WITHIN_API();
 80013e8:	f000 ffc6 	bl	8002378 <vPortYield>
 80013ec:	e7c6      	b.n	800137c <xQueueGenericSend+0x96>
            prvUnlockQueue( pxQueue );
 80013ee:	0020      	movs	r0, r4
 80013f0:	f7ff fed2 	bl	8001198 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80013f4:	f000 fb6e 	bl	8001ad4 <xTaskResumeAll>
            return errQUEUE_FULL;
 80013f8:	2000      	movs	r0, #0
 80013fa:	e7a2      	b.n	8001342 <xQueueGenericSend+0x5c>

080013fc <xQueueGenericSendFromISR>:
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	46c6      	mov	lr, r8
 8001400:	b500      	push	{lr}
 8001402:	b082      	sub	sp, #8
 8001404:	0004      	movs	r4, r0
 8001406:	000f      	movs	r7, r1
 8001408:	9201      	str	r2, [sp, #4]
 800140a:	001d      	movs	r5, r3
    configASSERT( pxQueue );
 800140c:	2800      	cmp	r0, #0
 800140e:	d008      	beq.n	8001422 <xQueueGenericSendFromISR+0x26>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001410:	2900      	cmp	r1, #0
 8001412:	d008      	beq.n	8001426 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001414:	2d02      	cmp	r5, #2
 8001416:	d10b      	bne.n	8001430 <xQueueGenericSendFromISR+0x34>
 8001418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800141a:	2b01      	cmp	r3, #1
 800141c:	d008      	beq.n	8001430 <xQueueGenericSendFromISR+0x34>
 800141e:	b672      	cpsid	i
 8001420:	e7fe      	b.n	8001420 <xQueueGenericSendFromISR+0x24>
    configASSERT( pxQueue );
 8001422:	b672      	cpsid	i
 8001424:	e7fe      	b.n	8001424 <xQueueGenericSendFromISR+0x28>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001426:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f3      	beq.n	8001414 <xQueueGenericSendFromISR+0x18>
 800142c:	b672      	cpsid	i
 800142e:	e7fe      	b.n	800142e <xQueueGenericSendFromISR+0x32>
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001430:	f000 ffca 	bl	80023c8 <ulSetInterruptMaskFromISR>
 8001434:	4680      	mov	r8, r0
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001436:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001438:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800143a:	4293      	cmp	r3, r2
 800143c:	d30a      	bcc.n	8001454 <xQueueGenericSendFromISR+0x58>
 800143e:	2d02      	cmp	r5, #2
 8001440:	d008      	beq.n	8001454 <xQueueGenericSendFromISR+0x58>
            xReturn = errQUEUE_FULL;
 8001442:	2400      	movs	r4, #0
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001444:	4640      	mov	r0, r8
 8001446:	f000 ffc3 	bl	80023d0 <vClearInterruptMaskFromISR>
}
 800144a:	0020      	movs	r0, r4
 800144c:	b002      	add	sp, #8
 800144e:	bc80      	pop	{r7}
 8001450:	46b8      	mov	r8, r7
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
            const int8_t cTxLock = pxQueue->cTxLock;
 8001454:	2345      	movs	r3, #69	; 0x45
 8001456:	5ce6      	ldrb	r6, [r4, r3]
 8001458:	b276      	sxtb	r6, r6
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800145a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800145c:	002a      	movs	r2, r5
 800145e:	0039      	movs	r1, r7
 8001460:	0020      	movs	r0, r4
 8001462:	f7ff fe46 	bl	80010f2 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 8001466:	1c73      	adds	r3, r6, #1
 8001468:	d007      	beq.n	800147a <xQueueGenericSendFromISR+0x7e>
                configASSERT( cTxLock != queueINT8_MAX );
 800146a:	2e7f      	cmp	r6, #127	; 0x7f
 800146c:	d017      	beq.n	800149e <xQueueGenericSendFromISR+0xa2>
                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800146e:	1c73      	adds	r3, r6, #1
 8001470:	b25b      	sxtb	r3, r3
 8001472:	2245      	movs	r2, #69	; 0x45
 8001474:	54a3      	strb	r3, [r4, r2]
            xReturn = pdPASS;
 8001476:	2401      	movs	r4, #1
 8001478:	e7e4      	b.n	8001444 <xQueueGenericSendFromISR+0x48>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800147a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <xQueueGenericSendFromISR+0x88>
            xReturn = pdPASS;
 8001480:	2401      	movs	r4, #1
 8001482:	e7df      	b.n	8001444 <xQueueGenericSendFromISR+0x48>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001484:	0020      	movs	r0, r4
 8001486:	3024      	adds	r0, #36	; 0x24
 8001488:	f000 fc76 	bl	8001d78 <xTaskRemoveFromEventList>
 800148c:	2800      	cmp	r0, #0
 800148e:	d008      	beq.n	80014a2 <xQueueGenericSendFromISR+0xa6>
                                if( pxHigherPriorityTaskWoken != NULL )
 8001490:	9a01      	ldr	r2, [sp, #4]
 8001492:	2a00      	cmp	r2, #0
 8001494:	d007      	beq.n	80014a6 <xQueueGenericSendFromISR+0xaa>
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001496:	2301      	movs	r3, #1
 8001498:	6013      	str	r3, [r2, #0]
            xReturn = pdPASS;
 800149a:	2401      	movs	r4, #1
 800149c:	e7d2      	b.n	8001444 <xQueueGenericSendFromISR+0x48>
                configASSERT( cTxLock != queueINT8_MAX );
 800149e:	b672      	cpsid	i
 80014a0:	e7fe      	b.n	80014a0 <xQueueGenericSendFromISR+0xa4>
            xReturn = pdPASS;
 80014a2:	2401      	movs	r4, #1
 80014a4:	e7ce      	b.n	8001444 <xQueueGenericSendFromISR+0x48>
 80014a6:	2401      	movs	r4, #1
 80014a8:	e7cc      	b.n	8001444 <xQueueGenericSendFromISR+0x48>

080014aa <xQueueReceive>:
{
 80014aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ac:	b085      	sub	sp, #20
 80014ae:	0004      	movs	r4, r0
 80014b0:	000f      	movs	r7, r1
 80014b2:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d00a      	beq.n	80014ce <xQueueReceive+0x24>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014b8:	2900      	cmp	r1, #0
 80014ba:	d00a      	beq.n	80014d2 <xQueueReceive+0x28>
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80014bc:	f000 fce6 	bl	8001e8c <xTaskGetSchedulerState>
 80014c0:	1e06      	subs	r6, r0, #0
 80014c2:	d10b      	bne.n	80014dc <xQueueReceive+0x32>
 80014c4:	9b01      	ldr	r3, [sp, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d03e      	beq.n	8001548 <xQueueReceive+0x9e>
 80014ca:	b672      	cpsid	i
 80014cc:	e7fe      	b.n	80014cc <xQueueReceive+0x22>
    configASSERT( ( pxQueue ) );
 80014ce:	b672      	cpsid	i
 80014d0:	e7fe      	b.n	80014d0 <xQueueReceive+0x26>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f1      	beq.n	80014bc <xQueueReceive+0x12>
 80014d8:	b672      	cpsid	i
 80014da:	e7fe      	b.n	80014da <xQueueReceive+0x30>
 80014dc:	2600      	movs	r6, #0
 80014de:	e033      	b.n	8001548 <xQueueReceive+0x9e>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80014e0:	0039      	movs	r1, r7
 80014e2:	0020      	movs	r0, r4
 80014e4:	f7ff fe46 	bl	8001174 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80014e8:	3d01      	subs	r5, #1
 80014ea:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014ec:	6923      	ldr	r3, [r4, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d104      	bne.n	80014fc <xQueueReceive+0x52>
                taskEXIT_CRITICAL();
 80014f2:	f000 ff59 	bl	80023a8 <vPortExitCritical>
                return pdPASS;
 80014f6:	2001      	movs	r0, #1
}
 80014f8:	b005      	add	sp, #20
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014fc:	0020      	movs	r0, r4
 80014fe:	3010      	adds	r0, #16
 8001500:	f000 fc3a 	bl	8001d78 <xTaskRemoveFromEventList>
 8001504:	e7f5      	b.n	80014f2 <xQueueReceive+0x48>
                    taskEXIT_CRITICAL();
 8001506:	f000 ff4f 	bl	80023a8 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 800150a:	2000      	movs	r0, #0
 800150c:	e7f4      	b.n	80014f8 <xQueueReceive+0x4e>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800150e:	a802      	add	r0, sp, #8
 8001510:	f000 fc74 	bl	8001dfc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001514:	3601      	adds	r6, #1
 8001516:	e021      	b.n	800155c <xQueueReceive+0xb2>
        prvLockQueue( pxQueue );
 8001518:	2344      	movs	r3, #68	; 0x44
 800151a:	2200      	movs	r2, #0
 800151c:	54e2      	strb	r2, [r4, r3]
 800151e:	e028      	b.n	8001572 <xQueueReceive+0xc8>
 8001520:	2345      	movs	r3, #69	; 0x45
 8001522:	2200      	movs	r2, #0
 8001524:	54e2      	strb	r2, [r4, r3]
 8001526:	e029      	b.n	800157c <xQueueReceive+0xd2>
                prvUnlockQueue( pxQueue );
 8001528:	0020      	movs	r0, r4
 800152a:	f7ff fe35 	bl	8001198 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800152e:	f000 fad1 	bl	8001ad4 <xTaskResumeAll>
 8001532:	e009      	b.n	8001548 <xQueueReceive+0x9e>
            prvUnlockQueue( pxQueue );
 8001534:	0020      	movs	r0, r4
 8001536:	f7ff fe2f 	bl	8001198 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800153a:	f000 facb 	bl	8001ad4 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800153e:	0020      	movs	r0, r4
 8001540:	f7ff fdc9 	bl	80010d6 <prvIsQueueEmpty>
 8001544:	2800      	cmp	r0, #0
 8001546:	d135      	bne.n	80015b4 <xQueueReceive+0x10a>
        taskENTER_CRITICAL();
 8001548:	f000 ff22 	bl	8002390 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800154c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800154e:	2d00      	cmp	r5, #0
 8001550:	d1c6      	bne.n	80014e0 <xQueueReceive+0x36>
                if( xTicksToWait == ( TickType_t ) 0 )
 8001552:	9b01      	ldr	r3, [sp, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0d6      	beq.n	8001506 <xQueueReceive+0x5c>
                else if( xEntryTimeSet == pdFALSE )
 8001558:	2e00      	cmp	r6, #0
 800155a:	d0d8      	beq.n	800150e <xQueueReceive+0x64>
        taskEXIT_CRITICAL();
 800155c:	f000 ff24 	bl	80023a8 <vPortExitCritical>
        vTaskSuspendAll();
 8001560:	f000 fa40 	bl	80019e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001564:	f000 ff14 	bl	8002390 <vPortEnterCritical>
 8001568:	2344      	movs	r3, #68	; 0x44
 800156a:	5ce3      	ldrb	r3, [r4, r3]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	d0d2      	beq.n	8001518 <xQueueReceive+0x6e>
 8001572:	2345      	movs	r3, #69	; 0x45
 8001574:	5ce3      	ldrb	r3, [r4, r3]
 8001576:	b25b      	sxtb	r3, r3
 8001578:	3301      	adds	r3, #1
 800157a:	d0d1      	beq.n	8001520 <xQueueReceive+0x76>
 800157c:	f000 ff14 	bl	80023a8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001580:	a901      	add	r1, sp, #4
 8001582:	a802      	add	r0, sp, #8
 8001584:	f000 fc46 	bl	8001e14 <xTaskCheckForTimeOut>
 8001588:	2800      	cmp	r0, #0
 800158a:	d1d3      	bne.n	8001534 <xQueueReceive+0x8a>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800158c:	0020      	movs	r0, r4
 800158e:	f7ff fda2 	bl	80010d6 <prvIsQueueEmpty>
 8001592:	2800      	cmp	r0, #0
 8001594:	d0c8      	beq.n	8001528 <xQueueReceive+0x7e>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001596:	0020      	movs	r0, r4
 8001598:	3024      	adds	r0, #36	; 0x24
 800159a:	9901      	ldr	r1, [sp, #4]
 800159c:	f000 fbc2 	bl	8001d24 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80015a0:	0020      	movs	r0, r4
 80015a2:	f7ff fdf9 	bl	8001198 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80015a6:	f000 fa95 	bl	8001ad4 <xTaskResumeAll>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d1cc      	bne.n	8001548 <xQueueReceive+0x9e>
                    portYIELD_WITHIN_API();
 80015ae:	f000 fee3 	bl	8002378 <vPortYield>
 80015b2:	e7c9      	b.n	8001548 <xQueueReceive+0x9e>
                return errQUEUE_EMPTY;
 80015b4:	2000      	movs	r0, #0
 80015b6:	e79f      	b.n	80014f8 <xQueueReceive+0x4e>

080015b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80015b8:	b510      	push	{r4, lr}
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80015ba:	2300      	movs	r3, #0
 80015bc:	2b07      	cmp	r3, #7
 80015be:	d80a      	bhi.n	80015d6 <vQueueAddToRegistry+0x1e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80015c0:	00da      	lsls	r2, r3, #3
 80015c2:	4c05      	ldr	r4, [pc, #20]	; (80015d8 <vQueueAddToRegistry+0x20>)
 80015c4:	5912      	ldr	r2, [r2, r4]
 80015c6:	2a00      	cmp	r2, #0
 80015c8:	d001      	beq.n	80015ce <vQueueAddToRegistry+0x16>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80015ca:	3301      	adds	r3, #1
 80015cc:	e7f6      	b.n	80015bc <vQueueAddToRegistry+0x4>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	5119      	str	r1, [r3, r4]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80015d2:	18e3      	adds	r3, r4, r3
 80015d4:	6058      	str	r0, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80015d6:	bd10      	pop	{r4, pc}
 80015d8:	20000114 	.word	0x20000114

080015dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	0004      	movs	r4, r0
 80015e0:	000d      	movs	r5, r1
 80015e2:	0016      	movs	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80015e4:	f000 fed4 	bl	8002390 <vPortEnterCritical>
 80015e8:	2344      	movs	r3, #68	; 0x44
 80015ea:	5ce3      	ldrb	r3, [r4, r3]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	d00d      	beq.n	800160e <vQueueWaitForMessageRestricted+0x32>
 80015f2:	2345      	movs	r3, #69	; 0x45
 80015f4:	5ce3      	ldrb	r3, [r4, r3]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	d00c      	beq.n	8001616 <vQueueWaitForMessageRestricted+0x3a>
 80015fc:	f000 fed4 	bl	80023a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001600:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <vQueueWaitForMessageRestricted+0x42>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001606:	0020      	movs	r0, r4
 8001608:	f7ff fdc6 	bl	8001198 <prvUnlockQueue>
    }
 800160c:	bd70      	pop	{r4, r5, r6, pc}
        prvLockQueue( pxQueue );
 800160e:	2344      	movs	r3, #68	; 0x44
 8001610:	2200      	movs	r2, #0
 8001612:	54e2      	strb	r2, [r4, r3]
 8001614:	e7ed      	b.n	80015f2 <vQueueWaitForMessageRestricted+0x16>
 8001616:	2345      	movs	r3, #69	; 0x45
 8001618:	2200      	movs	r2, #0
 800161a:	54e2      	strb	r2, [r4, r3]
 800161c:	e7ee      	b.n	80015fc <vQueueWaitForMessageRestricted+0x20>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800161e:	0020      	movs	r0, r4
 8001620:	3024      	adds	r0, #36	; 0x24
 8001622:	0032      	movs	r2, r6
 8001624:	0029      	movs	r1, r5
 8001626:	f000 fb8f 	bl	8001d48 <vTaskPlaceOnEventListRestricted>
 800162a:	e7ec      	b.n	8001606 <vQueueWaitForMessageRestricted+0x2a>

0800162c <prvTaskIsTaskSuspended>:

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 800162c:	2800      	cmp	r0, #0
 800162e:	d005      	beq.n	800163c <prvTaskIsTaskSuspended+0x10>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <prvTaskIsTaskSuspended+0x2c>)
 8001632:	6942      	ldr	r2, [r0, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	d003      	beq.n	8001640 <prvTaskIsTaskSuspended+0x14>
        BaseType_t xReturn = pdFALSE;
 8001638:	2000      	movs	r0, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800163a:	4770      	bx	lr
        configASSERT( xTask );
 800163c:	b672      	cpsid	i
 800163e:	e7fe      	b.n	800163e <prvTaskIsTaskSuspended+0x12>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001640:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <prvTaskIsTaskSuspended+0x30>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d003      	beq.n	8001650 <prvTaskIsTaskSuspended+0x24>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <prvTaskIsTaskSuspended+0x28>
        BaseType_t xReturn = pdFALSE;
 800164c:	2000      	movs	r0, #0
 800164e:	e7f4      	b.n	800163a <prvTaskIsTaskSuspended+0xe>
 8001650:	2000      	movs	r0, #0
 8001652:	e7f2      	b.n	800163a <prvTaskIsTaskSuspended+0xe>
                    xReturn = pdTRUE;
 8001654:	2001      	movs	r0, #1
        return xReturn;
 8001656:	e7f0      	b.n	800163a <prvTaskIsTaskSuspended+0xe>
 8001658:	20000224 	.word	0x20000224
 800165c:	2000020c 	.word	0x2000020c

08001660 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <prvResetNextTaskUnblockTime+0x24>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d104      	bne.n	8001674 <prvResetNextTaskUnblockTime+0x14>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <prvResetNextTaskUnblockTime+0x28>)
 800166c:	2201      	movs	r2, #1
 800166e:	4252      	negs	r2, r2
 8001670:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001672:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <prvResetNextTaskUnblockTime+0x24>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b02      	ldr	r3, [pc, #8]	; (8001688 <prvResetNextTaskUnblockTime+0x28>)
 800167e:	601a      	str	r2, [r3, #0]
}
 8001680:	e7f7      	b.n	8001672 <prvResetNextTaskUnblockTime+0x12>
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	20000158 	.word	0x20000158
 8001688:	20000200 	.word	0x20000200

0800168c <prvInitialiseNewTask>:
{
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	46de      	mov	lr, fp
 8001690:	4657      	mov	r7, sl
 8001692:	4646      	mov	r6, r8
 8001694:	b5c0      	push	{r6, r7, lr}
 8001696:	4682      	mov	sl, r0
 8001698:	000f      	movs	r7, r1
 800169a:	0014      	movs	r4, r2
 800169c:	469b      	mov	fp, r3
 800169e:	9e08      	ldr	r6, [sp, #32]
 80016a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	21a5      	movs	r1, #165	; 0xa5
 80016a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80016a8:	f002 fc1d 	bl	8003ee6 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <prvInitialiseNewTask+0xb4>)
 80016ae:	469c      	mov	ip, r3
 80016b0:	4464      	add	r4, ip
 80016b2:	00a4      	lsls	r4, r4, #2
 80016b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016b6:	469c      	mov	ip, r3
 80016b8:	4464      	add	r4, ip
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016ba:	2307      	movs	r3, #7
 80016bc:	439c      	bics	r4, r3
 80016be:	46a0      	mov	r8, r4
    if( pcName != NULL )
 80016c0:	2f00      	cmp	r7, #0
 80016c2:	d039      	beq.n	8001738 <prvInitialiseNewTask+0xac>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016c4:	2400      	movs	r4, #0
 80016c6:	2c09      	cmp	r4, #9
 80016c8:	d808      	bhi.n	80016dc <prvInitialiseNewTask+0x50>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016ca:	5d3a      	ldrb	r2, [r7, r4]
 80016cc:	192b      	adds	r3, r5, r4
 80016ce:	3334      	adds	r3, #52	; 0x34
 80016d0:	701a      	strb	r2, [r3, #0]
            if( pcName[ x ] == ( char ) 0x00 )
 80016d2:	5d3b      	ldrb	r3, [r7, r4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <prvInitialiseNewTask+0x50>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016d8:	3401      	adds	r4, #1
 80016da:	e7f4      	b.n	80016c6 <prvInitialiseNewTask+0x3a>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016dc:	233d      	movs	r3, #61	; 0x3d
 80016de:	2200      	movs	r2, #0
 80016e0:	54ea      	strb	r2, [r5, r3]
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016e2:	2e04      	cmp	r6, #4
 80016e4:	d900      	bls.n	80016e8 <prvInitialiseNewTask+0x5c>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016e6:	2604      	movs	r6, #4
    pxNewTCB->uxPriority = uxPriority;
 80016e8:	62ee      	str	r6, [r5, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 80016ea:	64ae      	str	r6, [r5, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80016ec:	2400      	movs	r4, #0
 80016ee:	64ec      	str	r4, [r5, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016f0:	1d28      	adds	r0, r5, #4
 80016f2:	f7ff fca9 	bl	8001048 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80016f6:	0028      	movs	r0, r5
 80016f8:	3018      	adds	r0, #24
 80016fa:	f7ff fca5 	bl	8001048 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80016fe:	612d      	str	r5, [r5, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001700:	2305      	movs	r3, #5
 8001702:	1b9e      	subs	r6, r3, r6
 8001704:	61ae      	str	r6, [r5, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001706:	626d      	str	r5, [r5, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001708:	0028      	movs	r0, r5
 800170a:	3050      	adds	r0, #80	; 0x50
 800170c:	2204      	movs	r2, #4
 800170e:	2100      	movs	r1, #0
 8001710:	f002 fbe9 	bl	8003ee6 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001714:	002b      	movs	r3, r5
 8001716:	3354      	adds	r3, #84	; 0x54
 8001718:	701c      	strb	r4, [r3, #0]
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800171a:	465a      	mov	r2, fp
 800171c:	4651      	mov	r1, sl
 800171e:	4640      	mov	r0, r8
 8001720:	f000 fe18 	bl	8002354 <pxPortInitialiseStack>
 8001724:	6028      	str	r0, [r5, #0]
    if( pxCreatedTask != NULL )
 8001726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001728:	2b00      	cmp	r3, #0
 800172a:	d000      	beq.n	800172e <prvInitialiseNewTask+0xa2>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800172c:	601d      	str	r5, [r3, #0]
}
 800172e:	bce0      	pop	{r5, r6, r7}
 8001730:	46bb      	mov	fp, r7
 8001732:	46b2      	mov	sl, r6
 8001734:	46a8      	mov	r8, r5
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001738:	2334      	movs	r3, #52	; 0x34
 800173a:	2200      	movs	r2, #0
 800173c:	54ea      	strb	r2, [r5, r3]
 800173e:	e7d0      	b.n	80016e2 <prvInitialiseNewTask+0x56>
 8001740:	3fffffff 	.word	0x3fffffff

08001744 <prvInitialiseTaskLists>:
{
 8001744:	b570      	push	{r4, r5, r6, lr}
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001746:	2400      	movs	r4, #0
 8001748:	e007      	b.n	800175a <prvInitialiseTaskLists+0x16>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800174a:	00a3      	lsls	r3, r4, #2
 800174c:	191b      	adds	r3, r3, r4
 800174e:	009a      	lsls	r2, r3, #2
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <prvInitialiseTaskLists+0x40>)
 8001752:	1880      	adds	r0, r0, r2
 8001754:	f7ff fc6d 	bl	8001032 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001758:	3401      	adds	r4, #1
 800175a:	2c04      	cmp	r4, #4
 800175c:	d9f5      	bls.n	800174a <prvInitialiseTaskLists+0x6>
    vListInitialise( &xDelayedTaskList1 );
 800175e:	4d0a      	ldr	r5, [pc, #40]	; (8001788 <prvInitialiseTaskLists+0x44>)
 8001760:	0028      	movs	r0, r5
 8001762:	f7ff fc66 	bl	8001032 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001766:	4c09      	ldr	r4, [pc, #36]	; (800178c <prvInitialiseTaskLists+0x48>)
 8001768:	0020      	movs	r0, r4
 800176a:	f7ff fc62 	bl	8001032 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800176e:	4808      	ldr	r0, [pc, #32]	; (8001790 <prvInitialiseTaskLists+0x4c>)
 8001770:	f7ff fc5f 	bl	8001032 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <prvInitialiseTaskLists+0x50>)
 8001776:	f7ff fc5c 	bl	8001032 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <prvInitialiseTaskLists+0x54>)
 800177c:	601d      	str	r5, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <prvInitialiseTaskLists+0x58>)
 8001780:	601c      	str	r4, [r3, #0]
}
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	20000160 	.word	0x20000160
 8001788:	200001d4 	.word	0x200001d4
 800178c:	200001e8 	.word	0x200001e8
 8001790:	2000020c 	.word	0x2000020c
 8001794:	20000224 	.word	0x20000224
 8001798:	20000158 	.word	0x20000158
 800179c:	2000015c 	.word	0x2000015c

080017a0 <prvAddNewTaskToReadyList>:
{
 80017a0:	b510      	push	{r4, lr}
 80017a2:	0004      	movs	r4, r0
    taskENTER_CRITICAL();
 80017a4:	f000 fdf4 	bl	8002390 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <prvAddNewTaskToReadyList+0x7c>)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <prvAddNewTaskToReadyList+0x80>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00c      	beq.n	80017d2 <prvAddNewTaskToReadyList+0x32>
            if( xSchedulerRunning == pdFALSE )
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <prvAddNewTaskToReadyList+0x84>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10d      	bne.n	80017dc <prvAddNewTaskToReadyList+0x3c>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <prvAddNewTaskToReadyList+0x80>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d807      	bhi.n	80017dc <prvAddNewTaskToReadyList+0x3c>
                    pxCurrentTCB = pxNewTCB;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <prvAddNewTaskToReadyList+0x80>)
 80017ce:	601c      	str	r4, [r3, #0]
 80017d0:	e004      	b.n	80017dc <prvAddNewTaskToReadyList+0x3c>
            pxCurrentTCB = pxNewTCB;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <prvAddNewTaskToReadyList+0x80>)
 80017d4:	601c      	str	r4, [r3, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d01c      	beq.n	8001816 <prvAddNewTaskToReadyList+0x76>
        uxTaskNumber++;
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <prvAddNewTaskToReadyList+0x88>)
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017e4:	6423      	str	r3, [r4, #64]	; 0x40
        prvAddTaskToReadyList( pxNewTCB );
 80017e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017e8:	4a10      	ldr	r2, [pc, #64]	; (800182c <prvAddNewTaskToReadyList+0x8c>)
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <prvAddNewTaskToReadyList+0x54>
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <prvAddNewTaskToReadyList+0x8c>)
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	1d21      	adds	r1, r4, #4
 80017f6:	0098      	lsls	r0, r3, #2
 80017f8:	18c0      	adds	r0, r0, r3
 80017fa:	0080      	lsls	r0, r0, #2
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <prvAddNewTaskToReadyList+0x90>)
 80017fe:	1818      	adds	r0, r3, r0
 8001800:	f7ff fc25 	bl	800104e <vListInsertEnd>
    taskEXIT_CRITICAL();
 8001804:	f000 fdd0 	bl	80023a8 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <prvAddNewTaskToReadyList+0x84>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <prvAddNewTaskToReadyList+0x74>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <prvAddNewTaskToReadyList+0x80>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	bd10      	pop	{r4, pc}
                prvInitialiseTaskLists();
 8001816:	f7ff ff95 	bl	8001744 <prvInitialiseTaskLists>
 800181a:	e7df      	b.n	80017dc <prvAddNewTaskToReadyList+0x3c>
 800181c:	200001c4 	.word	0x200001c4
 8001820:	20000154 	.word	0x20000154
 8001824:	20000220 	.word	0x20000220
 8001828:	200001cc 	.word	0x200001cc
 800182c:	200001d0 	.word	0x200001d0
 8001830:	20000160 	.word	0x20000160

08001834 <prvIdleTask>:
{
 8001834:	b510      	push	{r4, lr}
                taskYIELD();
 8001836:	f000 fd9f 	bl	8002378 <vPortYield>
    for( ; ; )
 800183a:	e7fc      	b.n	8001836 <prvIdleTask+0x2>

0800183c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	0004      	movs	r4, r0
 8001840:	000d      	movs	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <prvAddCurrentTaskToDelayedList+0x64>)
 8001844:	681e      	ldr	r6, [r3, #0]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	3004      	adds	r0, #4
 800184c:	f7ff fc21 	bl	8001092 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001850:	1c63      	adds	r3, r4, #1
 8001852:	d00d      	beq.n	8001870 <prvAddCurrentTaskToDelayedList+0x34>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001854:	1934      	adds	r4, r6, r4

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	605c      	str	r4, [r3, #4]

                if( xTimeToWake < xConstTickCount )
 800185c:	42a6      	cmp	r6, r4
 800185e:	d910      	bls.n	8001882 <prvAddCurrentTaskToDelayedList+0x46>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	3104      	adds	r1, #4
 800186a:	f7ff fbfb 	bl	8001064 <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800186e:	bd70      	pop	{r4, r5, r6, pc}
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001870:	2d00      	cmp	r5, #0
 8001872:	d0ef      	beq.n	8001854 <prvAddCurrentTaskToDelayedList+0x18>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	3104      	adds	r1, #4
 800187a:	480c      	ldr	r0, [pc, #48]	; (80018ac <prvAddCurrentTaskToDelayedList+0x70>)
 800187c:	f7ff fbe7 	bl	800104e <vListInsertEnd>
 8001880:	e7f5      	b.n	800186e <prvAddCurrentTaskToDelayedList+0x32>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <prvAddCurrentTaskToDelayedList+0x74>)
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <prvAddCurrentTaskToDelayedList+0x68>)
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	3104      	adds	r1, #4
 800188c:	f7ff fbea 	bl	8001064 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <prvAddCurrentTaskToDelayedList+0x78>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	42a3      	cmp	r3, r4
 8001896:	d9ea      	bls.n	800186e <prvAddCurrentTaskToDelayedList+0x32>
                        xNextTaskUnblockTime = xTimeToWake;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <prvAddCurrentTaskToDelayedList+0x78>)
 800189a:	601c      	str	r4, [r3, #0]
}
 800189c:	e7e7      	b.n	800186e <prvAddCurrentTaskToDelayedList+0x32>
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	20000238 	.word	0x20000238
 80018a4:	20000154 	.word	0x20000154
 80018a8:	2000015c 	.word	0x2000015c
 80018ac:	20000224 	.word	0x20000224
 80018b0:	20000158 	.word	0x20000158
 80018b4:	20000200 	.word	0x20000200

080018b8 <xTaskCreate>:
    {
 80018b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ba:	b087      	sub	sp, #28
 80018bc:	9004      	str	r0, [sp, #16]
 80018be:	9105      	str	r1, [sp, #20]
 80018c0:	0016      	movs	r6, r2
 80018c2:	001f      	movs	r7, r3
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80018c4:	0090      	lsls	r0, r2, #2
 80018c6:	f000 fe53 	bl	8002570 <pvPortMalloc>
 80018ca:	1e04      	subs	r4, r0, #0
                if( pxStack != NULL )
 80018cc:	d01d      	beq.n	800190a <xTaskCreate+0x52>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80018ce:	2058      	movs	r0, #88	; 0x58
 80018d0:	f000 fe4e 	bl	8002570 <pvPortMalloc>
 80018d4:	1e05      	subs	r5, r0, #0
                    if( pxNewTCB != NULL )
 80018d6:	d014      	beq.n	8001902 <xTaskCreate+0x4a>
                        pxNewTCB->pxStack = pxStack;
 80018d8:	6304      	str	r4, [r0, #48]	; 0x30
        if( pxNewTCB != NULL )
 80018da:	2d00      	cmp	r5, #0
 80018dc:	d019      	beq.n	8001912 <xTaskCreate+0x5a>
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80018de:	2300      	movs	r3, #0
 80018e0:	9303      	str	r3, [sp, #12]
 80018e2:	9502      	str	r5, [sp, #8]
 80018e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	003b      	movs	r3, r7
 80018ee:	0032      	movs	r2, r6
 80018f0:	9905      	ldr	r1, [sp, #20]
 80018f2:	9804      	ldr	r0, [sp, #16]
 80018f4:	f7ff feca 	bl	800168c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80018f8:	0028      	movs	r0, r5
 80018fa:	f7ff ff51 	bl	80017a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80018fe:	2001      	movs	r0, #1
 8001900:	e005      	b.n	800190e <xTaskCreate+0x56>
                        vPortFree( pxStack );
 8001902:	0020      	movs	r0, r4
 8001904:	f000 feae 	bl	8002664 <vPortFree>
 8001908:	e7e7      	b.n	80018da <xTaskCreate+0x22>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800190a:	2001      	movs	r0, #1
 800190c:	4240      	negs	r0, r0
    }
 800190e:	b007      	add	sp, #28
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001912:	2001      	movs	r0, #1
 8001914:	4240      	negs	r0, r0
        return xReturn;
 8001916:	e7fa      	b.n	800190e <xTaskCreate+0x56>

08001918 <vTaskResume>:
    {
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	1e04      	subs	r4, r0, #0
        configASSERT( xTaskToResume );
 800191c:	d00d      	beq.n	800193a <vTaskResume+0x22>
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <vTaskResume+0x54>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4283      	cmp	r3, r0
 8001924:	d008      	beq.n	8001938 <vTaskResume+0x20>
            taskENTER_CRITICAL();
 8001926:	f000 fd33 	bl	8002390 <vPortEnterCritical>
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800192a:	0020      	movs	r0, r4
 800192c:	f7ff fe7e 	bl	800162c <prvTaskIsTaskSuspended>
 8001930:	2800      	cmp	r0, #0
 8001932:	d104      	bne.n	800193e <vTaskResume+0x26>
            taskEXIT_CRITICAL();
 8001934:	f000 fd38 	bl	80023a8 <vPortExitCritical>
    }
 8001938:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( xTaskToResume );
 800193a:	b672      	cpsid	i
 800193c:	e7fe      	b.n	800193c <vTaskResume+0x24>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800193e:	1d25      	adds	r5, r4, #4
 8001940:	0028      	movs	r0, r5
 8001942:	f7ff fba6 	bl	8001092 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001948:	4a09      	ldr	r2, [pc, #36]	; (8001970 <vTaskResume+0x58>)
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <vTaskResume+0x3c>
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <vTaskResume+0x58>)
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	0098      	lsls	r0, r3, #2
 8001956:	18c0      	adds	r0, r0, r3
 8001958:	0080      	lsls	r0, r0, #2
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <vTaskResume+0x5c>)
 800195c:	1818      	adds	r0, r3, r0
 800195e:	0029      	movs	r1, r5
 8001960:	f7ff fb75 	bl	800104e <vListInsertEnd>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001964:	4b01      	ldr	r3, [pc, #4]	; (800196c <vTaskResume+0x54>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e7e4      	b.n	8001934 <vTaskResume+0x1c>
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	20000154 	.word	0x20000154
 8001970:	200001d0 	.word	0x200001d0
 8001974:	20000160 	.word	0x20000160

08001978 <vTaskStartScheduler>:
{
 8001978:	b500      	push	{lr}
 800197a:	b083      	sub	sp, #12
            xReturn = xTaskCreate( prvIdleTask,
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <vTaskStartScheduler+0x50>)
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2232      	movs	r2, #50	; 0x32
 8001986:	4911      	ldr	r1, [pc, #68]	; (80019cc <vTaskStartScheduler+0x54>)
 8001988:	4811      	ldr	r0, [pc, #68]	; (80019d0 <vTaskStartScheduler+0x58>)
 800198a:	f7ff ff95 	bl	80018b8 <xTaskCreate>
            if( xReturn == pdPASS )
 800198e:	2801      	cmp	r0, #1
 8001990:	d007      	beq.n	80019a2 <vTaskStartScheduler+0x2a>
    if( xReturn == pdPASS )
 8001992:	2801      	cmp	r0, #1
 8001994:	d008      	beq.n	80019a8 <vTaskStartScheduler+0x30>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001996:	1c43      	adds	r3, r0, #1
 8001998:	d014      	beq.n	80019c4 <vTaskStartScheduler+0x4c>
    ( void ) uxTopUsedPriority;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <vTaskStartScheduler+0x5c>)
 800199c:	681b      	ldr	r3, [r3, #0]
}
 800199e:	b003      	add	sp, #12
 80019a0:	bd00      	pop	{pc}
                xReturn = xTimerCreateTimerTask();
 80019a2:	f000 fb27 	bl	8001ff4 <xTimerCreateTimerTask>
 80019a6:	e7f4      	b.n	8001992 <vTaskStartScheduler+0x1a>
        portDISABLE_INTERRUPTS();
 80019a8:	b672      	cpsid	i
        xNextTaskUnblockTime = portMAX_DELAY;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <vTaskStartScheduler+0x60>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	4252      	negs	r2, r2
 80019b0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <vTaskStartScheduler+0x64>)
 80019b4:	3202      	adds	r2, #2
 80019b6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <vTaskStartScheduler+0x68>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 80019be:	f000 fd5d 	bl	800247c <xPortStartScheduler>
 80019c2:	e7ea      	b.n	800199a <vTaskStartScheduler+0x22>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019c4:	b672      	cpsid	i
 80019c6:	e7fe      	b.n	80019c6 <vTaskStartScheduler+0x4e>
 80019c8:	200001fc 	.word	0x200001fc
 80019cc:	08003f44 	.word	0x08003f44
 80019d0:	08001835 	.word	0x08001835
 80019d4:	2000005c 	.word	0x2000005c
 80019d8:	20000200 	.word	0x20000200
 80019dc:	20000220 	.word	0x20000220
 80019e0:	20000238 	.word	0x20000238

080019e4 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 80019e4:	4a02      	ldr	r2, [pc, #8]	; (80019f0 <vTaskSuspendAll+0xc>)
 80019e6:	6813      	ldr	r3, [r2, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	4770      	bx	lr
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	200001c8 	.word	0x200001c8

080019f4 <xTaskGetTickCount>:
        xTicks = xTickCount;
 80019f4:	4b01      	ldr	r3, [pc, #4]	; (80019fc <xTaskGetTickCount+0x8>)
 80019f6:	6818      	ldr	r0, [r3, #0]
}
 80019f8:	4770      	bx	lr
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	20000238 	.word	0x20000238

08001a00 <xTaskIncrementTick>:
{
 8001a00:	b570      	push	{r4, r5, r6, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <xTaskIncrementTick+0xb0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d14c      	bne.n	8001aa4 <xTaskIncrementTick+0xa4>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <xTaskIncrementTick+0xb4>)
 8001a0c:	681d      	ldr	r5, [r3, #0]
 8001a0e:	3501      	adds	r5, #1
        xTickCount = xConstTickCount;
 8001a10:	601d      	str	r5, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	d112      	bne.n	8001a3c <xTaskIncrementTick+0x3c>
            taskSWITCH_DELAYED_LISTS();
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <xTaskIncrementTick+0xb8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <xTaskIncrementTick+0x24>
 8001a20:	b672      	cpsid	i
 8001a22:	e7fe      	b.n	8001a22 <xTaskIncrementTick+0x22>
 8001a24:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <xTaskIncrementTick+0xb8>)
 8001a26:	6811      	ldr	r1, [r2, #0]
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <xTaskIncrementTick+0xbc>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	6010      	str	r0, [r2, #0]
 8001a2e:	6019      	str	r1, [r3, #0]
 8001a30:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <xTaskIncrementTick+0xc0>)
 8001a32:	6813      	ldr	r3, [r2, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	f7ff fe12 	bl	8001660 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <xTaskIncrementTick+0xc4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	42ab      	cmp	r3, r5
 8001a42:	d833      	bhi.n	8001aac <xTaskIncrementTick+0xac>
 8001a44:	e00f      	b.n	8001a66 <xTaskIncrementTick+0x66>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <xTaskIncrementTick+0xc4>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4252      	negs	r2, r2
 8001a4c:	601a      	str	r2, [r3, #0]
                    break;
 8001a4e:	e02d      	b.n	8001aac <xTaskIncrementTick+0xac>
                        xNextTaskUnblockTime = xItemValue;
 8001a50:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <xTaskIncrementTick+0xc4>)
 8001a52:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001a54:	e02a      	b.n	8001aac <xTaskIncrementTick+0xac>
                    prvAddTaskToReadyList( pxTCB );
 8001a56:	0093      	lsls	r3, r2, #2
 8001a58:	189b      	adds	r3, r3, r2
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	481a      	ldr	r0, [pc, #104]	; (8001ac8 <xTaskIncrementTick+0xc8>)
 8001a5e:	1880      	adds	r0, r0, r2
 8001a60:	0031      	movs	r1, r6
 8001a62:	f7ff faf4 	bl	800104e <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <xTaskIncrementTick+0xb8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ea      	beq.n	8001a46 <xTaskIncrementTick+0x46>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <xTaskIncrementTick+0xb8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	68dc      	ldr	r4, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a78:	6863      	ldr	r3, [r4, #4]
                    if( xConstTickCount < xItemValue )
 8001a7a:	429d      	cmp	r5, r3
 8001a7c:	d3e8      	bcc.n	8001a50 <xTaskIncrementTick+0x50>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a7e:	1d26      	adds	r6, r4, #4
 8001a80:	0030      	movs	r0, r6
 8001a82:	f7ff fb06 	bl	8001092 <uxListRemove>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <xTaskIncrementTick+0x94>
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a8c:	0020      	movs	r0, r4
 8001a8e:	3018      	adds	r0, #24
 8001a90:	f7ff faff 	bl	8001092 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001a94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <xTaskIncrementTick+0xcc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d9db      	bls.n	8001a56 <xTaskIncrementTick+0x56>
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <xTaskIncrementTick+0xcc>)
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e7d8      	b.n	8001a56 <xTaskIncrementTick+0x56>
        ++xPendedTicks;
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <xTaskIncrementTick+0xd0>)
 8001aa6:	6813      	ldr	r3, [r2, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	2000      	movs	r0, #0
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
 8001ab0:	200001c8 	.word	0x200001c8
 8001ab4:	20000238 	.word	0x20000238
 8001ab8:	20000158 	.word	0x20000158
 8001abc:	2000015c 	.word	0x2000015c
 8001ac0:	20000204 	.word	0x20000204
 8001ac4:	20000200 	.word	0x20000200
 8001ac8:	20000160 	.word	0x20000160
 8001acc:	200001d0 	.word	0x200001d0
 8001ad0:	20000208 	.word	0x20000208

08001ad4 <xTaskResumeAll>:
{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
    configASSERT( uxSchedulerSuspended );
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <xTaskResumeAll+0xb8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <xTaskResumeAll+0xe>
 8001ade:	b672      	cpsid	i
 8001ae0:	e7fe      	b.n	8001ae0 <xTaskResumeAll+0xc>
    taskENTER_CRITICAL();
 8001ae2:	f000 fc55 	bl	8002390 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <xTaskResumeAll+0xb8>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	3a01      	subs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <xTaskResumeAll+0x28>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001af4:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <xTaskResumeAll+0xbc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <xTaskResumeAll+0x30>
    taskEXIT_CRITICAL();
 8001afc:	f000 fc54 	bl	80023a8 <vPortExitCritical>
}
 8001b00:	2000      	movs	r0, #0
 8001b02:	bd70      	pop	{r4, r5, r6, pc}
    TCB_t * pxTCB = NULL;
 8001b04:	2400      	movs	r4, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <xTaskResumeAll+0xc0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d023      	beq.n	8001b56 <xTaskResumeAll+0x82>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <xTaskResumeAll+0xc0>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	68dc      	ldr	r4, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b14:	0020      	movs	r0, r4
 8001b16:	3018      	adds	r0, #24
 8001b18:	f7ff fabb 	bl	8001092 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b1c:	1d25      	adds	r5, r4, #4
 8001b1e:	0028      	movs	r0, r5
 8001b20:	f7ff fab7 	bl	8001092 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b26:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <xTaskResumeAll+0xc4>)
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <xTaskResumeAll+0x5e>
 8001b2e:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <xTaskResumeAll+0xc4>)
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	0098      	lsls	r0, r3, #2
 8001b34:	18c0      	adds	r0, r0, r3
 8001b36:	0080      	lsls	r0, r0, #2
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <xTaskResumeAll+0xc8>)
 8001b3a:	1818      	adds	r0, r3, r0
 8001b3c:	0029      	movs	r1, r5
 8001b3e:	f7ff fa86 	bl	800104e <vListInsertEnd>
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <xTaskResumeAll+0xcc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3db      	bcc.n	8001b06 <xTaskResumeAll+0x32>
                        xYieldPending = pdTRUE;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <xTaskResumeAll+0xd0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e7d7      	b.n	8001b06 <xTaskResumeAll+0x32>
                if( pxTCB != NULL )
 8001b56:	2c00      	cmp	r4, #0
 8001b58:	d001      	beq.n	8001b5e <xTaskResumeAll+0x8a>
                    prvResetNextTaskUnblockTime();
 8001b5a:	f7ff fd81 	bl	8001660 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <xTaskResumeAll+0xd4>)
 8001b60:	681c      	ldr	r4, [r3, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8001b62:	2c00      	cmp	r4, #0
 8001b64:	d105      	bne.n	8001b72 <xTaskResumeAll+0x9e>
                if( xYieldPending != pdFALSE )
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <xTaskResumeAll+0xd0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	e7c7      	b.n	8001afc <xTaskResumeAll+0x28>
                            --xPendedCounts;
 8001b6c:	3c01      	subs	r4, #1
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001b6e:	2c00      	cmp	r4, #0
 8001b70:	d007      	beq.n	8001b82 <xTaskResumeAll+0xae>
                            if( xTaskIncrementTick() != pdFALSE )
 8001b72:	f7ff ff45 	bl	8001a00 <xTaskIncrementTick>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d0f8      	beq.n	8001b6c <xTaskResumeAll+0x98>
                                xYieldPending = pdTRUE;
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <xTaskResumeAll+0xd0>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e7f4      	b.n	8001b6c <xTaskResumeAll+0x98>
                        xPendedTicks = 0;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <xTaskResumeAll+0xd4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e7ed      	b.n	8001b66 <xTaskResumeAll+0x92>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	200001c8 	.word	0x200001c8
 8001b90:	200001c4 	.word	0x200001c4
 8001b94:	2000020c 	.word	0x2000020c
 8001b98:	200001d0 	.word	0x200001d0
 8001b9c:	20000160 	.word	0x20000160
 8001ba0:	20000154 	.word	0x20000154
 8001ba4:	2000023c 	.word	0x2000023c
 8001ba8:	20000208 	.word	0x20000208

08001bac <vTaskDelay>:
    {
 8001bac:	b510      	push	{r4, lr}
 8001bae:	1e04      	subs	r4, r0, #0
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001bb0:	d00f      	beq.n	8001bd2 <vTaskDelay+0x26>
            configASSERT( uxSchedulerSuspended == 0 );
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <vTaskDelay+0x2c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <vTaskDelay+0x12>
 8001bba:	b672      	cpsid	i
 8001bbc:	e7fe      	b.n	8001bbc <vTaskDelay+0x10>
            vTaskSuspendAll();
 8001bbe:	f7ff ff11 	bl	80019e4 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	0020      	movs	r0, r4
 8001bc6:	f7ff fe39 	bl	800183c <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8001bca:	f7ff ff83 	bl	8001ad4 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d101      	bne.n	8001bd6 <vTaskDelay+0x2a>
            portYIELD_WITHIN_API();
 8001bd2:	f000 fbd1 	bl	8002378 <vPortYield>
    }
 8001bd6:	bd10      	pop	{r4, pc}
 8001bd8:	200001c8 	.word	0x200001c8

08001bdc <vTaskSwitchContext>:
{
 8001bdc:	b510      	push	{r4, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <vTaskSwitchContext+0x78>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <vTaskSwitchContext+0x12>
        xYieldPending = pdTRUE;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <vTaskSwitchContext+0x7c>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
}
 8001bec:	bd10      	pop	{r4, pc}
        xYieldPending = pdFALSE;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <vTaskSwitchContext+0x7c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <vTaskSwitchContext+0x80>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	009a      	lsls	r2, r3, #2
 8001bfa:	18d2      	adds	r2, r2, r3
 8001bfc:	0091      	lsls	r1, r2, #2
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <vTaskSwitchContext+0x84>)
 8001c00:	588a      	ldr	r2, [r1, r2]
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	d105      	bne.n	8001c12 <vTaskSwitchContext+0x36>
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <vTaskSwitchContext+0x32>
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	e7f4      	b.n	8001bf8 <vTaskSwitchContext+0x1c>
 8001c0e:	b672      	cpsid	i
 8001c10:	e7fe      	b.n	8001c10 <vTaskSwitchContext+0x34>
 8001c12:	4813      	ldr	r0, [pc, #76]	; (8001c60 <vTaskSwitchContext+0x84>)
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	1841      	adds	r1, r0, r1
 8001c18:	684c      	ldr	r4, [r1, #4]
 8001c1a:	6864      	ldr	r4, [r4, #4]
 8001c1c:	604c      	str	r4, [r1, #4]
 8001c1e:	18d2      	adds	r2, r2, r3
 8001c20:	0091      	lsls	r1, r2, #2
 8001c22:	3108      	adds	r1, #8
 8001c24:	1840      	adds	r0, r0, r1
 8001c26:	4284      	cmp	r4, r0
 8001c28:	d00b      	beq.n	8001c42 <vTaskSwitchContext+0x66>
 8001c2a:	009a      	lsls	r2, r3, #2
 8001c2c:	18d2      	adds	r2, r2, r3
 8001c2e:	0091      	lsls	r1, r2, #2
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <vTaskSwitchContext+0x84>)
 8001c32:	1852      	adds	r2, r2, r1
 8001c34:	6852      	ldr	r2, [r2, #4]
 8001c36:	68d1      	ldr	r1, [r2, #12]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <vTaskSwitchContext+0x88>)
 8001c3a:	6011      	str	r1, [r2, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <vTaskSwitchContext+0x80>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	e7d4      	b.n	8001bec <vTaskSwitchContext+0x10>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c42:	6860      	ldr	r0, [r4, #4]
 8001c44:	009a      	lsls	r2, r3, #2
 8001c46:	18d2      	adds	r2, r2, r3
 8001c48:	0091      	lsls	r1, r2, #2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <vTaskSwitchContext+0x84>)
 8001c4c:	1852      	adds	r2, r2, r1
 8001c4e:	6050      	str	r0, [r2, #4]
 8001c50:	e7eb      	b.n	8001c2a <vTaskSwitchContext+0x4e>
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	200001c8 	.word	0x200001c8
 8001c58:	2000023c 	.word	0x2000023c
 8001c5c:	200001d0 	.word	0x200001d0
 8001c60:	20000160 	.word	0x20000160
 8001c64:	20000154 	.word	0x20000154

08001c68 <vTaskSuspend>:
    {
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	0004      	movs	r4, r0
        taskENTER_CRITICAL();
 8001c6c:	f000 fb90 	bl	8002390 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001c70:	2c00      	cmp	r4, #0
 8001c72:	d01c      	beq.n	8001cae <vTaskSuspend+0x46>
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c74:	1d25      	adds	r5, r4, #4
 8001c76:	0028      	movs	r0, r5
 8001c78:	f7ff fa0b 	bl	8001092 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <vTaskSuspend+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c82:	0020      	movs	r0, r4
 8001c84:	3018      	adds	r0, #24
 8001c86:	f7ff fa04 	bl	8001092 <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001c8a:	0029      	movs	r1, r5
 8001c8c:	4820      	ldr	r0, [pc, #128]	; (8001d10 <vTaskSuspend+0xa8>)
 8001c8e:	f7ff f9de 	bl	800104e <vListInsertEnd>
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001c92:	2300      	movs	r3, #0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	dd0d      	ble.n	8001cb4 <vTaskSuspend+0x4c>
        taskEXIT_CRITICAL();
 8001c98:	f000 fb86 	bl	80023a8 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <vTaskSuspend+0xac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d113      	bne.n	8001ccc <vTaskSuspend+0x64>
        if( pxTCB == pxCurrentTCB )
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <vTaskSuspend+0xb0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	42a3      	cmp	r3, r4
 8001caa:	d016      	beq.n	8001cda <vTaskSuspend+0x72>
    }
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <vTaskSuspend+0xb0>)
 8001cb0:	681c      	ldr	r4, [r3, #0]
 8001cb2:	e7df      	b.n	8001c74 <vTaskSuspend+0xc>
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8001cb4:	18e2      	adds	r2, r4, r3
 8001cb6:	3254      	adds	r2, #84	; 0x54
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	2a01      	cmp	r2, #1
 8001cbc:	d001      	beq.n	8001cc2 <vTaskSuspend+0x5a>
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	e7e8      	b.n	8001c94 <vTaskSuspend+0x2c>
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8001cc2:	18e2      	adds	r2, r4, r3
 8001cc4:	3254      	adds	r2, #84	; 0x54
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	7011      	strb	r1, [r2, #0]
 8001cca:	e7f8      	b.n	8001cbe <vTaskSuspend+0x56>
            taskENTER_CRITICAL();
 8001ccc:	f000 fb60 	bl	8002390 <vPortEnterCritical>
                prvResetNextTaskUnblockTime();
 8001cd0:	f7ff fcc6 	bl	8001660 <prvResetNextTaskUnblockTime>
            taskEXIT_CRITICAL();
 8001cd4:	f000 fb68 	bl	80023a8 <vPortExitCritical>
 8001cd8:	e7e4      	b.n	8001ca4 <vTaskSuspend+0x3c>
            if( xSchedulerRunning != pdFALSE )
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <vTaskSuspend+0xac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <vTaskSuspend+0x8c>
                configASSERT( uxSchedulerSuspended == 0 );
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <vTaskSuspend+0xb4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <vTaskSuspend+0x86>
 8001cea:	b672      	cpsid	i
 8001cec:	e7fe      	b.n	8001cec <vTaskSuspend+0x84>
                portYIELD_WITHIN_API();
 8001cee:	f000 fb43 	bl	8002378 <vPortYield>
 8001cf2:	e7db      	b.n	8001cac <vTaskSuspend+0x44>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <vTaskSuspend+0xa8>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <vTaskSuspend+0xb8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d103      	bne.n	8001d08 <vTaskSuspend+0xa0>
                    pxCurrentTCB = NULL;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <vTaskSuspend+0xb0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e7d1      	b.n	8001cac <vTaskSuspend+0x44>
                    vTaskSwitchContext();
 8001d08:	f7ff ff68 	bl	8001bdc <vTaskSwitchContext>
    }
 8001d0c:	e7ce      	b.n	8001cac <vTaskSuspend+0x44>
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	20000224 	.word	0x20000224
 8001d14:	20000220 	.word	0x20000220
 8001d18:	20000154 	.word	0x20000154
 8001d1c:	200001c8 	.word	0x200001c8
 8001d20:	200001c4 	.word	0x200001c4

08001d24 <vTaskPlaceOnEventList>:
{
 8001d24:	b510      	push	{r4, lr}
 8001d26:	000c      	movs	r4, r1
    configASSERT( pxEventList );
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d009      	beq.n	8001d40 <vTaskPlaceOnEventList+0x1c>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <vTaskPlaceOnEventList+0x20>)
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	3118      	adds	r1, #24
 8001d32:	f7ff f997 	bl	8001064 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d36:	2101      	movs	r1, #1
 8001d38:	0020      	movs	r0, r4
 8001d3a:	f7ff fd7f 	bl	800183c <prvAddCurrentTaskToDelayedList>
}
 8001d3e:	bd10      	pop	{r4, pc}
    configASSERT( pxEventList );
 8001d40:	b672      	cpsid	i
 8001d42:	e7fe      	b.n	8001d42 <vTaskPlaceOnEventList+0x1e>
 8001d44:	20000154 	.word	0x20000154

08001d48 <vTaskPlaceOnEventListRestricted>:
    {
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	000d      	movs	r5, r1
 8001d4c:	0014      	movs	r4, r2
        configASSERT( pxEventList );
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d00d      	beq.n	8001d6e <vTaskPlaceOnEventListRestricted+0x26>
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <vTaskPlaceOnEventListRestricted+0x2c>)
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	3118      	adds	r1, #24
 8001d58:	f7ff f979 	bl	800104e <vListInsertEnd>
        if( xWaitIndefinitely != pdFALSE )
 8001d5c:	2c00      	cmp	r4, #0
 8001d5e:	d001      	beq.n	8001d64 <vTaskPlaceOnEventListRestricted+0x1c>
            xTicksToWait = portMAX_DELAY;
 8001d60:	2501      	movs	r5, #1
 8001d62:	426d      	negs	r5, r5
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d64:	0021      	movs	r1, r4
 8001d66:	0028      	movs	r0, r5
 8001d68:	f7ff fd68 	bl	800183c <prvAddCurrentTaskToDelayedList>
    }
 8001d6c:	bd70      	pop	{r4, r5, r6, pc}
        configASSERT( pxEventList );
 8001d6e:	b672      	cpsid	i
 8001d70:	e7fe      	b.n	8001d70 <vTaskPlaceOnEventListRestricted+0x28>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	20000154 	.word	0x20000154

08001d78 <xTaskRemoveFromEventList>:
{
 8001d78:	b570      	push	{r4, r5, r6, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d7a:	68c3      	ldr	r3, [r0, #12]
 8001d7c:	68dc      	ldr	r4, [r3, #12]
    configASSERT( pxUnblockedTCB );
 8001d7e:	2c00      	cmp	r4, #0
 8001d80:	d026      	beq.n	8001dd0 <xTaskRemoveFromEventList+0x58>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d82:	0025      	movs	r5, r4
 8001d84:	3518      	adds	r5, #24
 8001d86:	0028      	movs	r0, r5
 8001d88:	f7ff f983 	bl	8001092 <uxListRemove>
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <xTaskRemoveFromEventList+0x6c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d11f      	bne.n	8001dd4 <xTaskRemoveFromEventList+0x5c>
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d94:	1d25      	adds	r5, r4, #4
 8001d96:	0028      	movs	r0, r5
 8001d98:	f7ff f97b 	bl	8001092 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d9e:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <xTaskRemoveFromEventList+0x70>)
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <xTaskRemoveFromEventList+0x32>
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <xTaskRemoveFromEventList+0x70>)
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	0098      	lsls	r0, r3, #2
 8001dac:	18c0      	adds	r0, r0, r3
 8001dae:	0080      	lsls	r0, r0, #2
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <xTaskRemoveFromEventList+0x74>)
 8001db2:	1818      	adds	r0, r3, r0
 8001db4:	0029      	movs	r1, r5
 8001db6:	f7ff f94a 	bl	800104e <vListInsertEnd>
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <xTaskRemoveFromEventList+0x78>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d90b      	bls.n	8001dde <xTaskRemoveFromEventList+0x66>
        xYieldPending = pdTRUE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <xTaskRemoveFromEventList+0x7c>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
        xReturn = pdTRUE;
 8001dcc:	2001      	movs	r0, #1
}
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( pxUnblockedTCB );
 8001dd0:	b672      	cpsid	i
 8001dd2:	e7fe      	b.n	8001dd2 <xTaskRemoveFromEventList+0x5a>
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001dd4:	0029      	movs	r1, r5
 8001dd6:	4808      	ldr	r0, [pc, #32]	; (8001df8 <xTaskRemoveFromEventList+0x80>)
 8001dd8:	f7ff f939 	bl	800104e <vListInsertEnd>
 8001ddc:	e7ed      	b.n	8001dba <xTaskRemoveFromEventList+0x42>
        xReturn = pdFALSE;
 8001dde:	2000      	movs	r0, #0
    return xReturn;
 8001de0:	e7f5      	b.n	8001dce <xTaskRemoveFromEventList+0x56>
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	200001c8 	.word	0x200001c8
 8001de8:	200001d0 	.word	0x200001d0
 8001dec:	20000160 	.word	0x20000160
 8001df0:	20000154 	.word	0x20000154
 8001df4:	2000023c 	.word	0x2000023c
 8001df8:	2000020c 	.word	0x2000020c

08001dfc <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <vTaskInternalSetTimeOutState+0x10>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e02:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <vTaskInternalSetTimeOutState+0x14>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6043      	str	r3, [r0, #4]
}
 8001e08:	4770      	bx	lr
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	20000204 	.word	0x20000204
 8001e10:	20000238 	.word	0x20000238

08001e14 <xTaskCheckForTimeOut>:
{
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	0004      	movs	r4, r0
 8001e18:	000d      	movs	r5, r1
    configASSERT( pxTimeOut );
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d015      	beq.n	8001e4a <xTaskCheckForTimeOut+0x36>
    configASSERT( pxTicksToWait );
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	d015      	beq.n	8001e4e <xTaskCheckForTimeOut+0x3a>
    taskENTER_CRITICAL();
 8001e22:	f000 fab5 	bl	8002390 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <xTaskCheckForTimeOut+0x64>)
 8001e28:	6819      	ldr	r1, [r3, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	1ac8      	subs	r0, r1, r3
            if( *pxTicksToWait == portMAX_DELAY )
 8001e2e:	682a      	ldr	r2, [r5, #0]
 8001e30:	1c56      	adds	r6, r2, #1
 8001e32:	d01c      	beq.n	8001e6e <xTaskCheckForTimeOut+0x5a>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e34:	4e11      	ldr	r6, [pc, #68]	; (8001e7c <xTaskCheckForTimeOut+0x68>)
 8001e36:	6836      	ldr	r6, [r6, #0]
 8001e38:	6827      	ldr	r7, [r4, #0]
 8001e3a:	42b7      	cmp	r7, r6
 8001e3c:	d009      	beq.n	8001e52 <xTaskCheckForTimeOut+0x3e>
 8001e3e:	428b      	cmp	r3, r1
 8001e40:	d807      	bhi.n	8001e52 <xTaskCheckForTimeOut+0x3e>
            *pxTicksToWait = ( TickType_t ) 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	602b      	str	r3, [r5, #0]
            xReturn = pdTRUE;
 8001e46:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8001e48:	e012      	b.n	8001e70 <xTaskCheckForTimeOut+0x5c>
    configASSERT( pxTimeOut );
 8001e4a:	b672      	cpsid	i
 8001e4c:	e7fe      	b.n	8001e4c <xTaskCheckForTimeOut+0x38>
    configASSERT( pxTicksToWait );
 8001e4e:	b672      	cpsid	i
 8001e50:	e7fe      	b.n	8001e50 <xTaskCheckForTimeOut+0x3c>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e52:	4282      	cmp	r2, r0
 8001e54:	d803      	bhi.n	8001e5e <xTaskCheckForTimeOut+0x4a>
            *pxTicksToWait = ( TickType_t ) 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	602b      	str	r3, [r5, #0]
            xReturn = pdTRUE;
 8001e5a:	2401      	movs	r4, #1
 8001e5c:	e008      	b.n	8001e70 <xTaskCheckForTimeOut+0x5c>
            *pxTicksToWait -= xElapsedTime;
 8001e5e:	1a5b      	subs	r3, r3, r1
 8001e60:	189b      	adds	r3, r3, r2
 8001e62:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001e64:	0020      	movs	r0, r4
 8001e66:	f7ff ffc9 	bl	8001dfc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	e000      	b.n	8001e70 <xTaskCheckForTimeOut+0x5c>
                xReturn = pdFALSE;
 8001e6e:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8001e70:	f000 fa9a 	bl	80023a8 <vPortExitCritical>
}
 8001e74:	0020      	movs	r0, r4
 8001e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e78:	20000238 	.word	0x20000238
 8001e7c:	20000204 	.word	0x20000204

08001e80 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8001e80:	4b01      	ldr	r3, [pc, #4]	; (8001e88 <vTaskMissedYield+0x8>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	4770      	bx	lr
 8001e88:	2000023c 	.word	0x2000023c

08001e8c <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <xTaskGetSchedulerState+0x1c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <xTaskGetSchedulerState+0x18>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <xTaskGetSchedulerState+0x20>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <xTaskGetSchedulerState+0x14>
                xReturn = taskSCHEDULER_SUSPENDED;
 8001e9c:	2000      	movs	r0, #0
        return xReturn;
 8001e9e:	e002      	b.n	8001ea6 <xTaskGetSchedulerState+0x1a>
                xReturn = taskSCHEDULER_RUNNING;
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	e000      	b.n	8001ea6 <xTaskGetSchedulerState+0x1a>
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001ea4:	2001      	movs	r0, #1
    }
 8001ea6:	4770      	bx	lr
 8001ea8:	20000220 	.word	0x20000220
 8001eac:	200001c8 	.word	0x200001c8

08001eb0 <xTaskPriorityDisinherit>:
    {
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	1e04      	subs	r4, r0, #0
        if( pxMutexHolder != NULL )
 8001eb4:	d02d      	beq.n	8001f12 <xTaskPriorityDisinherit+0x62>
            configASSERT( pxTCB == pxCurrentTCB );
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <xTaskPriorityDisinherit+0x6c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4283      	cmp	r3, r0
 8001ebc:	d001      	beq.n	8001ec2 <xTaskPriorityDisinherit+0x12>
 8001ebe:	b672      	cpsid	i
 8001ec0:	e7fe      	b.n	8001ec0 <xTaskPriorityDisinherit+0x10>
            configASSERT( pxTCB->uxMutexesHeld );
 8001ec2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <xTaskPriorityDisinherit+0x1c>
 8001ec8:	b672      	cpsid	i
 8001eca:	e7fe      	b.n	8001eca <xTaskPriorityDisinherit+0x1a>
            ( pxTCB->uxMutexesHeld )--;
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	64c3      	str	r3, [r0, #76]	; 0x4c
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001ed0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001ed2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ed4:	428a      	cmp	r2, r1
 8001ed6:	d01e      	beq.n	8001f16 <xTaskPriorityDisinherit+0x66>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <xTaskPriorityDisinherit+0x30>
        BaseType_t xReturn = pdFALSE;
 8001edc:	2000      	movs	r0, #0
        return xReturn;
 8001ede:	e019      	b.n	8001f14 <xTaskPriorityDisinherit+0x64>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ee0:	1d05      	adds	r5, r0, #4
 8001ee2:	0028      	movs	r0, r5
 8001ee4:	f7ff f8d5 	bl	8001092 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ee8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001eea:	62e3      	str	r3, [r4, #44]	; 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eec:	2205      	movs	r2, #5
 8001eee:	1ad2      	subs	r2, r2, r3
 8001ef0:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <xTaskPriorityDisinherit+0x70>)
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <xTaskPriorityDisinherit+0x4e>
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <xTaskPriorityDisinherit+0x70>)
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	009a      	lsls	r2, r3, #2
 8001f00:	18d3      	adds	r3, r2, r3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4807      	ldr	r0, [pc, #28]	; (8001f24 <xTaskPriorityDisinherit+0x74>)
 8001f06:	18c0      	adds	r0, r0, r3
 8001f08:	0029      	movs	r1, r5
 8001f0a:	f7ff f8a0 	bl	800104e <vListInsertEnd>
                    xReturn = pdTRUE;
 8001f0e:	2001      	movs	r0, #1
 8001f10:	e000      	b.n	8001f14 <xTaskPriorityDisinherit+0x64>
        BaseType_t xReturn = pdFALSE;
 8001f12:	2000      	movs	r0, #0
    }
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
        BaseType_t xReturn = pdFALSE;
 8001f16:	2000      	movs	r0, #0
 8001f18:	e7fc      	b.n	8001f14 <xTaskPriorityDisinherit+0x64>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	20000154 	.word	0x20000154
 8001f20:	200001d0 	.word	0x200001d0
 8001f24:	20000160 	.word	0x20000160

08001f28 <prvGetNextExpireTime>:
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <prvGetNextExpireTime+0x20>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	6813      	ldr	r3, [r2, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <prvGetNextExpireTime+0x18>
 8001f32:	3301      	adds	r3, #1
 8001f34:	6003      	str	r3, [r0, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d104      	bne.n	8001f44 <prvGetNextExpireTime+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f3a:	68d3      	ldr	r3, [r2, #12]
 8001f3c:	6818      	ldr	r0, [r3, #0]
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
        }

        return xNextExpireTime;
    }
 8001f3e:	4770      	bx	lr
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001f40:	2300      	movs	r3, #0
 8001f42:	e7f7      	b.n	8001f34 <prvGetNextExpireTime+0xc>
            xNextExpireTime = ( TickType_t ) 0U;
 8001f44:	2000      	movs	r0, #0
        return xNextExpireTime;
 8001f46:	e7fa      	b.n	8001f3e <prvGetNextExpireTime+0x16>
 8001f48:	20000240 	.word	0x20000240

08001f4c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001f4c:	b510      	push	{r4, lr}
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001f4e:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f50:	6100      	str	r0, [r0, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001f52:	4291      	cmp	r1, r2
 8001f54:	d80c      	bhi.n	8001f70 <prvInsertTimerInActiveList+0x24>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	6983      	ldr	r3, [r0, #24]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d301      	bcc.n	8001f62 <prvInsertTimerInActiveList+0x16>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001f5e:	2001      	movs	r0, #1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
 8001f60:	bd10      	pop	{r4, pc}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f62:	1d01      	adds	r1, r0, #4
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <prvInsertTimerInActiveList+0x40>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	f7ff f87c 	bl	8001064 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	e7f7      	b.n	8001f60 <prvInsertTimerInActiveList+0x14>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d201      	bcs.n	8001f78 <prvInsertTimerInActiveList+0x2c>
 8001f74:	4299      	cmp	r1, r3
 8001f76:	d206      	bcs.n	8001f86 <prvInsertTimerInActiveList+0x3a>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f78:	1d01      	adds	r1, r0, #4
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <prvInsertTimerInActiveList+0x44>)
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	f7ff f871 	bl	8001064 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
 8001f82:	2000      	movs	r0, #0
 8001f84:	e7ec      	b.n	8001f60 <prvInsertTimerInActiveList+0x14>
                xProcessTimerNow = pdTRUE;
 8001f86:	2001      	movs	r0, #1
        return xProcessTimerNow;
 8001f88:	e7ea      	b.n	8001f60 <prvInsertTimerInActiveList+0x14>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	20000244 	.word	0x20000244
 8001f90:	20000240 	.word	0x20000240

08001f94 <prvCheckForValidListAndQueue>:
        pxOverflowTimerList = pxTemp;
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001f94:	b570      	push	{r4, r5, r6, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001f96:	f000 f9fb 	bl	8002390 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <prvCheckForValidListAndQueue+0x48>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <prvCheckForValidListAndQueue+0x14>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001fa2:	f000 fa01 	bl	80023a8 <vPortExitCritical>
    }
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &xActiveTimerList1 );
 8001fa8:	4d0d      	ldr	r5, [pc, #52]	; (8001fe0 <prvCheckForValidListAndQueue+0x4c>)
 8001faa:	0028      	movs	r0, r5
 8001fac:	f7ff f841 	bl	8001032 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001fb0:	4c0c      	ldr	r4, [pc, #48]	; (8001fe4 <prvCheckForValidListAndQueue+0x50>)
 8001fb2:	0020      	movs	r0, r4
 8001fb4:	f7ff f83d 	bl	8001032 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <prvCheckForValidListAndQueue+0x54>)
 8001fba:	601d      	str	r5, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <prvCheckForValidListAndQueue+0x58>)
 8001fbe:	601c      	str	r4, [r3, #0]
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	210c      	movs	r1, #12
 8001fc4:	200a      	movs	r0, #10
 8001fc6:	f7ff f964 	bl	8001292 <xQueueGenericCreate>
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <prvCheckForValidListAndQueue+0x48>)
 8001fcc:	6018      	str	r0, [r3, #0]
                        if( xTimerQueue != NULL )
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d0e7      	beq.n	8001fa2 <prvCheckForValidListAndQueue+0xe>
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001fd2:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <prvCheckForValidListAndQueue+0x5c>)
 8001fd4:	f7ff faf0 	bl	80015b8 <vQueueAddToRegistry>
 8001fd8:	e7e3      	b.n	8001fa2 <prvCheckForValidListAndQueue+0xe>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	20000274 	.word	0x20000274
 8001fe0:	20000248 	.word	0x20000248
 8001fe4:	2000025c 	.word	0x2000025c
 8001fe8:	20000240 	.word	0x20000240
 8001fec:	20000244 	.word	0x20000244
 8001ff0:	08003f4c 	.word	0x08003f4c

08001ff4 <xTimerCreateTimerTask>:
    {
 8001ff4:	b500      	push	{lr}
 8001ff6:	b083      	sub	sp, #12
        prvCheckForValidListAndQueue();
 8001ff8:	f7ff ffcc 	bl	8001f94 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <xTimerCreateTimerTask+0x30>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <xTimerCreateTimerTask+0x28>
                    xReturn = xTaskCreate( prvTimerTask,
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <xTimerCreateTimerTask+0x34>)
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	2302      	movs	r3, #2
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2300      	movs	r3, #0
 800200e:	2264      	movs	r2, #100	; 0x64
 8002010:	4906      	ldr	r1, [pc, #24]	; (800202c <xTimerCreateTimerTask+0x38>)
 8002012:	4807      	ldr	r0, [pc, #28]	; (8002030 <xTimerCreateTimerTask+0x3c>)
 8002014:	f7ff fc50 	bl	80018b8 <xTaskCreate>
        configASSERT( xReturn );
 8002018:	2800      	cmp	r0, #0
 800201a:	d101      	bne.n	8002020 <xTimerCreateTimerTask+0x2c>
 800201c:	b672      	cpsid	i
 800201e:	e7fe      	b.n	800201e <xTimerCreateTimerTask+0x2a>
    }
 8002020:	b003      	add	sp, #12
 8002022:	bd00      	pop	{pc}
 8002024:	20000274 	.word	0x20000274
 8002028:	20000278 	.word	0x20000278
 800202c:	08003f54 	.word	0x08003f54
 8002030:	080022d9 	.word	0x080022d9

08002034 <xTimerGenericCommand>:
    {
 8002034:	b530      	push	{r4, r5, lr}
 8002036:	b085      	sub	sp, #20
 8002038:	001c      	movs	r4, r3
        configASSERT( xTimer );
 800203a:	2800      	cmp	r0, #0
 800203c:	d014      	beq.n	8002068 <xTimerGenericCommand+0x34>
        if( xTimerQueue != NULL )
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <xTimerGenericCommand+0x5c>)
 8002040:	681d      	ldr	r5, [r3, #0]
 8002042:	2d00      	cmp	r5, #0
 8002044:	d022      	beq.n	800208c <xTimerGenericCommand+0x58>
            xMessage.xMessageID = xCommandID;
 8002046:	9101      	str	r1, [sp, #4]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002048:	9202      	str	r2, [sp, #8]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800204a:	9003      	str	r0, [sp, #12]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800204c:	2905      	cmp	r1, #5
 800204e:	dc15      	bgt.n	800207c <xTimerGenericCommand+0x48>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002050:	f7ff ff1c 	bl	8001e8c <xTaskGetSchedulerState>
 8002054:	2802      	cmp	r0, #2
 8002056:	d009      	beq.n	800206c <xTimerGenericCommand+0x38>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <xTimerGenericCommand+0x5c>)
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	2300      	movs	r3, #0
 800205e:	2200      	movs	r2, #0
 8002060:	a901      	add	r1, sp, #4
 8002062:	f7ff f940 	bl	80012e6 <xQueueGenericSend>
 8002066:	e00f      	b.n	8002088 <xTimerGenericCommand+0x54>
        configASSERT( xTimer );
 8002068:	b672      	cpsid	i
 800206a:	e7fe      	b.n	800206a <xTimerGenericCommand+0x36>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <xTimerGenericCommand+0x5c>)
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	2300      	movs	r3, #0
 8002072:	9a08      	ldr	r2, [sp, #32]
 8002074:	a901      	add	r1, sp, #4
 8002076:	f7ff f936 	bl	80012e6 <xQueueGenericSend>
 800207a:	e005      	b.n	8002088 <xTimerGenericCommand+0x54>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800207c:	2300      	movs	r3, #0
 800207e:	0022      	movs	r2, r4
 8002080:	a901      	add	r1, sp, #4
 8002082:	0028      	movs	r0, r5
 8002084:	f7ff f9ba 	bl	80013fc <xQueueGenericSendFromISR>
    }
 8002088:	b005      	add	sp, #20
 800208a:	bd30      	pop	{r4, r5, pc}
        BaseType_t xReturn = pdFAIL;
 800208c:	2000      	movs	r0, #0
        return xReturn;
 800208e:	e7fb      	b.n	8002088 <xTimerGenericCommand+0x54>
 8002090:	20000274 	.word	0x20000274

08002094 <prvSwitchTimerLists>:
    {
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	b082      	sub	sp, #8
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <prvSwitchTimerLists+0x68>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	2a00      	cmp	r2, #0
 80020a0:	d024      	beq.n	80020ec <prvSwitchTimerLists+0x58>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	681e      	ldr	r6, [r3, #0]
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020a6:	68dc      	ldr	r4, [r3, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80020a8:	1d25      	adds	r5, r4, #4
 80020aa:	0028      	movs	r0, r5
 80020ac:	f7fe fff1 	bl	8001092 <uxListRemove>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80020b0:	0020      	movs	r0, r4
 80020b2:	6a23      	ldr	r3, [r4, #32]
 80020b4:	4798      	blx	r3
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80020b6:	2328      	movs	r3, #40	; 0x28
 80020b8:	5ce3      	ldrb	r3, [r4, r3]
 80020ba:	075b      	lsls	r3, r3, #29
 80020bc:	d5ec      	bpl.n	8002098 <prvSwitchTimerLists+0x4>
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80020be:	69a3      	ldr	r3, [r4, #24]
 80020c0:	199b      	adds	r3, r3, r6
                if( xReloadTime > xNextExpireTime )
 80020c2:	429e      	cmp	r6, r3
 80020c4:	d207      	bcs.n	80020d6 <prvSwitchTimerLists+0x42>
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80020c6:	6063      	str	r3, [r4, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80020c8:	6124      	str	r4, [r4, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <prvSwitchTimerLists+0x68>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	0029      	movs	r1, r5
 80020d0:	f7fe ffc8 	bl	8001064 <vListInsert>
 80020d4:	e7e0      	b.n	8002098 <prvSwitchTimerLists+0x4>
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80020d6:	2300      	movs	r3, #0
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	0032      	movs	r2, r6
 80020dc:	2100      	movs	r1, #0
 80020de:	0020      	movs	r0, r4
 80020e0:	f7ff ffa8 	bl	8002034 <xTimerGenericCommand>
                    configASSERT( xResult );
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d1d7      	bne.n	8002098 <prvSwitchTimerLists+0x4>
 80020e8:	b672      	cpsid	i
 80020ea:	e7fe      	b.n	80020ea <prvSwitchTimerLists+0x56>
        pxCurrentTimerList = pxOverflowTimerList;
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <prvSwitchTimerLists+0x6c>)
 80020ee:	4903      	ldr	r1, [pc, #12]	; (80020fc <prvSwitchTimerLists+0x68>)
 80020f0:	6810      	ldr	r0, [r2, #0]
 80020f2:	6008      	str	r0, [r1, #0]
        pxOverflowTimerList = pxTemp;
 80020f4:	6013      	str	r3, [r2, #0]
    }
 80020f6:	b002      	add	sp, #8
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	20000240 	.word	0x20000240
 8002100:	20000244 	.word	0x20000244

08002104 <prvSampleTimeNow>:
    {
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	0005      	movs	r5, r0
        xTimeNow = xTaskGetTickCount();
 8002108:	f7ff fc74 	bl	80019f4 <xTaskGetTickCount>
 800210c:	0004      	movs	r4, r0
        if( xTimeNow < xLastTime )
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <prvSampleTimeNow+0x28>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4283      	cmp	r3, r0
 8002114:	d805      	bhi.n	8002122 <prvSampleTimeNow+0x1e>
            *pxTimerListsWereSwitched = pdFALSE;
 8002116:	2300      	movs	r3, #0
 8002118:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <prvSampleTimeNow+0x28>)
 800211c:	601c      	str	r4, [r3, #0]
    }
 800211e:	0020      	movs	r0, r4
 8002120:	bd70      	pop	{r4, r5, r6, pc}
            prvSwitchTimerLists();
 8002122:	f7ff ffb7 	bl	8002094 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002126:	2301      	movs	r3, #1
 8002128:	602b      	str	r3, [r5, #0]
 800212a:	e7f6      	b.n	800211a <prvSampleTimeNow+0x16>
 800212c:	20000270 	.word	0x20000270

08002130 <prvProcessExpiredTimer>:
    {
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	0005      	movs	r5, r0
 8002136:	000e      	movs	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <prvProcessExpiredTimer+0x58>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002140:	1d20      	adds	r0, r4, #4
 8002142:	f7fe ffa6 	bl	8001092 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002146:	2328      	movs	r3, #40	; 0x28
 8002148:	5ce3      	ldrb	r3, [r4, r3]
 800214a:	075a      	lsls	r2, r3, #29
 800214c:	d408      	bmi.n	8002160 <prvProcessExpiredTimer+0x30>
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800214e:	2201      	movs	r2, #1
 8002150:	4393      	bics	r3, r2
 8002152:	3227      	adds	r2, #39	; 0x27
 8002154:	54a3      	strb	r3, [r4, r2]
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002156:	6a23      	ldr	r3, [r4, #32]
 8002158:	0020      	movs	r0, r4
 800215a:	4798      	blx	r3
    }
 800215c:	b002      	add	sp, #8
 800215e:	bd70      	pop	{r4, r5, r6, pc}
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002160:	69a3      	ldr	r3, [r4, #24]
 8002162:	1959      	adds	r1, r3, r5
 8002164:	002b      	movs	r3, r5
 8002166:	0032      	movs	r2, r6
 8002168:	0020      	movs	r0, r4
 800216a:	f7ff feef 	bl	8001f4c <prvInsertTimerInActiveList>
 800216e:	2800      	cmp	r0, #0
 8002170:	d0f1      	beq.n	8002156 <prvProcessExpiredTimer+0x26>
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002172:	2300      	movs	r3, #0
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	002a      	movs	r2, r5
 8002178:	2100      	movs	r1, #0
 800217a:	0020      	movs	r0, r4
 800217c:	f7ff ff5a 	bl	8002034 <xTimerGenericCommand>
                configASSERT( xResult );
 8002180:	2800      	cmp	r0, #0
 8002182:	d1e8      	bne.n	8002156 <prvProcessExpiredTimer+0x26>
 8002184:	b672      	cpsid	i
 8002186:	e7fe      	b.n	8002186 <prvProcessExpiredTimer+0x56>
 8002188:	20000240 	.word	0x20000240

0800218c <prvProcessTimerOrBlockTask>:
    {
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	0004      	movs	r4, r0
 8002192:	000d      	movs	r5, r1
        vTaskSuspendAll();
 8002194:	f7ff fc26 	bl	80019e4 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002198:	a801      	add	r0, sp, #4
 800219a:	f7ff ffb3 	bl	8002104 <prvSampleTimeNow>
 800219e:	0006      	movs	r6, r0
            if( xTimerListsWereSwitched == pdFALSE )
 80021a0:	9b01      	ldr	r3, [sp, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d123      	bne.n	80021ee <prvProcessTimerOrBlockTask+0x62>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80021a6:	2d00      	cmp	r5, #0
 80021a8:	d101      	bne.n	80021ae <prvProcessTimerOrBlockTask+0x22>
 80021aa:	42a0      	cmp	r0, r4
 80021ac:	d213      	bcs.n	80021d6 <prvProcessTimerOrBlockTask+0x4a>
                    if( xListWasEmpty != pdFALSE )
 80021ae:	2d00      	cmp	r5, #0
 80021b0:	d005      	beq.n	80021be <prvProcessTimerOrBlockTask+0x32>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <prvProcessTimerOrBlockTask+0x68>)
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d113      	bne.n	80021e4 <prvProcessTimerOrBlockTask+0x58>
 80021bc:	2501      	movs	r5, #1
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80021be:	1ba1      	subs	r1, r4, r6
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <prvProcessTimerOrBlockTask+0x6c>)
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	002a      	movs	r2, r5
 80021c6:	f7ff fa09 	bl	80015dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80021ca:	f7ff fc83 	bl	8001ad4 <xTaskResumeAll>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d00a      	beq.n	80021e8 <prvProcessTimerOrBlockTask+0x5c>
    }
 80021d2:	b002      	add	sp, #8
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
                    ( void ) xTaskResumeAll();
 80021d6:	f7ff fc7d 	bl	8001ad4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80021da:	0031      	movs	r1, r6
 80021dc:	0020      	movs	r0, r4
 80021de:	f7ff ffa7 	bl	8002130 <prvProcessExpiredTimer>
 80021e2:	e7f6      	b.n	80021d2 <prvProcessTimerOrBlockTask+0x46>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80021e4:	001d      	movs	r5, r3
 80021e6:	e7ea      	b.n	80021be <prvProcessTimerOrBlockTask+0x32>
                        portYIELD_WITHIN_API();
 80021e8:	f000 f8c6 	bl	8002378 <vPortYield>
 80021ec:	e7f1      	b.n	80021d2 <prvProcessTimerOrBlockTask+0x46>
                ( void ) xTaskResumeAll();
 80021ee:	f7ff fc71 	bl	8001ad4 <xTaskResumeAll>
    }
 80021f2:	e7ee      	b.n	80021d2 <prvProcessTimerOrBlockTask+0x46>
 80021f4:	20000244 	.word	0x20000244
 80021f8:	20000274 	.word	0x20000274

080021fc <prvProcessReceivedCommands>:
    {
 80021fc:	b510      	push	{r4, lr}
 80021fe:	b086      	sub	sp, #24
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002200:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <prvProcessReceivedCommands+0xd4>)
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	2200      	movs	r2, #0
 8002206:	a903      	add	r1, sp, #12
 8002208:	f7ff f94f 	bl	80014aa <xQueueReceive>
 800220c:	2800      	cmp	r0, #0
 800220e:	d05d      	beq.n	80022cc <prvProcessReceivedCommands+0xd0>
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002210:	9b03      	ldr	r3, [sp, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	dbf4      	blt.n	8002200 <prvProcessReceivedCommands+0x4>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002216:	9c05      	ldr	r4, [sp, #20]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002218:	6963      	ldr	r3, [r4, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <prvProcessReceivedCommands+0x28>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800221e:	1d20      	adds	r0, r4, #4
 8002220:	f7fe ff37 	bl	8001092 <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002224:	a802      	add	r0, sp, #8
 8002226:	f7ff ff6d 	bl	8002104 <prvSampleTimeNow>
                switch( xMessage.xMessageID )
 800222a:	9903      	ldr	r1, [sp, #12]
 800222c:	2909      	cmp	r1, #9
 800222e:	d8e7      	bhi.n	8002200 <prvProcessReceivedCommands+0x4>
 8002230:	0089      	lsls	r1, r1, #2
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <prvProcessReceivedCommands+0xd8>)
 8002234:	5859      	ldr	r1, [r3, r1]
 8002236:	468f      	mov	pc, r1
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002238:	2228      	movs	r2, #40	; 0x28
 800223a:	5ca3      	ldrb	r3, [r4, r2]
 800223c:	2101      	movs	r1, #1
 800223e:	430b      	orrs	r3, r1
 8002240:	54a3      	strb	r3, [r4, r2]
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002242:	9904      	ldr	r1, [sp, #16]
 8002244:	69a3      	ldr	r3, [r4, #24]
 8002246:	469c      	mov	ip, r3
 8002248:	4461      	add	r1, ip
 800224a:	9b04      	ldr	r3, [sp, #16]
 800224c:	0002      	movs	r2, r0
 800224e:	0020      	movs	r0, r4
 8002250:	f7ff fe7c 	bl	8001f4c <prvInsertTimerInActiveList>
 8002254:	2800      	cmp	r0, #0
 8002256:	d0d3      	beq.n	8002200 <prvProcessReceivedCommands+0x4>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002258:	0020      	movs	r0, r4
 800225a:	6a23      	ldr	r3, [r4, #32]
 800225c:	4798      	blx	r3
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800225e:	2328      	movs	r3, #40	; 0x28
 8002260:	5ce3      	ldrb	r3, [r4, r3]
 8002262:	075b      	lsls	r3, r3, #29
 8002264:	d5cc      	bpl.n	8002200 <prvProcessReceivedCommands+0x4>
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002266:	9a04      	ldr	r2, [sp, #16]
 8002268:	69a3      	ldr	r3, [r4, #24]
 800226a:	469c      	mov	ip, r3
 800226c:	4462      	add	r2, ip
 800226e:	2300      	movs	r3, #0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2100      	movs	r1, #0
 8002274:	0020      	movs	r0, r4
 8002276:	f7ff fedd 	bl	8002034 <xTimerGenericCommand>
                                configASSERT( xResult );
 800227a:	2800      	cmp	r0, #0
 800227c:	d1c0      	bne.n	8002200 <prvProcessReceivedCommands+0x4>
 800227e:	b672      	cpsid	i
 8002280:	e7fe      	b.n	8002280 <prvProcessReceivedCommands+0x84>
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002282:	2228      	movs	r2, #40	; 0x28
 8002284:	5ca3      	ldrb	r3, [r4, r2]
 8002286:	2101      	movs	r1, #1
 8002288:	438b      	bics	r3, r1
 800228a:	54a3      	strb	r3, [r4, r2]
                        break;
 800228c:	e7b8      	b.n	8002200 <prvProcessReceivedCommands+0x4>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800228e:	2228      	movs	r2, #40	; 0x28
 8002290:	5ca3      	ldrb	r3, [r4, r2]
 8002292:	2101      	movs	r1, #1
 8002294:	430b      	orrs	r3, r1
 8002296:	54a3      	strb	r3, [r4, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002298:	9904      	ldr	r1, [sp, #16]
 800229a:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800229c:	2900      	cmp	r1, #0
 800229e:	d006      	beq.n	80022ae <prvProcessReceivedCommands+0xb2>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80022a0:	1809      	adds	r1, r1, r0
 80022a2:	0003      	movs	r3, r0
 80022a4:	0002      	movs	r2, r0
 80022a6:	0020      	movs	r0, r4
 80022a8:	f7ff fe50 	bl	8001f4c <prvInsertTimerInActiveList>
                        break;
 80022ac:	e7a8      	b.n	8002200 <prvProcessReceivedCommands+0x4>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80022ae:	b672      	cpsid	i
 80022b0:	e7fe      	b.n	80022b0 <prvProcessReceivedCommands+0xb4>
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80022b2:	2328      	movs	r3, #40	; 0x28
 80022b4:	5ce3      	ldrb	r3, [r4, r3]
 80022b6:	079a      	lsls	r2, r3, #30
 80022b8:	d504      	bpl.n	80022c4 <prvProcessReceivedCommands+0xc8>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80022ba:	2201      	movs	r2, #1
 80022bc:	4393      	bics	r3, r2
 80022be:	3227      	adds	r2, #39	; 0x27
 80022c0:	54a3      	strb	r3, [r4, r2]
 80022c2:	e79d      	b.n	8002200 <prvProcessReceivedCommands+0x4>
                                    vPortFree( pxTimer );
 80022c4:	0020      	movs	r0, r4
 80022c6:	f000 f9cd 	bl	8002664 <vPortFree>
 80022ca:	e799      	b.n	8002200 <prvProcessReceivedCommands+0x4>
    }
 80022cc:	b006      	add	sp, #24
 80022ce:	bd10      	pop	{r4, pc}
 80022d0:	20000274 	.word	0x20000274
 80022d4:	08003f5c 	.word	0x08003f5c

080022d8 <prvTimerTask>:
    {
 80022d8:	b500      	push	{lr}
 80022da:	b083      	sub	sp, #12
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022dc:	a801      	add	r0, sp, #4
 80022de:	f7ff fe23 	bl	8001f28 <prvGetNextExpireTime>
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80022e2:	9901      	ldr	r1, [sp, #4]
 80022e4:	f7ff ff52 	bl	800218c <prvProcessTimerOrBlockTask>
            prvProcessReceivedCommands();
 80022e8:	f7ff ff88 	bl	80021fc <prvProcessReceivedCommands>
        for( ; ; )
 80022ec:	e7f6      	b.n	80022dc <prvTimerTask+0x4>
	...

080022f0 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80022f0:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	9301      	str	r3, [sp, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <prvTaskExitError+0x20>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	d001      	beq.n	8002302 <prvTaskExitError+0x12>
 80022fe:	b672      	cpsid	i
 8002300:	e7fe      	b.n	8002300 <prvTaskExitError+0x10>
    portDISABLE_INTERRUPTS();
 8002302:	b672      	cpsid	i

    while( ulDummy == 0 )
 8002304:	9b01      	ldr	r3, [sp, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0fc      	beq.n	8002304 <prvTaskExitError+0x14>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800230a:	b002      	add	sp, #8
 800230c:	4770      	bx	lr
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	20000060 	.word	0x20000060
	...

08002320 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <pxCurrentTCBConst2>)
 8002322:	6813      	ldr	r3, [r2, #0]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	3020      	adds	r0, #32
 8002328:	f380 8809 	msr	PSP, r0
 800232c:	2002      	movs	r0, #2
 800232e:	f380 8814 	msr	CONTROL, r0
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002338:	46ae      	mov	lr, r5
 800233a:	bc08      	pop	{r3}
 800233c:	bc04      	pop	{r2}
 800233e:	b662      	cpsie	i
 8002340:	4718      	bx	r3
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46c0      	nop			; (mov r8, r8)

08002350 <pxCurrentTCBConst2>:
 8002350:	20000154 	.word	0x20000154

08002354 <pxPortInitialiseStack>:
{
 8002354:	b510      	push	{r4, lr}
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8002356:	1f03      	subs	r3, r0, #4
 8002358:	2480      	movs	r4, #128	; 0x80
 800235a:	0464      	lsls	r4, r4, #17
 800235c:	601c      	str	r4, [r3, #0]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800235e:	3b04      	subs	r3, #4
 8002360:	6019      	str	r1, [r3, #0]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8002362:	3b04      	subs	r3, #4
 8002364:	4902      	ldr	r1, [pc, #8]	; (8002370 <pxPortInitialiseStack+0x1c>)
 8002366:	6019      	str	r1, [r3, #0]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8002368:	3b14      	subs	r3, #20
 800236a:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800236c:	3840      	subs	r0, #64	; 0x40
}
 800236e:	bd10      	pop	{r4, pc}
 8002370:	080022f1 	.word	0x080022f1

08002374 <SVC_Handler>:
}
 8002374:	4770      	bx	lr
	...

08002378 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <vPortYield+0x14>)
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	0552      	lsls	r2, r2, #21
 800237e:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002380:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002384:	f3bf 8f6f 	isb	sy
}
 8002388:	4770      	bx	lr
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	e000ed04 	.word	0xe000ed04

08002390 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 8002390:	b672      	cpsid	i
    uxCriticalNesting++;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <vPortEnterCritical+0x14>)
 8002394:	6813      	ldr	r3, [r2, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	6013      	str	r3, [r2, #0]
    __asm volatile ( "dsb" ::: "memory" );
 800239a:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800239e:	f3bf 8f6f 	isb	sy
}
 80023a2:	4770      	bx	lr
 80023a4:	20000060 	.word	0x20000060

080023a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <vPortExitCritical+0x1c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <vPortExitCritical+0xc>
 80023b0:	b672      	cpsid	i
 80023b2:	e7fe      	b.n	80023b2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80023b4:	3b01      	subs	r3, #1
 80023b6:	4a03      	ldr	r2, [pc, #12]	; (80023c4 <vPortExitCritical+0x1c>)
 80023b8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d100      	bne.n	80023c0 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
 80023be:	b662      	cpsie	i
    }
}
 80023c0:	4770      	bx	lr
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000060 	.word	0x20000060

080023c8 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80023c8:	f3ef 8010 	mrs	r0, PRIMASK
 80023cc:	b672      	cpsid	i
 80023ce:	4770      	bx	lr

080023d0 <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80023d0:	f380 8810 	msr	PRIMASK, r0
 80023d4:	4770      	bx	lr
	...

080023e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80023e0:	f3ef 8009 	mrs	r0, PSP
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <pxCurrentTCBConst>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	3820      	subs	r0, #32
 80023ea:	6010      	str	r0, [r2, #0]
 80023ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80023ee:	4644      	mov	r4, r8
 80023f0:	464d      	mov	r5, r9
 80023f2:	4656      	mov	r6, sl
 80023f4:	465f      	mov	r7, fp
 80023f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80023f8:	b508      	push	{r3, lr}
 80023fa:	b672      	cpsid	i
 80023fc:	f7ff fbee 	bl	8001bdc <vTaskSwitchContext>
 8002400:	b662      	cpsie	i
 8002402:	bc0c      	pop	{r2, r3}
 8002404:	6811      	ldr	r1, [r2, #0]
 8002406:	6808      	ldr	r0, [r1, #0]
 8002408:	3010      	adds	r0, #16
 800240a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800240c:	46a0      	mov	r8, r4
 800240e:	46a9      	mov	r9, r5
 8002410:	46b2      	mov	sl, r6
 8002412:	46bb      	mov	fp, r7
 8002414:	f380 8809 	msr	PSP, r0
 8002418:	3820      	subs	r0, #32
 800241a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800241c:	4718      	bx	r3
 800241e:	46c0      	nop			; (mov r8, r8)

08002420 <pxCurrentTCBConst>:
 8002420:	20000154 	.word	0x20000154

08002424 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002424:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002426:	f7ff ffcf 	bl	80023c8 <ulSetInterruptMaskFromISR>
 800242a:	0004      	movs	r4, r0
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800242c:	f7ff fae8 	bl	8001a00 <xTaskIncrementTick>
 8002430:	2800      	cmp	r0, #0
 8002432:	d003      	beq.n	800243c <SysTick_Handler+0x18>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <SysTick_Handler+0x20>)
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	0552      	lsls	r2, r2, #21
 800243a:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800243c:	0020      	movs	r0, r4
 800243e:	f7ff ffc7 	bl	80023d0 <vClearInterruptMaskFromISR>
}
 8002442:	bd10      	pop	{r4, pc}
 8002444:	e000ed04 	.word	0xe000ed04

08002448 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002448:	b510      	push	{r4, lr}
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800244a:	4c08      	ldr	r4, [pc, #32]	; (800246c <vPortSetupTimerInterrupt+0x24>)
 800244c:	2300      	movs	r3, #0
 800244e:	6023      	str	r3, [r4, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002450:	4a07      	ldr	r2, [pc, #28]	; (8002470 <vPortSetupTimerInterrupt+0x28>)
 8002452:	6013      	str	r3, [r2, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <vPortSetupTimerInterrupt+0x2c>)
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	21fa      	movs	r1, #250	; 0xfa
 800245a:	0089      	lsls	r1, r1, #2
 800245c:	f7fd fe54 	bl	8000108 <__udivsi3>
 8002460:	3801      	subs	r0, #1
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <vPortSetupTimerInterrupt+0x30>)
 8002464:	6018      	str	r0, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002466:	2307      	movs	r3, #7
 8002468:	6023      	str	r3, [r4, #0]
}
 800246a:	bd10      	pop	{r4, pc}
 800246c:	e000e010 	.word	0xe000e010
 8002470:	e000e018 	.word	0xe000e018
 8002474:	20000000 	.word	0x20000000
 8002478:	e000e014 	.word	0xe000e014

0800247c <xPortStartScheduler>:
{
 800247c:	b510      	push	{r4, lr}
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <xPortStartScheduler+0x34>)
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	22ff      	movs	r2, #255	; 0xff
 8002484:	0412      	lsls	r2, r2, #16
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	22ff      	movs	r2, #255	; 0xff
 800248e:	0612      	lsls	r2, r2, #24
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
    vPortSetupTimerInterrupt();
 8002494:	f7ff ffd8 	bl	8002448 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <xPortStartScheduler+0x38>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
    vPortStartFirstTask();
 800249e:	f7ff ff3f 	bl	8002320 <vPortStartFirstTask>
    vTaskSwitchContext();
 80024a2:	f7ff fb9b 	bl	8001bdc <vTaskSwitchContext>
    prvTaskExitError();
 80024a6:	f7ff ff23 	bl	80022f0 <prvTaskExitError>
}
 80024aa:	2000      	movs	r0, #0
 80024ac:	bd10      	pop	{r4, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	e000ed20 	.word	0xe000ed20
 80024b4:	20000060 	.word	0x20000060

080024b8 <prvHeapInit>:
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80024b8:	4a11      	ldr	r2, [pc, #68]	; (8002500 <prvHeapInit+0x48>)

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024ba:	0753      	lsls	r3, r2, #29
 80024bc:	d01e      	beq.n	80024fc <prvHeapInit+0x44>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024be:	1dd1      	adds	r1, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024c0:	2307      	movs	r3, #7
 80024c2:	4399      	bics	r1, r3
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <prvHeapInit+0x4c>)
 80024c6:	1a5b      	subs	r3, r3, r1
 80024c8:	189b      	adds	r3, r3, r2
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024ca:	000a      	movs	r2, r1

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024cc:	480e      	ldr	r0, [pc, #56]	; (8002508 <prvHeapInit+0x50>)
 80024ce:	6002      	str	r2, [r0, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80024d0:	2100      	movs	r1, #0
 80024d2:	6041      	str	r1, [r0, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80024d4:	18d3      	adds	r3, r2, r3
    uxAddress -= xHeapStructSize;
 80024d6:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80024d8:	2007      	movs	r0, #7
 80024da:	4383      	bics	r3, r0
    pxEnd = ( void * ) uxAddress;
 80024dc:	480b      	ldr	r0, [pc, #44]	; (800250c <prvHeapInit+0x54>)
 80024de:	6003      	str	r3, [r0, #0]
    pxEnd->xBlockSize = 0;
 80024e0:	6059      	str	r1, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80024e2:	6019      	str	r1, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024e4:	1a99      	subs	r1, r3, r2
 80024e6:	6051      	str	r1, [r2, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024e8:	6013      	str	r3, [r2, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <prvHeapInit+0x58>)
 80024ec:	6019      	str	r1, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <prvHeapInit+0x5c>)
 80024f0:	6019      	str	r1, [r3, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <prvHeapInit+0x60>)
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	0612      	lsls	r2, r2, #24
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	4770      	bx	lr
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80024fc:	4b01      	ldr	r3, [pc, #4]	; (8002504 <prvHeapInit+0x4c>)
 80024fe:	e7e5      	b.n	80024cc <prvHeapInit+0x14>
 8002500:	20000280 	.word	0x20000280
 8002504:	00000672 	.word	0x00000672
 8002508:	20000908 	.word	0x20000908
 800250c:	2000027c 	.word	0x2000027c
 8002510:	200008fc 	.word	0x200008fc
 8002514:	200008f8 	.word	0x200008f8
 8002518:	200008f4 	.word	0x200008f4

0800251c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800251c:	b510      	push	{r4, lr}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <prvInsertBlockIntoFreeList+0x4c>)
 8002520:	001a      	movs	r2, r3
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4283      	cmp	r3, r0
 8002526:	d3fb      	bcc.n	8002520 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002528:	6851      	ldr	r1, [r2, #4]
 800252a:	1854      	adds	r4, r2, r1
 800252c:	4284      	cmp	r4, r0
 800252e:	d008      	beq.n	8002542 <prvInsertBlockIntoFreeList+0x26>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002530:	6841      	ldr	r1, [r0, #4]
 8002532:	1844      	adds	r4, r0, r1
 8002534:	42a3      	cmp	r3, r4
 8002536:	d009      	beq.n	800254c <prvInsertBlockIntoFreeList+0x30>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002538:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800253a:	4290      	cmp	r0, r2
 800253c:	d000      	beq.n	8002540 <prvInsertBlockIntoFreeList+0x24>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800253e:	6010      	str	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002540:	bd10      	pop	{r4, pc}
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002542:	6840      	ldr	r0, [r0, #4]
 8002544:	1809      	adds	r1, r1, r0
 8002546:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8002548:	0010      	movs	r0, r2
 800254a:	e7f1      	b.n	8002530 <prvInsertBlockIntoFreeList+0x14>
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800254c:	4c07      	ldr	r4, [pc, #28]	; (800256c <prvInsertBlockIntoFreeList+0x50>)
 800254e:	6824      	ldr	r4, [r4, #0]
 8002550:	42a3      	cmp	r3, r4
 8002552:	d006      	beq.n	8002562 <prvInsertBlockIntoFreeList+0x46>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	18c9      	adds	r1, r1, r3
 8002558:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6003      	str	r3, [r0, #0]
 8002560:	e7eb      	b.n	800253a <prvInsertBlockIntoFreeList+0x1e>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002562:	6004      	str	r4, [r0, #0]
 8002564:	e7e9      	b.n	800253a <prvInsertBlockIntoFreeList+0x1e>
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	20000908 	.word	0x20000908
 800256c:	2000027c 	.word	0x2000027c

08002570 <pvPortMalloc>:
{
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	0004      	movs	r4, r0
    vTaskSuspendAll();
 8002574:	f7ff fa36 	bl	80019e4 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <pvPortMalloc+0xdc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <pvPortMalloc+0x48>
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002580:	4b33      	ldr	r3, [pc, #204]	; (8002650 <pvPortMalloc+0xe0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4223      	tst	r3, r4
 8002586:	d14d      	bne.n	8002624 <pvPortMalloc+0xb4>
            if( ( xWantedSize > 0 ) && 
 8002588:	1e63      	subs	r3, r4, #1
 800258a:	330a      	adds	r3, #10
 800258c:	d84c      	bhi.n	8002628 <pvPortMalloc+0xb8>
                xWantedSize += xHeapStructSize;
 800258e:	0022      	movs	r2, r4
 8002590:	3208      	adds	r2, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002592:	0763      	lsls	r3, r4, #29
 8002594:	d007      	beq.n	80025a6 <pvPortMalloc+0x36>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002596:	2307      	movs	r3, #7
 8002598:	0011      	movs	r1, r2
 800259a:	4399      	bics	r1, r3
 800259c:	000b      	movs	r3, r1
 800259e:	3308      	adds	r3, #8
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d948      	bls.n	8002636 <pvPortMalloc+0xc6>
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025a4:	001a      	movs	r2, r3
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d047      	beq.n	800263a <pvPortMalloc+0xca>
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <pvPortMalloc+0xe4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d345      	bcc.n	800263e <pvPortMalloc+0xce>
                pxBlock = xStart.pxNextFreeBlock;
 80025b2:	4929      	ldr	r1, [pc, #164]	; (8002658 <pvPortMalloc+0xe8>)
 80025b4:	680c      	ldr	r4, [r1, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025b6:	e004      	b.n	80025c2 <pvPortMalloc+0x52>
            prvHeapInit();
 80025b8:	f7ff ff7e 	bl	80024b8 <prvHeapInit>
 80025bc:	e7e0      	b.n	8002580 <pvPortMalloc+0x10>
                    pxPreviousBlock = pxBlock;
 80025be:	0021      	movs	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
 80025c0:	001c      	movs	r4, r3
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025c2:	6863      	ldr	r3, [r4, #4]
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d202      	bcs.n	80025ce <pvPortMalloc+0x5e>
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f7      	bne.n	80025be <pvPortMalloc+0x4e>
                if( pxBlock != pxEnd )
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <pvPortMalloc+0xdc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	42a3      	cmp	r3, r4
 80025d4:	d035      	beq.n	8002642 <pvPortMalloc+0xd2>
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80025d6:	680d      	ldr	r5, [r1, #0]
 80025d8:	3508      	adds	r5, #8
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	600b      	str	r3, [r1, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80025de:	6863      	ldr	r3, [r4, #4]
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d908      	bls.n	80025f8 <pvPortMalloc+0x88>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80025e6:	18a0      	adds	r0, r4, r2
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025e8:	0741      	lsls	r1, r0, #29
 80025ea:	d001      	beq.n	80025f0 <pvPortMalloc+0x80>
 80025ec:	b672      	cpsid	i
 80025ee:	e7fe      	b.n	80025ee <pvPortMalloc+0x7e>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80025f0:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80025f2:	6062      	str	r2, [r4, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80025f4:	f7ff ff92 	bl	800251c <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80025f8:	6862      	ldr	r2, [r4, #4]
 80025fa:	4916      	ldr	r1, [pc, #88]	; (8002654 <pvPortMalloc+0xe4>)
 80025fc:	680b      	ldr	r3, [r1, #0]
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	600b      	str	r3, [r1, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002602:	4916      	ldr	r1, [pc, #88]	; (800265c <pvPortMalloc+0xec>)
 8002604:	6809      	ldr	r1, [r1, #0]
 8002606:	428b      	cmp	r3, r1
 8002608:	d201      	bcs.n	800260e <pvPortMalloc+0x9e>
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800260a:	4914      	ldr	r1, [pc, #80]	; (800265c <pvPortMalloc+0xec>)
 800260c:	600b      	str	r3, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <pvPortMalloc+0xe0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	6063      	str	r3, [r4, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	6023      	str	r3, [r4, #0]
                    xNumberOfSuccessfulAllocations++;
 800261a:	4a11      	ldr	r2, [pc, #68]	; (8002660 <pvPortMalloc+0xf0>)
 800261c:	6813      	ldr	r3, [r2, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e002      	b.n	800262a <pvPortMalloc+0xba>
    void * pvReturn = NULL;
 8002624:	2500      	movs	r5, #0
 8002626:	e000      	b.n	800262a <pvPortMalloc+0xba>
 8002628:	2500      	movs	r5, #0
    ( void ) xTaskResumeAll();
 800262a:	f7ff fa53 	bl	8001ad4 <xTaskResumeAll>
    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800262e:	076b      	lsls	r3, r5, #29
 8002630:	d009      	beq.n	8002646 <pvPortMalloc+0xd6>
 8002632:	b672      	cpsid	i
 8002634:	e7fe      	b.n	8002634 <pvPortMalloc+0xc4>
    void * pvReturn = NULL;
 8002636:	2500      	movs	r5, #0
 8002638:	e7f7      	b.n	800262a <pvPortMalloc+0xba>
 800263a:	2500      	movs	r5, #0
 800263c:	e7f5      	b.n	800262a <pvPortMalloc+0xba>
 800263e:	2500      	movs	r5, #0
 8002640:	e7f3      	b.n	800262a <pvPortMalloc+0xba>
 8002642:	2500      	movs	r5, #0
 8002644:	e7f1      	b.n	800262a <pvPortMalloc+0xba>
}
 8002646:	0028      	movs	r0, r5
 8002648:	bd70      	pop	{r4, r5, r6, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	2000027c 	.word	0x2000027c
 8002650:	200008f4 	.word	0x200008f4
 8002654:	200008f8 	.word	0x200008f8
 8002658:	20000908 	.word	0x20000908
 800265c:	200008fc 	.word	0x200008fc
 8002660:	20000900 	.word	0x20000900

08002664 <vPortFree>:
{
 8002664:	b570      	push	{r4, r5, r6, lr}
    if( pv != NULL )
 8002666:	2800      	cmp	r0, #0
 8002668:	d024      	beq.n	80026b4 <vPortFree+0x50>
        puc -= xHeapStructSize;
 800266a:	0005      	movs	r5, r0
 800266c:	3d08      	subs	r5, #8
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800266e:	686b      	ldr	r3, [r5, #4]
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <vPortFree+0x54>)
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	421a      	tst	r2, r3
 8002676:	d101      	bne.n	800267c <vPortFree+0x18>
 8002678:	b672      	cpsid	i
 800267a:	e7fe      	b.n	800267a <vPortFree+0x16>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800267c:	0001      	movs	r1, r0
 800267e:	3908      	subs	r1, #8
 8002680:	6809      	ldr	r1, [r1, #0]
 8002682:	2900      	cmp	r1, #0
 8002684:	d001      	beq.n	800268a <vPortFree+0x26>
 8002686:	b672      	cpsid	i
 8002688:	e7fe      	b.n	8002688 <vPortFree+0x24>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800268a:	3808      	subs	r0, #8
 800268c:	0004      	movs	r4, r0
 800268e:	4393      	bics	r3, r2
 8002690:	6043      	str	r3, [r0, #4]
                vTaskSuspendAll();
 8002692:	f7ff f9a7 	bl	80019e4 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002696:	6863      	ldr	r3, [r4, #4]
 8002698:	4a08      	ldr	r2, [pc, #32]	; (80026bc <vPortFree+0x58>)
 800269a:	6811      	ldr	r1, [r2, #0]
 800269c:	468c      	mov	ip, r1
 800269e:	4463      	add	r3, ip
 80026a0:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026a2:	0028      	movs	r0, r5
 80026a4:	f7ff ff3a 	bl	800251c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80026a8:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <vPortFree+0x5c>)
 80026aa:	6813      	ldr	r3, [r2, #0]
 80026ac:	3301      	adds	r3, #1
 80026ae:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 80026b0:	f7ff fa10 	bl	8001ad4 <xTaskResumeAll>
}
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	200008f4 	.word	0x200008f4
 80026bc:	200008f8 	.word	0x200008f8
 80026c0:	20000904 	.word	0x20000904

080026c4 <delay>:
uint8_t calculateXorChecksum(uint8_t* data, uint8_t len);
void uint8_to_str(uint8_t value, char *str);

extern usart1_handle;

void delay(uint32_t usec){
 80026c4:	b082      	sub	sp, #8
	volatile uint32_t count = ((usec * 16) /4) / 4;
 80026c6:	0100      	lsls	r0, r0, #4
 80026c8:	0900      	lsrs	r0, r0, #4
 80026ca:	9001      	str	r0, [sp, #4]
	for(volatile int i=0 ; i < count; ++i ){
 80026cc:	2300      	movs	r3, #0
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	e005      	b.n	80026de <delay+0x1a>
		 count--;
 80026d2:	9b01      	ldr	r3, [sp, #4]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	9301      	str	r3, [sp, #4]
	for(volatile int i=0 ; i < count; ++i ){
 80026d8:	9b00      	ldr	r3, [sp, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	9a00      	ldr	r2, [sp, #0]
 80026e0:	9b01      	ldr	r3, [sp, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d3f5      	bcc.n	80026d2 <delay+0xe>
	}
}
 80026e6:	b002      	add	sp, #8
 80026e8:	4770      	bx	lr

080026ea <calculateXorChecksum>:
//	while( USART_SendDataIT(&usart1_handle,(uint8_t*)str, strlen(str)) != USART_READY);
//	delay(3000000);
//	va_end(args);
//}

uint8_t calculateXorChecksum(uint8_t* data, uint8_t len) {
 80026ea:	b510      	push	{r4, lr}
 80026ec:	0004      	movs	r4, r0
    uint8_t checksum = 0;

    for (uint8_t i = 0; i < len; i++) {
 80026ee:	2300      	movs	r3, #0
    uint8_t checksum = 0;
 80026f0:	2000      	movs	r0, #0
    for (uint8_t i = 0; i < len; i++) {
 80026f2:	e003      	b.n	80026fc <calculateXorChecksum+0x12>
        checksum ^= data[i];
 80026f4:	5ce2      	ldrb	r2, [r4, r3]
 80026f6:	4050      	eors	r0, r2
    for (uint8_t i = 0; i < len; i++) {
 80026f8:	3301      	adds	r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d3f9      	bcc.n	80026f4 <calculateXorChecksum+0xa>
    }

    return checksum;
}
 8002700:	bd10      	pop	{r4, pc}

08002702 <encodeData>:

void encodeData(uint8_t* data, uint8_t len, uint8_t* encoded_data, uint8_t* encoded_len)
{
 8002702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002704:	46ce      	mov	lr, r9
 8002706:	4647      	mov	r7, r8
 8002708:	b580      	push	{r7, lr}
 800270a:	0006      	movs	r6, r0
 800270c:	000c      	movs	r4, r1
 800270e:	4691      	mov	r9, r2
 8002710:	4698      	mov	r8, r3
    uint8_t checksum = calculateXorChecksum(data, len);
 8002712:	f7ff ffea 	bl	80026ea <calculateXorChecksum>
    data[len] = checksum;
 8002716:	5530      	strb	r0, [r6, r4]
    len++;
 8002718:	3401      	adds	r4, #1
 800271a:	b2e2      	uxtb	r2, r4

    uint8_t *encode = encoded_data;
    uint8_t *codep = encode++;
 800271c:	464b      	mov	r3, r9
 800271e:	3301      	adds	r3, #1
 8002720:	464f      	mov	r7, r9
    uint8_t code = 1;

    for (uint8_t i = 0; i < len; ++i)
 8002722:	2100      	movs	r1, #0
    uint8_t code = 1;
 8002724:	2401      	movs	r4, #1
    for (uint8_t i = 0; i < len; ++i)
 8002726:	e004      	b.n	8002732 <encodeData+0x30>

        if (!data[i] || code == 0xFF)
        {
            *codep = code;
            code = 1;
            codep = encode;
 8002728:	001f      	movs	r7, r3
            if (!data[i] || (i < len - 1))
                ++encode;
 800272a:	3301      	adds	r3, #1
            code = 1;
 800272c:	2401      	movs	r4, #1
    for (uint8_t i = 0; i < len; ++i)
 800272e:	3101      	adds	r1, #1
 8002730:	b2c9      	uxtb	r1, r1
 8002732:	4291      	cmp	r1, r2
 8002734:	d216      	bcs.n	8002764 <encodeData+0x62>
        if (data[i])
 8002736:	1875      	adds	r5, r6, r1
 8002738:	5c70      	ldrb	r0, [r6, r1]
 800273a:	2800      	cmp	r0, #0
 800273c:	d003      	beq.n	8002746 <encodeData+0x44>
            *encode++ = data[i];
 800273e:	7018      	strb	r0, [r3, #0]
            ++code;
 8002740:	3401      	adds	r4, #1
 8002742:	b2e4      	uxtb	r4, r4
            *encode++ = data[i];
 8002744:	3301      	adds	r3, #1
        if (!data[i] || code == 0xFF)
 8002746:	7828      	ldrb	r0, [r5, #0]
 8002748:	2800      	cmp	r0, #0
 800274a:	d001      	beq.n	8002750 <encodeData+0x4e>
 800274c:	2cff      	cmp	r4, #255	; 0xff
 800274e:	d1ee      	bne.n	800272e <encodeData+0x2c>
            *codep = code;
 8002750:	703c      	strb	r4, [r7, #0]
            if (!data[i] || (i < len - 1))
 8002752:	7828      	ldrb	r0, [r5, #0]
 8002754:	2800      	cmp	r0, #0
 8002756:	d0e7      	beq.n	8002728 <encodeData+0x26>
 8002758:	1e50      	subs	r0, r2, #1
 800275a:	4281      	cmp	r1, r0
 800275c:	dbe4      	blt.n	8002728 <encodeData+0x26>
            codep = encode;
 800275e:	001f      	movs	r7, r3
            code = 1;
 8002760:	2401      	movs	r4, #1
 8002762:	e7e4      	b.n	800272e <encodeData+0x2c>
        }
    }

    *codep = code;
 8002764:	703c      	strb	r4, [r7, #0]
    *encode++ = 0;
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	2100      	movs	r1, #0
 800276a:	7019      	strb	r1, [r3, #0]
    *encoded_len = (uint8_t)(encode - encoded_data);
 800276c:	464b      	mov	r3, r9
 800276e:	1ad7      	subs	r7, r2, r3
 8002770:	4643      	mov	r3, r8
 8002772:	701f      	strb	r7, [r3, #0]
}
 8002774:	bcc0      	pop	{r6, r7}
 8002776:	46b9      	mov	r9, r7
 8002778:	46b0      	mov	r8, r6
 800277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800277c <suspend_systick_tim>:
    serial_log(msg);
}

void suspend_systick_tim()
{
    CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800277c:	4a02      	ldr	r2, [pc, #8]	; (8002788 <suspend_systick_tim+0xc>)
 800277e:	6813      	ldr	r3, [r2, #0]
 8002780:	2102      	movs	r1, #2
 8002782:	438b      	bics	r3, r1
 8002784:	6013      	str	r3, [r2, #0]
}
 8002786:	4770      	bx	lr
 8002788:	e000e010 	.word	0xe000e010

0800278c <resume_systick_tim>:

void resume_systick_tim()
{
    SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800278c:	4a02      	ldr	r2, [pc, #8]	; (8002798 <resume_systick_tim+0xc>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	2102      	movs	r1, #2
 8002792:	430b      	orrs	r3, r1
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4770      	bx	lr
 8002798:	e000e010 	.word	0xe000e010

0800279c <TIM_Base_SetConfig>:


void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
    uint32_t tmpcr1;
    tmpcr1 = TIMx->CR1;
 800279c:	6803      	ldr	r3, [r0, #0]

    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800279e:	2270      	movs	r2, #112	; 0x70
 80027a0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80027a2:	684a      	ldr	r2, [r1, #4]
 80027a4:	4313      	orrs	r3, r2

    tmpcr1 &= ~TIM_CR1_CKD;
 80027a6:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <TIM_Base_SetConfig+0x2c>)
 80027a8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027aa:	68ca      	ldr	r2, [r1, #12]
 80027ac:	4313      	orrs	r3, r2

    MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	4393      	bics	r3, r2
 80027b2:	694a      	ldr	r2, [r1, #20]
 80027b4:	4313      	orrs	r3, r2
    TIMx->CR1 = tmpcr1;
 80027b6:	6003      	str	r3, [r0, #0]

    TIMx->ARR = (uint32_t)Structure->Period;
 80027b8:	688b      	ldr	r3, [r1, #8]
 80027ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    TIMx->PSC = Structure->Prescaler;
 80027bc:	680b      	ldr	r3, [r1, #0]
 80027be:	6283      	str	r3, [r0, #40]	; 0x28

    TIMx->EGR = TIM_EGR_UG;
 80027c0:	2301      	movs	r3, #1
 80027c2:	6143      	str	r3, [r0, #20]
}
 80027c4:	4770      	bx	lr
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	fffffcff 	.word	0xfffffcff

080027cc <TIM_OC1_SetConfig>:

void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b530      	push	{r4, r5, lr}
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ce:	6a03      	ldr	r3, [r0, #32]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4393      	bics	r3, r2
 80027d4:	6203      	str	r3, [r0, #32]
    tmpccer = TIMx->CCER;
 80027d6:	6a03      	ldr	r3, [r0, #32]
    tmpcr2 = TIMx->CR2;
 80027d8:	6844      	ldr	r4, [r0, #4]
    tmpccmrx = TIMx->CCMR1;
 80027da:	6982      	ldr	r2, [r0, #24]

    tmpccmrx &= ~TIM_CCMR1_OC1M;
    tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027dc:	2573      	movs	r5, #115	; 0x73
 80027de:	43aa      	bics	r2, r5
    tmpccmrx |= OC_Config->OCMode;
 80027e0:	680d      	ldr	r5, [r1, #0]
 80027e2:	432a      	orrs	r2, r5

    tmpccer &= ~TIM_CCER_CC1P;
 80027e4:	2502      	movs	r5, #2
 80027e6:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCPolarity;
 80027e8:	688d      	ldr	r5, [r1, #8]
 80027ea:	432b      	orrs	r3, r5

    TIMx->CR2 = tmpcr2;
 80027ec:	6044      	str	r4, [r0, #4]
    TIMx->CCMR1 = tmpccmrx;
 80027ee:	6182      	str	r2, [r0, #24]
    TIMx->CCR1 = OC_Config->Pulse;
 80027f0:	684a      	ldr	r2, [r1, #4]
 80027f2:	6342      	str	r2, [r0, #52]	; 0x34
    TIMx->CCER = tmpccer;
 80027f4:	6203      	str	r3, [r0, #32]
}
 80027f6:	bd30      	pop	{r4, r5, pc}

080027f8 <TIM_OC2_SetConfig>:
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027f8:	b530      	push	{r4, r5, lr}
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    TIMx->CCER &= ~TIM_CCER_CC2E;
 80027fa:	6a03      	ldr	r3, [r0, #32]
 80027fc:	2210      	movs	r2, #16
 80027fe:	4393      	bics	r3, r2
 8002800:	6203      	str	r3, [r0, #32]
    tmpccer = TIMx->CCER;
 8002802:	6a03      	ldr	r3, [r0, #32]
    tmpcr2 = TIMx->CR2;
 8002804:	6845      	ldr	r5, [r0, #4]
    tmpccmrx = TIMx->CCMR1;
 8002806:	6982      	ldr	r2, [r0, #24]

    tmpccmrx &= ~TIM_CCMR1_OC2M;
    tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002808:	4c08      	ldr	r4, [pc, #32]	; (800282c <TIM_OC2_SetConfig+0x34>)
 800280a:	4014      	ands	r4, r2
    tmpccmrx |= (OC_Config->OCMode << 8U);
 800280c:	680a      	ldr	r2, [r1, #0]
 800280e:	0212      	lsls	r2, r2, #8
 8002810:	4322      	orrs	r2, r4

    tmpccer &= ~TIM_CCER_CC2P;
 8002812:	2420      	movs	r4, #32
 8002814:	43a3      	bics	r3, r4
 8002816:	001c      	movs	r4, r3
    tmpccer |= (OC_Config->OCPolarity << 4U);
 8002818:	688b      	ldr	r3, [r1, #8]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	4323      	orrs	r3, r4

    TIMx->CR2 = tmpcr2;
 800281e:	6045      	str	r5, [r0, #4]
    TIMx->CCMR1 = tmpccmrx;
 8002820:	6182      	str	r2, [r0, #24]
    TIMx->CCR2 = OC_Config->Pulse;
 8002822:	684a      	ldr	r2, [r1, #4]
 8002824:	6382      	str	r2, [r0, #56]	; 0x38
    TIMx->CCER = tmpccer;
 8002826:	6203      	str	r3, [r0, #32]
}
 8002828:	bd30      	pop	{r4, r5, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	ffff8cff 	.word	0xffff8cff

08002830 <TIM_OC3_SetConfig>:

void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002830:	b530      	push	{r4, r5, lr}
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    TIMx->CCER &= ~TIM_CCER_CC3E;
 8002832:	6a03      	ldr	r3, [r0, #32]
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <TIM_OC3_SetConfig+0x30>)
 8002836:	4013      	ands	r3, r2
 8002838:	6203      	str	r3, [r0, #32]
    tmpccer = TIMx->CCER;
 800283a:	6a03      	ldr	r3, [r0, #32]
    tmpcr2 = TIMx->CR2;
 800283c:	6845      	ldr	r5, [r0, #4]
    tmpccmrx = TIMx->CCMR2;
 800283e:	69c2      	ldr	r2, [r0, #28]

    tmpccmrx &= ~TIM_CCMR2_OC3M;
    tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002840:	2473      	movs	r4, #115	; 0x73
 8002842:	43a2      	bics	r2, r4
    tmpccmrx |= OC_Config->OCMode;
 8002844:	680c      	ldr	r4, [r1, #0]
 8002846:	4322      	orrs	r2, r4

    tmpccer &= ~TIM_CCER_CC3P;
 8002848:	4c06      	ldr	r4, [pc, #24]	; (8002864 <TIM_OC3_SetConfig+0x34>)
 800284a:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCPolarity << 8U);
 800284c:	688b      	ldr	r3, [r1, #8]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	4323      	orrs	r3, r4

    TIMx->CR2 = tmpcr2;
 8002852:	6045      	str	r5, [r0, #4]
    TIMx->CCMR2 = tmpccmrx;
 8002854:	61c2      	str	r2, [r0, #28]
    TIMx->CCR3 = OC_Config->Pulse;
 8002856:	684a      	ldr	r2, [r1, #4]
 8002858:	63c2      	str	r2, [r0, #60]	; 0x3c
    TIMx->CCER = tmpccer;
 800285a:	6203      	str	r3, [r0, #32]
}
 800285c:	bd30      	pop	{r4, r5, pc}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	fffffeff 	.word	0xfffffeff
 8002864:	fffffdff 	.word	0xfffffdff

08002868 <TIM_OC4_SetConfig>:

void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b530      	push	{r4, r5, lr}
    uint32_t tmpccmrx;
    uint32_t tmpccer;
    uint32_t tmpcr2;

    TIMx->CCER &= ~TIM_CCER_CC4E;
 800286a:	6a03      	ldr	r3, [r0, #32]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <TIM_OC4_SetConfig+0x30>)
 800286e:	4013      	ands	r3, r2
 8002870:	6203      	str	r3, [r0, #32]
    tmpccer = TIMx->CCER;
 8002872:	6a03      	ldr	r3, [r0, #32]
    tmpcr2 = TIMx->CR2;
 8002874:	6845      	ldr	r5, [r0, #4]
    tmpccmrx = TIMx->CCMR2;
 8002876:	69c2      	ldr	r2, [r0, #28]

    tmpccmrx &= ~TIM_CCMR2_OC4M;
    tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002878:	4c08      	ldr	r4, [pc, #32]	; (800289c <TIM_OC4_SetConfig+0x34>)
 800287a:	4014      	ands	r4, r2
    tmpccmrx |= (OC_Config->OCMode << 8U);
 800287c:	680a      	ldr	r2, [r1, #0]
 800287e:	0212      	lsls	r2, r2, #8
 8002880:	4322      	orrs	r2, r4

    tmpccer &= ~TIM_CCER_CC4P;
 8002882:	4c07      	ldr	r4, [pc, #28]	; (80028a0 <TIM_OC4_SetConfig+0x38>)
 8002884:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCPolarity << 12U);
 8002886:	688b      	ldr	r3, [r1, #8]
 8002888:	031b      	lsls	r3, r3, #12
 800288a:	4323      	orrs	r3, r4

    TIMx->CR2 = tmpcr2;
 800288c:	6045      	str	r5, [r0, #4]
    TIMx->CCMR2 = tmpccmrx;
 800288e:	61c2      	str	r2, [r0, #28]
    TIMx->CCR4 = OC_Config->Pulse;
 8002890:	684a      	ldr	r2, [r1, #4]
 8002892:	6402      	str	r2, [r0, #64]	; 0x40
    TIMx->CCER = tmpccer;
 8002894:	6203      	str	r3, [r0, #32]
}
 8002896:	bd30      	pop	{r4, r5, pc}
 8002898:	ffffefff 	.word	0xffffefff
 800289c:	ffff8cff 	.word	0xffff8cff
 80028a0:	ffffdfff 	.word	0xffffdfff

080028a4 <TIM_PWM_ConfigChannel>:


void TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	0004      	movs	r4, r0
 80028a8:	000d      	movs	r5, r1
    switch (Channel)
 80028aa:	2a08      	cmp	r2, #8
 80028ac:	d043      	beq.n	8002936 <TIM_PWM_ConfigChannel+0x92>
 80028ae:	d818      	bhi.n	80028e2 <TIM_PWM_ConfigChannel+0x3e>
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d02d      	beq.n	8002910 <TIM_PWM_ConfigChannel+0x6c>
 80028b4:	2a04      	cmp	r2, #4
 80028b6:	d13d      	bne.n	8002934 <TIM_PWM_ConfigChannel+0x90>
            htim->Instance->CCMR1 |= sConfig->OCFastMode;
            break;
        }
        case TIM_CHANNEL_2:
        {
            TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028b8:	6800      	ldr	r0, [r0, #0]
 80028ba:	f7ff ff9d 	bl	80027f8 <TIM_OC2_SetConfig>
            htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028be:	6822      	ldr	r2, [r4, #0]
 80028c0:	6991      	ldr	r1, [r2, #24]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	430b      	orrs	r3, r1
 80028c8:	6193      	str	r3, [r2, #24]
            htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028ca:	6822      	ldr	r2, [r4, #0]
 80028cc:	6993      	ldr	r3, [r2, #24]
 80028ce:	4923      	ldr	r1, [pc, #140]	; (800295c <TIM_PWM_ConfigChannel+0xb8>)
 80028d0:	400b      	ands	r3, r1
 80028d2:	6193      	str	r3, [r2, #24]
            htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028d4:	6821      	ldr	r1, [r4, #0]
 80028d6:	698b      	ldr	r3, [r1, #24]
 80028d8:	692a      	ldr	r2, [r5, #16]
 80028da:	0212      	lsls	r2, r2, #8
 80028dc:	4313      	orrs	r3, r2
 80028de:	618b      	str	r3, [r1, #24]
            break;
 80028e0:	e028      	b.n	8002934 <TIM_PWM_ConfigChannel+0x90>
    switch (Channel)
 80028e2:	2a0c      	cmp	r2, #12
 80028e4:	d126      	bne.n	8002934 <TIM_PWM_ConfigChannel+0x90>
            htim->Instance->CCMR2 |= sConfig->OCFastMode;
            break;
        }
        case TIM_CHANNEL_4:
        {
            TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028e6:	6800      	ldr	r0, [r0, #0]
 80028e8:	f7ff ffbe 	bl	8002868 <TIM_OC4_SetConfig>
            htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ec:	6822      	ldr	r2, [r4, #0]
 80028ee:	69d1      	ldr	r1, [r2, #28]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	430b      	orrs	r3, r1
 80028f6:	61d3      	str	r3, [r2, #28]
            htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	69d3      	ldr	r3, [r2, #28]
 80028fc:	4917      	ldr	r1, [pc, #92]	; (800295c <TIM_PWM_ConfigChannel+0xb8>)
 80028fe:	400b      	ands	r3, r1
 8002900:	61d3      	str	r3, [r2, #28]
            htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002902:	6821      	ldr	r1, [r4, #0]
 8002904:	69cb      	ldr	r3, [r1, #28]
 8002906:	692a      	ldr	r2, [r5, #16]
 8002908:	0212      	lsls	r2, r2, #8
 800290a:	4313      	orrs	r3, r2
 800290c:	61cb      	str	r3, [r1, #28]
            break;
        }
        default:
            break;
    }
}
 800290e:	e011      	b.n	8002934 <TIM_PWM_ConfigChannel+0x90>
            TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002910:	6800      	ldr	r0, [r0, #0]
 8002912:	f7ff ff5b 	bl	80027cc <TIM_OC1_SetConfig>
            htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	6993      	ldr	r3, [r2, #24]
 800291a:	2108      	movs	r1, #8
 800291c:	430b      	orrs	r3, r1
 800291e:	6193      	str	r3, [r2, #24]
            htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	6993      	ldr	r3, [r2, #24]
 8002924:	3904      	subs	r1, #4
 8002926:	438b      	bics	r3, r1
 8002928:	6193      	str	r3, [r2, #24]
            htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800292a:	6822      	ldr	r2, [r4, #0]
 800292c:	6993      	ldr	r3, [r2, #24]
 800292e:	6929      	ldr	r1, [r5, #16]
 8002930:	430b      	orrs	r3, r1
 8002932:	6193      	str	r3, [r2, #24]
}
 8002934:	bd70      	pop	{r4, r5, r6, pc}
            TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002936:	6800      	ldr	r0, [r0, #0]
 8002938:	f7ff ff7a 	bl	8002830 <TIM_OC3_SetConfig>
            htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	69d3      	ldr	r3, [r2, #28]
 8002940:	2108      	movs	r1, #8
 8002942:	430b      	orrs	r3, r1
 8002944:	61d3      	str	r3, [r2, #28]
            htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	69d3      	ldr	r3, [r2, #28]
 800294a:	3904      	subs	r1, #4
 800294c:	438b      	bics	r3, r1
 800294e:	61d3      	str	r3, [r2, #28]
            htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002950:	6822      	ldr	r2, [r4, #0]
 8002952:	69d3      	ldr	r3, [r2, #28]
 8002954:	6929      	ldr	r1, [r5, #16]
 8002956:	430b      	orrs	r3, r1
 8002958:	61d3      	str	r3, [r2, #28]
            break;
 800295a:	e7eb      	b.n	8002934 <TIM_PWM_ConfigChannel+0x90>
 800295c:	fffffbff 	.word	0xfffffbff

08002960 <TIM_CCxChannelCmd>:

void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002960:	b510      	push	{r4, lr}
    uint32_t tmp;
    tmp = TIM_CCER_CC1E << (Channel & 0x1FU);
 8002962:	231f      	movs	r3, #31
 8002964:	4019      	ands	r1, r3
 8002966:	2401      	movs	r4, #1
 8002968:	408c      	lsls	r4, r1
    TIMx->CCER &= ~tmp;
 800296a:	6a03      	ldr	r3, [r0, #32]
 800296c:	43a3      	bics	r3, r4
 800296e:	6203      	str	r3, [r0, #32]
    TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU));
 8002970:	6a03      	ldr	r3, [r0, #32]
 8002972:	408a      	lsls	r2, r1
 8002974:	4313      	orrs	r3, r2
 8002976:	6203      	str	r3, [r0, #32]
}
 8002978:	bd10      	pop	{r4, pc}

0800297a <TIM_PWM_Start>:

void TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800297a:	b510      	push	{r4, lr}
 800297c:	0004      	movs	r4, r0
    uint32_t tmpsmcr;
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297e:	2201      	movs	r2, #1
 8002980:	6800      	ldr	r0, [r0, #0]
 8002982:	f7ff ffed 	bl	8002960 <TIM_CCxChannelCmd>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
    __HAL_TIM_ENABLE(htim);
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2101      	movs	r1, #1
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
}
 8002992:	bd10      	pop	{r4, pc}

08002994 <GPIO_Init_Base>:
#include "stm32f030x4_gpio_driver.h"
#include "generic_api.h"


void GPIO_Init_Base()
{
 8002994:	b510      	push	{r4, lr}
 8002996:	b084      	sub	sp, #16
	GPIO_Handle_t IO;

	IO.pGPIOx = GPIOB;
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <GPIO_Init_Base+0x64>)
 800299a:	9201      	str	r2, [sp, #4]
	GPIOB_PCLK_EN();
 800299c:	4c17      	ldr	r4, [pc, #92]	; (80029fc <GPIO_Init_Base+0x68>)
 800299e:	6961      	ldr	r1, [r4, #20]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	02db      	lsls	r3, r3, #11
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6163      	str	r3, [r4, #20]
	IO.pGPIOx->MODER = 0x8U;
 80029a8:	2308      	movs	r3, #8
 80029aa:	6013      	str	r3, [r2, #0]

	IO.pGPIOx->OSPEEDR = 0xCU;
 80029ac:	9b01      	ldr	r3, [sp, #4]
 80029ae:	220c      	movs	r2, #12
 80029b0:	609a      	str	r2, [r3, #8]

	IO.pGPIOx->OTYPER = 0x0U;
 80029b2:	2200      	movs	r2, #0
 80029b4:	605a      	str	r2, [r3, #4]

	IO.pGPIOx->AFR[0] = 0X10U;
 80029b6:	3210      	adds	r2, #16
 80029b8:	621a      	str	r2, [r3, #32]

    memset(&IO, 0, sizeof(IO));
 80029ba:	3a04      	subs	r2, #4
 80029bc:	2100      	movs	r1, #0
 80029be:	a801      	add	r0, sp, #4
 80029c0:	f001 fa91 	bl	8003ee6 <memset>

	IO.pGPIOx = GPIOA;
 80029c4:	2290      	movs	r2, #144	; 0x90
 80029c6:	05d2      	lsls	r2, r2, #23
 80029c8:	9201      	str	r2, [sp, #4]
	GPIOA_PCLK_EN();
 80029ca:	6961      	ldr	r1, [r4, #20]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	029b      	lsls	r3, r3, #10
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6163      	str	r3, [r4, #20]

	IO.pGPIOx->MODER = 0X2828A0A0;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <GPIO_Init_Base+0x6c>)
 80029d6:	6013      	str	r3, [r2, #0]

	IO.pGPIOx->OSPEEDR = 0xC3CF0E0U;
 80029d8:	9b01      	ldr	r3, [sp, #4]
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <GPIO_Init_Base+0x70>)
 80029dc:	609a      	str	r2, [r3, #8]

	IO.pGPIOx->PUPDR = 0x24000040;
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <GPIO_Init_Base+0x74>)
 80029e0:	60da      	str	r2, [r3, #12]

	IO.pGPIOx->OTYPER = 0x600U;
 80029e2:	22c0      	movs	r2, #192	; 0xc0
 80029e4:	00d2      	lsls	r2, r2, #3
 80029e6:	605a      	str	r2, [r3, #4]

	IO.pGPIOx->AFR[1] = 0x440U;
 80029e8:	3ac1      	subs	r2, #193	; 0xc1
 80029ea:	3aff      	subs	r2, #255	; 0xff
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

	IO.pGPIOx->AFR[0] = 0x11001100;
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <GPIO_Init_Base+0x78>)
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	b004      	add	sp, #16
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	48000400 	.word	0x48000400
 80029fc:	40021000 	.word	0x40021000
 8002a00:	2828a0a0 	.word	0x2828a0a0
 8002a04:	0c3cf0e0 	.word	0x0c3cf0e0
 8002a08:	24000040 	.word	0x24000040
 8002a0c:	11001100 	.word	0x11001100

08002a10 <GPIO_enable_IT_trigger>:

void GPIO_enable_IT_trigger()
{
	EXTI->RTSR = 0x20U;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <GPIO_enable_IT_trigger+0x1c>)
 8002a12:	2220      	movs	r2, #32
 8002a14:	609a      	str	r2, [r3, #8]
	EXTI->FTSR = 0x10U;
 8002a16:	3a10      	subs	r2, #16
 8002a18:	60da      	str	r2, [r3, #12]
	SYSCFG_PCLK_EN();
 8002a1a:	4905      	ldr	r1, [pc, #20]	; (8002a30 <GPIO_enable_IT_trigger+0x20>)
 8002a1c:	698a      	ldr	r2, [r1, #24]
 8002a1e:	2001      	movs	r0, #1
 8002a20:	4302      	orrs	r2, r0
 8002a22:	618a      	str	r2, [r1, #24]
	EXTI->IMR = 0xFF40030U;
 8002a24:	4a03      	ldr	r2, [pc, #12]	; (8002a34 <GPIO_enable_IT_trigger+0x24>)
 8002a26:	601a      	str	r2, [r3, #0]
}
 8002a28:	4770      	bx	lr
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40021000 	.word	0x40021000
 8002a34:	0ff40030 	.word	0x0ff40030

08002a38 <GPIO_ReadFromInputPin>:


uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8002a38:	6900      	ldr	r0, [r0, #16]
 8002a3a:	40c8      	lsrs	r0, r1
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	4018      	ands	r0, r3
	return value;
}
 8002a40:	4770      	bx	lr
	...

08002a44 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
    if(EnorDi == ENABLE)
 8002a44:	2901      	cmp	r1, #1
 8002a46:	d008      	beq.n	8002a5a <GPIO_IRQInterruptConfig+0x16>
            *NVIC_ISER0 |= ( 1 << IRQNumber );
        }

    }else
    {
        if(IRQNumber <= 31)
 8002a48:	281f      	cmp	r0, #31
 8002a4a:	d805      	bhi.n	8002a58 <GPIO_IRQInterruptConfig+0x14>
        {
             *NVIC_ICER0 |= ( 1 << IRQNumber );
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <GPIO_IRQInterruptConfig+0x28>)
 8002a4e:	680b      	ldr	r3, [r1, #0]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4082      	lsls	r2, r0
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
        }
    }
}
 8002a58:	4770      	bx	lr
        if(IRQNumber <= 31)
 8002a5a:	281f      	cmp	r0, #31
 8002a5c:	d8fc      	bhi.n	8002a58 <GPIO_IRQInterruptConfig+0x14>
            *NVIC_ISER0 |= ( 1 << IRQNumber );
 8002a5e:	4904      	ldr	r1, [pc, #16]	; (8002a70 <GPIO_IRQInterruptConfig+0x2c>)
 8002a60:	680b      	ldr	r3, [r1, #0]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4082      	lsls	r2, r0
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
 8002a6a:	e7f5      	b.n	8002a58 <GPIO_IRQInterruptConfig+0x14>
 8002a6c:	e000e180 	.word	0xe000e180
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8002a74:	0002      	movs	r2, r0
    uint8_t iprx = IRQNumber / 4;
 8002a76:	0883      	lsrs	r3, r0, #2
    uint8_t iprx_section = IRQNumber % 4;
 8002a78:	2003      	movs	r0, #3
 8002a7a:	4010      	ands	r0, r2

    uint8_t shift_amount = ( 8 * iprx_section ) + (8 - NO_PR_BITS_IMPLEMENTED);
 8002a7c:	00c0      	lsls	r0, r0, #3
 8002a7e:	3004      	adds	r0, #4
    *(NVIC_PR_BASE_ADDR + iprx  ) |= ( IRQPriority <<  shift_amount);
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <GPIO_IRQPriorityConfig+0x20>)
 8002a84:	4694      	mov	ip, r2
 8002a86:	4463      	add	r3, ip
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4081      	lsls	r1, r0
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]
}
 8002a90:	4770      	bx	lr
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	e000e400 	.word	0xe000e400

08002a98 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
    if(EXTI->PR & (1 << PinNumber))
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <GPIO_IRQHandling+0x18>)
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	4083      	lsls	r3, r0
 8002aa0:	4213      	tst	r3, r2
 8002aa2:	d003      	beq.n	8002aac <GPIO_IRQHandling+0x14>
    {
        EXTI->PR |= (1 << PinNumber);
 8002aa4:	4a02      	ldr	r2, [pc, #8]	; (8002ab0 <GPIO_IRQHandling+0x18>)
 8002aa6:	6951      	ldr	r1, [r2, #20]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6153      	str	r3, [r2, #20]
    }
}
 8002aac:	4770      	bx	lr
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	40010400 	.word	0x40010400

08002ab4 <I2C_ExecuteAddressPhaseWrite>:
	pI2Cx->CR2 |= ( 1 << I2C_CR2_START);
}

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr << 1;
 8002ab4:	0049      	lsls	r1, r1, #1
 8002ab6:	b2c9      	uxtb	r1, r1
	SlaveAddr &= ~(1); 
    pI2Cx->CR2 |= SlaveAddr;
 8002ab8:	6843      	ldr	r3, [r0, #4]
 8002aba:	4319      	orrs	r1, r3
 8002abc:	6041      	str	r1, [r0, #4]

	pI2Cx->CR2 &= ~( 1 << I2C_CR2_RD_WRN);
 8002abe:	6843      	ldr	r3, [r0, #4]
 8002ac0:	4a01      	ldr	r2, [pc, #4]	; (8002ac8 <I2C_ExecuteAddressPhaseWrite+0x14>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	6043      	str	r3, [r0, #4]
}
 8002ac6:	4770      	bx	lr
 8002ac8:	fffffbff 	.word	0xfffffbff

08002acc <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr << 1;
 8002acc:	0049      	lsls	r1, r1, #1
 8002ace:	b2c9      	uxtb	r1, r1
	SlaveAddr |= 1; 
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	4319      	orrs	r1, r3
 8002ad4:	b2c9      	uxtb	r1, r1
	pI2Cx->CR2 |= SlaveAddr;
 8002ad6:	6843      	ldr	r3, [r0, #4]
 8002ad8:	4319      	orrs	r1, r3
 8002ada:	6041      	str	r1, [r0, #4]

	pI2Cx->CR2 |= ( 1 << I2C_CR2_RD_WRN);
 8002adc:	6842      	ldr	r2, [r0, #4]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	6043      	str	r3, [r0, #4]
}
 8002ae6:	4770      	bx	lr

08002ae8 <I2C_DisableInterrupts>:
	return FLAG_RESET;
}

static void I2C_DisableInterrupts(I2C_Handle_t *pI2CHandle)
{
	pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_TXIE);
 8002ae8:	6802      	ldr	r2, [r0, #0]
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	2102      	movs	r1, #2
 8002aee:	438b      	bics	r3, r1
 8002af0:	6013      	str	r3, [r2, #0]
	pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_RXIE);
 8002af2:	6802      	ldr	r2, [r0, #0]
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	3102      	adds	r1, #2
 8002af8:	438b      	bics	r3, r1
 8002afa:	6013      	str	r3, [r2, #0]
	pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_STOPIE);
 8002afc:	6802      	ldr	r2, [r0, #0]
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	311c      	adds	r1, #28
 8002b02:	438b      	bics	r3, r1
 8002b04:	6013      	str	r3, [r2, #0]
	pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_TCIE);
 8002b06:	6802      	ldr	r2, [r0, #0]
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	3120      	adds	r1, #32
 8002b0c:	438b      	bics	r3, r1
 8002b0e:	6013      	str	r3, [r2, #0]

	// pI2CHandle->pI2Cx->CR1 &= ~( 1 << I2C_CR1_ERRIE);
}
 8002b10:	4770      	bx	lr

08002b12 <I2C_GenerateStartCondition>:
	pI2Cx->CR2 |= ( 1 << I2C_CR2_START);
 8002b12:	6842      	ldr	r2, [r0, #4]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	019b      	lsls	r3, r3, #6
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	6043      	str	r3, [r0, #4]
}
 8002b1c:	4770      	bx	lr
	...

08002b20 <I2C_Init>:
	I2C1_PCLK_EN();
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <I2C_Init+0x38>)
 8002b22:	69d1      	ldr	r1, [r2, #28]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	039b      	lsls	r3, r3, #14
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	61d3      	str	r3, [r2, #28]
    pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8002b2c:	6802      	ldr	r2, [r0, #0]
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	438b      	bics	r3, r1
 8002b34:	6013      	str	r3, [r2, #0]
	pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_NOSTRETCH);
 8002b36:	6802      	ldr	r2, [r0, #0]
 8002b38:	6811      	ldr	r1, [r2, #0]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	029b      	lsls	r3, r3, #10
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6013      	str	r3, [r2, #0]
	pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_AUTOEND);
 8002b42:	6802      	ldr	r2, [r0, #0]
 8002b44:	6851      	ldr	r1, [r2, #4]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	049b      	lsls	r3, r3, #18
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	6053      	str	r3, [r2, #4]
    pI2CHandle->pI2Cx->TIMINGR = 0x2000090E;
 8002b4e:	6803      	ldr	r3, [r0, #0]
 8002b50:	4a02      	ldr	r2, [pc, #8]	; (8002b5c <I2C_Init+0x3c>)
 8002b52:	611a      	str	r2, [r3, #16]
}
 8002b54:	4770      	bx	lr
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	2000090e 	.word	0x2000090e

08002b60 <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8002b60:	b510      	push	{r4, lr}
 8002b62:	0004      	movs	r4, r0
	I2C_DisableInterrupts(pI2CHandle);
 8002b64:	f7ff ffc0 	bl	8002ae8 <I2C_DisableInterrupts>

    pI2CHandle->TxRxState = I2C_READY;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	7523      	strb	r3, [r4, #20]
	pI2CHandle->pRxBuffer = NULL;
 8002b6c:	60a3      	str	r3, [r4, #8]
	pI2CHandle->RxLen = 0;
 8002b6e:	6123      	str	r3, [r4, #16]
	pI2CHandle->RxSize = 0;
 8002b70:	61a3      	str	r3, [r4, #24]
}
 8002b72:	bd10      	pop	{r4, pc}

08002b74 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8002b74:	b510      	push	{r4, lr}
 8002b76:	0004      	movs	r4, r0
	I2C_DisableInterrupts(pI2CHandle);
 8002b78:	f7ff ffb6 	bl	8002ae8 <I2C_DisableInterrupts>

	pI2CHandle->TxRxState = I2C_READY;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	7523      	strb	r3, [r4, #20]
	pI2CHandle->pTxBuffer = NULL;
 8002b80:	6063      	str	r3, [r4, #4]
	pI2CHandle->TxLen = 0;
 8002b82:	60e3      	str	r3, [r4, #12]
}
 8002b84:	bd10      	pop	{r4, pc}

08002b86 <I2C_MasterSendDataIT>:


uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8002b86:	b570      	push	{r4, r5, r6, lr}
 8002b88:	0004      	movs	r4, r0
 8002b8a:	0015      	movs	r5, r2
	uint8_t busystate = pI2CHandle->TxRxState;
 8002b8c:	7d06      	ldrb	r6, [r0, #20]
	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8002b8e:	1e70      	subs	r0, r6, #1
 8002b90:	b2c0      	uxtb	r0, r0
 8002b92:	2801      	cmp	r0, #1
 8002b94:	d801      	bhi.n	8002b9a <I2C_MasterSendDataIT+0x14>

		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
	}

	return busystate;
}
 8002b96:	0030      	movs	r0, r6
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
		pI2CHandle->pTxBuffer = pTxBuffer;
 8002b9a:	6061      	str	r1, [r4, #4]
		pI2CHandle->TxLen = Len;
 8002b9c:	60e2      	str	r2, [r4, #12]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	7520      	strb	r0, [r4, #20]
		pI2CHandle->DevAddr = SlaveAddr;
 8002ba2:	7563      	strb	r3, [r4, #21]
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_TXIE);
 8002ba4:	6821      	ldr	r1, [r4, #0]
 8002ba6:	680a      	ldr	r2, [r1, #0]
 8002ba8:	4302      	orrs	r2, r0
 8002baa:	600a      	str	r2, [r1, #0]
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_RXIE);
 8002bac:	6821      	ldr	r1, [r4, #0]
 8002bae:	680a      	ldr	r2, [r1, #0]
 8002bb0:	3002      	adds	r0, #2
 8002bb2:	4302      	orrs	r2, r0
 8002bb4:	600a      	str	r2, [r1, #0]
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_STOPIE);
 8002bb6:	6821      	ldr	r1, [r4, #0]
 8002bb8:	680a      	ldr	r2, [r1, #0]
 8002bba:	301c      	adds	r0, #28
 8002bbc:	4302      	orrs	r2, r0
 8002bbe:	600a      	str	r2, [r1, #0]
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_TCIE);
 8002bc0:	6821      	ldr	r1, [r4, #0]
 8002bc2:	680a      	ldr	r2, [r1, #0]
 8002bc4:	3020      	adds	r0, #32
 8002bc6:	4302      	orrs	r2, r0
 8002bc8:	600a      	str	r2, [r1, #0]
		I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8002bca:	0019      	movs	r1, r3
 8002bcc:	6820      	ldr	r0, [r4, #0]
 8002bce:	f7ff ff71 	bl	8002ab4 <I2C_ExecuteAddressPhaseWrite>
	    pI2CHandle->pI2Cx->CR2 |= (Len << 16);
 8002bd2:	6821      	ldr	r1, [r4, #0]
 8002bd4:	684b      	ldr	r3, [r1, #4]
 8002bd6:	042a      	lsls	r2, r5, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	604a      	str	r2, [r1, #4]
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8002bdc:	6820      	ldr	r0, [r4, #0]
 8002bde:	f7ff ff98 	bl	8002b12 <I2C_GenerateStartCondition>
 8002be2:	e7d8      	b.n	8002b96 <I2C_MasterSendDataIT+0x10>

08002be4 <I2C_MasterReceiveDataIT>:

uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	0004      	movs	r4, r0
 8002be8:	0015      	movs	r5, r2
	uint8_t busystate = pI2CHandle->TxRxState;
 8002bea:	7d26      	ldrb	r6, [r4, #20]
	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8002bec:	1e72      	subs	r2, r6, #1
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	2a01      	cmp	r2, #1
 8002bf2:	d801      	bhi.n	8002bf8 <I2C_MasterReceiveDataIT+0x14>
		
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
	}

	return busystate;
}
 8002bf4:	0030      	movs	r0, r6
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
		pI2CHandle->pRxBuffer = pRxBuffer;
 8002bf8:	60a1      	str	r1, [r4, #8]
		pI2CHandle->RxLen = Len;
 8002bfa:	6125      	str	r5, [r4, #16]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	7522      	strb	r2, [r4, #20]
		pI2CHandle->RxSize = Len;
 8002c00:	61a5      	str	r5, [r4, #24]
		pI2CHandle->DevAddr = SlaveAddr;
 8002c02:	7563      	strb	r3, [r4, #21]
		pI2CHandle->rxCmplt = 0;
 8002c04:	2200      	movs	r2, #0
 8002c06:	7722      	strb	r2, [r4, #28]
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_TXIE);
 8002c08:	6821      	ldr	r1, [r4, #0]
 8002c0a:	680a      	ldr	r2, [r1, #0]
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	4302      	orrs	r2, r0
 8002c10:	600a      	str	r2, [r1, #0]
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_RXIE);
 8002c12:	6821      	ldr	r1, [r4, #0]
 8002c14:	680a      	ldr	r2, [r1, #0]
 8002c16:	3002      	adds	r0, #2
 8002c18:	4302      	orrs	r2, r0
 8002c1a:	600a      	str	r2, [r1, #0]
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_STOPIE);
 8002c1c:	6821      	ldr	r1, [r4, #0]
 8002c1e:	680a      	ldr	r2, [r1, #0]
 8002c20:	301c      	adds	r0, #28
 8002c22:	4302      	orrs	r2, r0
 8002c24:	600a      	str	r2, [r1, #0]
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_TCIE);
 8002c26:	6821      	ldr	r1, [r4, #0]
 8002c28:	680a      	ldr	r2, [r1, #0]
 8002c2a:	3020      	adds	r0, #32
 8002c2c:	4302      	orrs	r2, r0
 8002c2e:	600a      	str	r2, [r1, #0]
		I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8002c30:	0019      	movs	r1, r3
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	f7ff ff4a 	bl	8002acc <I2C_ExecuteAddressPhaseRead>
		pI2CHandle->pI2Cx->CR2 |= (Len << 16);
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	042d      	lsls	r5, r5, #16
 8002c3e:	4315      	orrs	r5, r2
 8002c40:	605d      	str	r5, [r3, #4]
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8002c42:	6820      	ldr	r0, [r4, #0]
 8002c44:	f7ff ff65 	bl	8002b12 <I2C_GenerateStartCondition>
 8002c48:	e7d4      	b.n	8002bf4 <I2C_MasterReceiveDataIT+0x10>

08002c4a <I2C_EV_IRQHandling>:


void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8002c4a:	b510      	push	{r4, lr}
 8002c4c:	0004      	movs	r4, r0
	uint32_t temp1, temp2, temp3;

	temp3 = pI2CHandle->pI2Cx->ISR & ( 1 << I2C_SR1_STOPF);
 8002c4e:	6803      	ldr	r3, [r0, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
	if(temp3)
 8002c52:	0692      	lsls	r2, r2, #26
 8002c54:	d50c      	bpl.n	8002c70 <I2C_EV_IRQHandling+0x26>
	{
		pI2CHandle->pI2Cx->ICR |= ( 1 << I2C_ICR_STOPCF);
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	2120      	movs	r1, #32
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	61da      	str	r2, [r3, #28]

		pI2CHandle->pI2Cx->CR2 = 0x2000000U;
 8002c5e:	6803      	ldr	r3, [r0, #0]
 8002c60:	2280      	movs	r2, #128	; 0x80
 8002c62:	0492      	lsls	r2, r2, #18
 8002c64:	605a      	str	r2, [r3, #4]

		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);

		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8002c66:	7d03      	ldrb	r3, [r0, #20]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d010      	beq.n	8002c8e <I2C_EV_IRQHandling+0x44>
		{
			I2C_CloseSendData(pI2CHandle);
		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d011      	beq.n	8002c94 <I2C_EV_IRQHandling+0x4a>
			pI2CHandle->rxCmplt = SET;
			I2C_CloseReceiveData(pI2CHandle);
		}
	}

	temp3 = pI2CHandle->pI2Cx->ISR & ( 1 << I2C_SR1_TXIS);
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	699a      	ldr	r2, [r3, #24]
	if(temp3)
 8002c74:	0792      	lsls	r2, r2, #30
 8002c76:	d502      	bpl.n	8002c7e <I2C_EV_IRQHandling+0x34>
	{
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8002c78:	7d22      	ldrb	r2, [r4, #20]
 8002c7a:	2a02      	cmp	r2, #2
 8002c7c:	d00e      	beq.n	8002c9c <I2C_EV_IRQHandling+0x52>
				pI2CHandle->pTxBuffer++;
			}
		}
	}

	temp3 = pI2CHandle->pI2Cx->ISR & ( 1 << I2C_SR1_RXNE);
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
	if(temp3)
 8002c82:	0752      	lsls	r2, r2, #29
 8002c84:	d502      	bpl.n	8002c8c <I2C_EV_IRQHandling+0x42>
	{
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8002c86:	7d22      	ldrb	r2, [r4, #20]
 8002c88:	2a01      	cmp	r2, #1
 8002c8a:	d014      	beq.n	8002cb6 <I2C_EV_IRQHandling+0x6c>
	// if(temp3)
	// {
	// 	pI2CHandle->pI2Cx->ICR |= ( 1 << I2C_ICR_TIMEOUTCF);
	// 	I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
	// }
}
 8002c8c:	bd10      	pop	{r4, pc}
			I2C_CloseSendData(pI2CHandle);
 8002c8e:	f7ff ff71 	bl	8002b74 <I2C_CloseSendData>
 8002c92:	e7ed      	b.n	8002c70 <I2C_EV_IRQHandling+0x26>
			pI2CHandle->rxCmplt = SET;
 8002c94:	7703      	strb	r3, [r0, #28]
			I2C_CloseReceiveData(pI2CHandle);
 8002c96:	f7ff ff63 	bl	8002b60 <I2C_CloseReceiveData>
 8002c9a:	e7e9      	b.n	8002c70 <I2C_EV_IRQHandling+0x26>
			if(pI2CHandle->TxLen > 0)
 8002c9c:	68e2      	ldr	r2, [r4, #12]
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d0ed      	beq.n	8002c7e <I2C_EV_IRQHandling+0x34>
				pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer);
 8002ca2:	6862      	ldr	r2, [r4, #4]
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28
				pI2CHandle->TxLen--;
 8002ca8:	68e3      	ldr	r3, [r4, #12]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	60e3      	str	r3, [r4, #12]
				pI2CHandle->pTxBuffer++;
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	6063      	str	r3, [r4, #4]
 8002cb4:	e7e3      	b.n	8002c7e <I2C_EV_IRQHandling+0x34>
			if(pI2CHandle->RxSize > 0)
 8002cb6:	69a2      	ldr	r2, [r4, #24]
 8002cb8:	2a00      	cmp	r2, #0
 8002cba:	d0e7      	beq.n	8002c8c <I2C_EV_IRQHandling+0x42>
				*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->RXDR;
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	68a2      	ldr	r2, [r4, #8]
 8002cc0:	7013      	strb	r3, [r2, #0]
				pI2CHandle->pRxBuffer++;
 8002cc2:	68a3      	ldr	r3, [r4, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	60a3      	str	r3, [r4, #8]
				pI2CHandle->RxSize--;
 8002cc8:	69a3      	ldr	r3, [r4, #24]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	61a3      	str	r3, [r4, #24]
}
 8002cce:	e7dd      	b.n	8002c8c <I2C_EV_IRQHandling+0x42>

08002cd0 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle)
{
	uint32_t tempreg = 0;

	USART1_PCLK_EN();
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <USART_Init+0x20>)
 8002cd2:	6991      	ldr	r1, [r2, #24]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	01db      	lsls	r3, r3, #7
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6193      	str	r3, [r2, #24]
	tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));

	tempreg &= ~(1 << USART_CR1_M1);
	tempreg |= 0 << USART_CR1_M0;

	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8002cdc:	6803      	ldr	r3, [r0, #0]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	601a      	str	r2, [r3, #0]

	pUSARTHandle->pUSARTx->CR2 = 0;
 8002ce2:	6803      	ldr	r3, [r0, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]

	pUSARTHandle->pUSARTx->BRR = 0x45U;
 8002ce8:	6803      	ldr	r3, [r0, #0]
 8002cea:	3245      	adds	r2, #69	; 0x45
 8002cec:	60da      	str	r2, [r3, #12]
}
 8002cee:	4770      	bx	lr
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <USART_SendDataIT>:

	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
}

uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	0003      	movs	r3, r0
    uint8_t txstate = pUSARTHandle->TxBusyState;
 8002cf8:	7f00      	ldrb	r0, [r0, #28]

    if(txstate != USART_BUSY_IN_TX)
 8002cfa:	2802      	cmp	r0, #2
 8002cfc:	d00d      	beq.n	8002d1a <USART_SendDataIT+0x26>
    {
        pUSARTHandle->TxLen = Len;
 8002cfe:	615a      	str	r2, [r3, #20]
        pUSARTHandle->pTxBuffer = pTxBuffer;
 8002d00:	60d9      	str	r1, [r3, #12]
        pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;
 8002d02:	2202      	movs	r2, #2
 8002d04:	771a      	strb	r2, [r3, #28]

        pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TXEIE);
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	680a      	ldr	r2, [r1, #0]
 8002d0a:	2480      	movs	r4, #128	; 0x80
 8002d0c:	4322      	orrs	r2, r4
 8002d0e:	600a      	str	r2, [r1, #0]
        pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TCIE);
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	6813      	ldr	r3, [r2, #0]
 8002d14:	2140      	movs	r1, #64	; 0x40
 8002d16:	430b      	orrs	r3, r1
 8002d18:	6013      	str	r3, [r2, #0]
    }

    return txstate;
}
 8002d1a:	bd10      	pop	{r4, pc}

08002d1c <USART_ReceiveDataIT>:
	    pRxBuffer++;
	}
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8002d1c:	0003      	movs	r3, r0
    uint8_t rxstate = pUSARTHandle->RxBusyState;
 8002d1e:	7f40      	ldrb	r0, [r0, #29]

    if(rxstate != USART_BUSY_IN_RX)
 8002d20:	2801      	cmp	r0, #1
 8002d22:	d009      	beq.n	8002d38 <USART_ReceiveDataIT+0x1c>
    {
        pUSARTHandle->RxLen = Len;
 8002d24:	619a      	str	r2, [r3, #24]
        pUSARTHandle->pRxBuffer = pRxBuffer;
 8002d26:	6119      	str	r1, [r3, #16]
        pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	775a      	strb	r2, [r3, #29]

        (void)pUSARTHandle->pUSARTx->RDR;
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24

        pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	2120      	movs	r1, #32
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
    }

    return rxstate;
}
 8002d38:	4770      	bx	lr

08002d3a <USART_IRQHandling>:
{
    pUSARTx->SR &= ~(StatusFlagName);
}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8002d3a:	b510      	push	{r4, lr}
 8002d3c:	0004      	movs	r4, r0
    uint32_t temp1, temp2, temp3;
    uint16_t *pdata;

    /*************************Check for TC flag ********************************************/
    temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TC);
 8002d3e:	6802      	ldr	r2, [r0, #0]
 8002d40:	69d0      	ldr	r0, [r2, #28]
 8002d42:	2140      	movs	r1, #64	; 0x40
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TCIE);
 8002d44:	6813      	ldr	r3, [r2, #0]
 8002d46:	400b      	ands	r3, r1

    if(temp1 && temp2)
 8002d48:	4201      	tst	r1, r0
 8002d4a:	d004      	beq.n	8002d56 <USART_IRQHandling+0x1c>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <USART_IRQHandling+0x1c>
    {
        if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8002d50:	7f23      	ldrb	r3, [r4, #28]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d021      	beq.n	8002d9a <USART_IRQHandling+0x60>
            }
        }
    }

    /*************************Check for TXE flag ********************************************/
    temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TXE);
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	69d0      	ldr	r0, [r2, #28]
 8002d5a:	2180      	movs	r1, #128	; 0x80
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TXEIE);
 8002d5c:	6813      	ldr	r3, [r2, #0]
 8002d5e:	400b      	ands	r3, r1

    if(temp1 && temp2)
 8002d60:	4201      	tst	r1, r0
 8002d62:	d004      	beq.n	8002d6e <USART_IRQHandling+0x34>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <USART_IRQHandling+0x34>
    {
        if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8002d68:	7f23      	ldrb	r3, [r4, #28]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d028      	beq.n	8002dc0 <USART_IRQHandling+0x86>
            }
        }
    }

    /*************************Check for RXNE flag ********************************************/
    temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_RXNE);
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	69d0      	ldr	r0, [r2, #28]
 8002d72:	2120      	movs	r1, #32
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_RXNEIE);
 8002d74:	6813      	ldr	r3, [r2, #0]
 8002d76:	400b      	ands	r3, r1

    if(temp1 && temp2)
 8002d78:	4201      	tst	r1, r0
 8002d7a:	d004      	beq.n	8002d86 <USART_IRQHandling+0x4c>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <USART_IRQHandling+0x4c>
    {
        if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8002d80:	7f63      	ldrb	r3, [r4, #29]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d031      	beq.n	8002dea <USART_IRQHandling+0xb0>
        }
    }


    /*************************Check for IDLE detection flag ********************************************/
    temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_IDLE);
 8002d86:	6822      	ldr	r2, [r4, #0]
 8002d88:	69d0      	ldr	r0, [r2, #28]
 8002d8a:	2110      	movs	r1, #16
    temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_IDLEIE);
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	400b      	ands	r3, r1

    if(temp1 && temp2)
 8002d90:	4201      	tst	r1, r0
 8002d92:	d001      	beq.n	8002d98 <USART_IRQHandling+0x5e>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d143      	bne.n	8002e20 <USART_IRQHandling+0xe6>
    //     if(temp1 & (1 << USART_SR_ORE))
    //     {
    //         USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
    //     }
    // }
}
 8002d98:	bd10      	pop	{r4, pc}
            if(!pUSARTHandle->TxLen)
 8002d9a:	6963      	ldr	r3, [r4, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1da      	bne.n	8002d56 <USART_IRQHandling+0x1c>
                pUSARTHandle->pUSARTx->ICR |= (1 << USART_ICR_TCCF);
 8002da0:	6a13      	ldr	r3, [r2, #32]
 8002da2:	430b      	orrs	r3, r1
 8002da4:	6213      	str	r3, [r2, #32]
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TCIE);
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	6813      	ldr	r3, [r2, #0]
 8002daa:	438b      	bics	r3, r1
 8002dac:	6013      	str	r3, [r2, #0]
                pUSARTHandle->TxBusyState = USART_READY;
 8002dae:	2300      	movs	r3, #0
 8002db0:	7723      	strb	r3, [r4, #28]
                pUSARTHandle->pTxBuffer = NULL;
 8002db2:	60e3      	str	r3, [r4, #12]
                pUSARTHandle->TxLen = 0;
 8002db4:	6163      	str	r3, [r4, #20]
                USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 8002db6:	2100      	movs	r1, #0
 8002db8:	0020      	movs	r0, r4
 8002dba:	f7fe f8e7 	bl	8000f8c <USART_ApplicationEventCallback>
 8002dbe:	e7ca      	b.n	8002d56 <USART_IRQHandling+0x1c>
            if(pUSARTHandle->TxLen > 0)
 8002dc0:	6963      	ldr	r3, [r4, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <USART_IRQHandling+0x9e>
				pUSARTHandle->pUSARTx->TDR = (*pUSARTHandle->pTxBuffer & (uint8_t)0xFF);
 8002dc6:	68e3      	ldr	r3, [r4, #12]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	6293      	str	r3, [r2, #40]	; 0x28
				pUSARTHandle->pTxBuffer++;
 8002dcc:	68e3      	ldr	r3, [r4, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60e3      	str	r3, [r4, #12]
				pUSARTHandle->TxLen -= 1;
 8002dd2:	6963      	ldr	r3, [r4, #20]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	6163      	str	r3, [r4, #20]
            if(pUSARTHandle->TxLen == 0)
 8002dd8:	6963      	ldr	r3, [r4, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1c7      	bne.n	8002d6e <USART_IRQHandling+0x34>
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE);
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	6813      	ldr	r3, [r2, #0]
 8002de2:	2180      	movs	r1, #128	; 0x80
 8002de4:	438b      	bics	r3, r1
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e7c1      	b.n	8002d6e <USART_IRQHandling+0x34>
            if(pUSARTHandle->RxLen > 0)
 8002dea:	69a3      	ldr	r3, [r4, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <USART_IRQHandling+0xc8>
				*pUSARTHandle->pRxBuffer = (uint8_t)(pUSARTHandle->pUSARTx->RDR & (uint8_t)0xFF);
 8002df0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002df2:	6922      	ldr	r2, [r4, #16]
 8002df4:	7013      	strb	r3, [r2, #0]
				pUSARTHandle->pRxBuffer++;
 8002df6:	6923      	ldr	r3, [r4, #16]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	6123      	str	r3, [r4, #16]
				pUSARTHandle->RxLen -= 1;
 8002dfc:	69a3      	ldr	r3, [r4, #24]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	61a3      	str	r3, [r4, #24]
            if(!pUSARTHandle->RxLen)
 8002e02:	69a3      	ldr	r3, [r4, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1be      	bne.n	8002d86 <USART_IRQHandling+0x4c>
                pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_RXNEIE);
 8002e08:	6822      	ldr	r2, [r4, #0]
 8002e0a:	6813      	ldr	r3, [r2, #0]
 8002e0c:	2120      	movs	r1, #32
 8002e0e:	438b      	bics	r3, r1
 8002e10:	6013      	str	r3, [r2, #0]
                pUSARTHandle->RxBusyState = USART_READY;
 8002e12:	2300      	movs	r3, #0
 8002e14:	7763      	strb	r3, [r4, #29]
                USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_RX_CMPLT);
 8002e16:	391f      	subs	r1, #31
 8002e18:	0020      	movs	r0, r4
 8002e1a:	f7fe f8b7 	bl	8000f8c <USART_ApplicationEventCallback>
 8002e1e:	e7b2      	b.n	8002d86 <USART_IRQHandling+0x4c>
        pUSARTHandle->pUSARTx->ICR |= (1 << USART_ICR_IDLECF);
 8002e20:	6a13      	ldr	r3, [r2, #32]
 8002e22:	430b      	orrs	r3, r1
 8002e24:	6213      	str	r3, [r2, #32]
        USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 8002e26:	390e      	subs	r1, #14
 8002e28:	0020      	movs	r0, r4
 8002e2a:	f7fe f8af 	bl	8000f8c <USART_ApplicationEventCallback>
}
 8002e2e:	e7b3      	b.n	8002d98 <USART_IRQHandling+0x5e>

08002e30 <chg_read_register>:
////	while(I2C_MasterSendDataIT(pI2CHandle, &data[0], 2 , CHG_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
////	delay(200000);
//}

void chg_read_register(I2C_Handle_t *pI2CHandle, uint8_t reg_addr, uint8_t *buffer, uint8_t size)
{
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	0004      	movs	r4, r0
 8002e36:	0015      	movs	r5, r2
 8002e38:	001e      	movs	r6, r3
 8002e3a:	230f      	movs	r3, #15
 8002e3c:	446b      	add	r3, sp
 8002e3e:	7019      	strb	r1, [r3, #0]
   while(I2C_MasterSendDataIT(pI2CHandle, &reg_addr, 1, CHG_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8002e40:	2001      	movs	r0, #1
 8002e42:	9000      	str	r0, [sp, #0]
 8002e44:	236b      	movs	r3, #107	; 0x6b
 8002e46:	2201      	movs	r2, #1
 8002e48:	210f      	movs	r1, #15
 8002e4a:	4469      	add	r1, sp
 8002e4c:	0020      	movs	r0, r4
 8002e4e:	f7ff fe9a 	bl	8002b86 <I2C_MasterSendDataIT>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d1f4      	bne.n	8002e40 <chg_read_register+0x10>

   pI2CHandle->rxCmplt = RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	7723      	strb	r3, [r4, #28]
   while(I2C_MasterReceiveDataIT(pI2CHandle, buffer, size, CHG_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	9000      	str	r0, [sp, #0]
 8002e5e:	236b      	movs	r3, #107	; 0x6b
 8002e60:	0032      	movs	r2, r6
 8002e62:	0029      	movs	r1, r5
 8002e64:	0020      	movs	r0, r4
 8002e66:	f7ff febd 	bl	8002be4 <I2C_MasterReceiveDataIT>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d1f5      	bne.n	8002e5a <chg_read_register+0x2a>

   while(pI2CHandle->rxCmplt != SET)
 8002e6e:	7f23      	ldrb	r3, [r4, #28]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d1fc      	bne.n	8002e6e <chg_read_register+0x3e>
   {

   }
   pI2CHandle->rxCmplt = RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	7723      	strb	r3, [r4, #28]
}
 8002e78:	b004      	add	sp, #16
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}

08002e7c <chg_write_command>:

void chg_write_command(I2C_Handle_t *pI2CHandle, uint8_t reg_addr, uint8_t *data, uint8_t size)
{
 8002e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	0007      	movs	r7, r0
 8002e82:	0016      	movs	r6, r2
 8002e84:	001d      	movs	r5, r3

    while(I2C_MasterSendDataIT(pI2CHandle, data, size , CHG_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8002e86:	2401      	movs	r4, #1
 8002e88:	9400      	str	r4, [sp, #0]
 8002e8a:	236b      	movs	r3, #107	; 0x6b
 8002e8c:	002a      	movs	r2, r5
 8002e8e:	0031      	movs	r1, r6
 8002e90:	0038      	movs	r0, r7
 8002e92:	f7ff fe78 	bl	8002b86 <I2C_MasterSendDataIT>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d1f5      	bne.n	8002e86 <chg_write_command+0xa>
    delay(200000);
 8002e9a:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <chg_write_command+0x28>)
 8002e9c:	f7ff fc12 	bl	80026c4 <delay>
}
 8002ea0:	b003      	add	sp, #12
 8002ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea4:	00030d40 	.word	0x00030d40

08002ea8 <chg_set_ic_power_mode>:

uint8_t chg_set_ic_power_mode(I2C_Handle_t *pI2CHandle, uint8_t mode)
{
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	0004      	movs	r4, r0
 8002eae:	000e      	movs	r6, r1
    uint8_t pwr_mode = 0;
 8002eb0:	466b      	mov	r3, sp
 8002eb2:	1dda      	adds	r2, r3, #7
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	7013      	strb	r3, [r2, #0]
    uint8_t reg_val;
    uint8_t buf[2] = { 0x01, 0x00 };
 8002eb8:	ab01      	add	r3, sp, #4
 8002eba:	2101      	movs	r1, #1
 8002ebc:	8019      	strh	r1, [r3, #0]

    chg_read_register(pI2CHandle, 0x01, &pwr_mode, 1);
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f7ff ffb6 	bl	8002e30 <chg_read_register>

    if (mode == LOW_POWER) {
 8002ec4:	2e01      	cmp	r6, #1
 8002ec6:	d007      	beq.n	8002ed8 <chg_set_ic_power_mode+0x30>
        reg_val = pwr_mode | (1 << 7);
    } else if (mode == NORMAL) {
 8002ec8:	2e00      	cmp	r6, #0
 8002eca:	d10c      	bne.n	8002ee6 <chg_set_ic_power_mode+0x3e>
        reg_val = pwr_mode & ~(1 << 7);
 8002ecc:	466b      	mov	r3, sp
 8002ece:	3307      	adds	r3, #7
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	257f      	movs	r5, #127	; 0x7f
 8002ed4:	401d      	ands	r5, r3
 8002ed6:	e006      	b.n	8002ee6 <chg_set_ic_power_mode+0x3e>
        reg_val = pwr_mode | (1 << 7);
 8002ed8:	466b      	mov	r3, sp
 8002eda:	3307      	adds	r3, #7
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2580      	movs	r5, #128	; 0x80
 8002ee0:	426d      	negs	r5, r5
 8002ee2:	431d      	orrs	r5, r3
 8002ee4:	b2ed      	uxtb	r5, r5
    }

    buf[1] = reg_val;
 8002ee6:	aa01      	add	r2, sp, #4
 8002ee8:	7055      	strb	r5, [r2, #1]

    chg_write_command(pI2CHandle, 0x01, buf, 2);
 8002eea:	2302      	movs	r3, #2
 8002eec:	2101      	movs	r1, #1
 8002eee:	0020      	movs	r0, r4
 8002ef0:	f7ff ffc4 	bl	8002e7c <chg_write_command>

    return reg_val;
}
 8002ef4:	0028      	movs	r0, r5
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}

08002efa <pd_read_register>:

uint8_t pd_cmd_status = PD_CMD_READY;
uint8_t pd_cmd_task_result;

void pd_read_register(I2C_Handle_t *pI2CHandle, uint8_t reg_addr, uint8_t *buffer, uint8_t size)
{
 8002efa:	b570      	push	{r4, r5, r6, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	0004      	movs	r4, r0
 8002f00:	0015      	movs	r5, r2
 8002f02:	001e      	movs	r6, r3
 8002f04:	230f      	movs	r3, #15
 8002f06:	446b      	add	r3, sp
 8002f08:	7019      	strb	r1, [r3, #0]
   while(I2C_MasterSendDataIT(pI2CHandle, &reg_addr, 1, PD_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	9000      	str	r0, [sp, #0]
 8002f0e:	2320      	movs	r3, #32
 8002f10:	2201      	movs	r2, #1
 8002f12:	210f      	movs	r1, #15
 8002f14:	4469      	add	r1, sp
 8002f16:	0020      	movs	r0, r4
 8002f18:	f7ff fe35 	bl	8002b86 <I2C_MasterSendDataIT>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d1f4      	bne.n	8002f0a <pd_read_register+0x10>

   pI2CHandle->rxCmplt = RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	7723      	strb	r3, [r4, #28]
   while(I2C_MasterReceiveDataIT(pI2CHandle, buffer, size, PD_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8002f24:	2001      	movs	r0, #1
 8002f26:	9000      	str	r0, [sp, #0]
 8002f28:	2320      	movs	r3, #32
 8002f2a:	0032      	movs	r2, r6
 8002f2c:	0029      	movs	r1, r5
 8002f2e:	0020      	movs	r0, r4
 8002f30:	f7ff fe58 	bl	8002be4 <I2C_MasterReceiveDataIT>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d1f5      	bne.n	8002f24 <pd_read_register+0x2a>

   while(pI2CHandle->rxCmplt != SET)
 8002f38:	7f23      	ldrb	r3, [r4, #28]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d1fc      	bne.n	8002f38 <pd_read_register+0x3e>
   {

   }
   pI2CHandle->rxCmplt = RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	7723      	strb	r3, [r4, #28]
}
 8002f42:	b004      	add	sp, #16
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f48 <pd_get_command_response>:
    while(I2C_MasterSendDataIT(pI2CHandle, data, size , PD_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
    delay(200000);
}

static uint8_t pd_get_command_response(I2C_Handle_t *pI2CHandle)
{
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	0004      	movs	r4, r0
   uint8_t rcv_buf[5];

   while(1)
   {
       delay(200000);
 8002f4e:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <pd_get_command_response+0x6c>)
 8002f50:	f7ff fbb8 	bl	80026c4 <delay>
       pd_read_register(pI2CHandle, PD_CMD1, &rcv_buf[0], 5);
 8002f54:	2305      	movs	r3, #5
 8002f56:	466a      	mov	r2, sp
 8002f58:	2108      	movs	r1, #8
 8002f5a:	0020      	movs	r0, r4
 8002f5c:	f7ff ffcd 	bl	8002efa <pd_read_register>
       if (rcv_buf[0] == 0x4 && rcv_buf[1] == 0x21 && rcv_buf[2] == 0x43 && rcv_buf[3] == 0x4D && rcv_buf[4] == 0x44)  //!CMD
 8002f60:	466b      	mov	r3, sp
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d013      	beq.n	8002f90 <pd_get_command_response+0x48>
       {
           return PD_INVALID_CMD;
       }else if(rcv_buf[0] == 0x4 && rcv_buf[1] == 0x00 && rcv_buf[2] == 0x00 && rcv_buf[3] == 0x00 && rcv_buf[4] == 0x00)
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d1f0      	bne.n	8002f4e <pd_get_command_response+0x6>
 8002f6c:	466b      	mov	r3, sp
 8002f6e:	785b      	ldrb	r3, [r3, #1]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ec      	bne.n	8002f4e <pd_get_command_response+0x6>
 8002f74:	466b      	mov	r3, sp
 8002f76:	789b      	ldrb	r3, [r3, #2]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e8      	bne.n	8002f4e <pd_get_command_response+0x6>
 8002f7c:	466b      	mov	r3, sp
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e4      	bne.n	8002f4e <pd_get_command_response+0x6>
 8002f84:	466b      	mov	r3, sp
 8002f86:	7918      	ldrb	r0, [r3, #4]
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d1e0      	bne.n	8002f4e <pd_get_command_response+0x6>
       {
           return PD_CMD_EXECUTED;
       }
   }
   return PD_INVALID_CMD;
}
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd10      	pop	{r4, pc}
       if (rcv_buf[0] == 0x4 && rcv_buf[1] == 0x21 && rcv_buf[2] == 0x43 && rcv_buf[3] == 0x4D && rcv_buf[4] == 0x44)  //!CMD
 8002f90:	466a      	mov	r2, sp
 8002f92:	7852      	ldrb	r2, [r2, #1]
 8002f94:	2a21      	cmp	r2, #33	; 0x21
 8002f96:	d1e7      	bne.n	8002f68 <pd_get_command_response+0x20>
 8002f98:	466a      	mov	r2, sp
 8002f9a:	7892      	ldrb	r2, [r2, #2]
 8002f9c:	2a43      	cmp	r2, #67	; 0x43
 8002f9e:	d1e3      	bne.n	8002f68 <pd_get_command_response+0x20>
 8002fa0:	466a      	mov	r2, sp
 8002fa2:	78d2      	ldrb	r2, [r2, #3]
 8002fa4:	2a4d      	cmp	r2, #77	; 0x4d
 8002fa6:	d1df      	bne.n	8002f68 <pd_get_command_response+0x20>
 8002fa8:	466a      	mov	r2, sp
 8002faa:	7912      	ldrb	r2, [r2, #4]
 8002fac:	2a44      	cmp	r2, #68	; 0x44
 8002fae:	d1db      	bne.n	8002f68 <pd_get_command_response+0x20>
           return PD_INVALID_CMD;
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	e7eb      	b.n	8002f8c <pd_get_command_response+0x44>
 8002fb4:	00030d40 	.word	0x00030d40

08002fb8 <get_task_result>:

static uint8_t get_task_result(I2C_Handle_t *pI2CHandle)
{
 8002fb8:	b530      	push	{r4, r5, lr}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	0004      	movs	r4, r0
	uint8_t task_result;
	uint8_t command_execute = pd_get_command_response(pI2CHandle);
 8002fbe:	f7ff ffc3 	bl	8002f48 <pd_get_command_response>
	if(command_execute == PD_CMD_EXECUTED)
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d001      	beq.n	8002fca <get_task_result+0x12>
		uint8_t rcv_buf[2];
	    pd_read_register(pI2CHandle, PD_DATA1, &rcv_buf[0], 2);
	    task_result = rcv_buf[1] & 0x0F;
	    return task_result;
	}
}
 8002fc6:	b003      	add	sp, #12
 8002fc8:	bd30      	pop	{r4, r5, pc}
	    pd_read_register(pI2CHandle, PD_DATA1, &rcv_buf[0], 2);
 8002fca:	ad01      	add	r5, sp, #4
 8002fcc:	2302      	movs	r3, #2
 8002fce:	002a      	movs	r2, r5
 8002fd0:	2109      	movs	r1, #9
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	f7ff ff91 	bl	8002efa <pd_read_register>
	    task_result = rcv_buf[1] & 0x0F;
 8002fd8:	786b      	ldrb	r3, [r5, #1]
 8002fda:	200f      	movs	r0, #15
 8002fdc:	4018      	ands	r0, r3
	    return task_result;
 8002fde:	e7f2      	b.n	8002fc6 <get_task_result+0xe>

08002fe0 <pd_write_command>:
{
 8002fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	0007      	movs	r7, r0
 8002fe6:	0016      	movs	r6, r2
 8002fe8:	001d      	movs	r5, r3
    while(I2C_MasterSendDataIT(pI2CHandle, data, size , PD_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8002fea:	2401      	movs	r4, #1
 8002fec:	9400      	str	r4, [sp, #0]
 8002fee:	2320      	movs	r3, #32
 8002ff0:	002a      	movs	r2, r5
 8002ff2:	0031      	movs	r1, r6
 8002ff4:	0038      	movs	r0, r7
 8002ff6:	f7ff fdc6 	bl	8002b86 <I2C_MasterSendDataIT>
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d1f5      	bne.n	8002fea <pd_write_command+0xa>
    delay(200000);
 8002ffe:	4802      	ldr	r0, [pc, #8]	; (8003008 <pd_write_command+0x28>)
 8003000:	f7ff fb60 	bl	80026c4 <delay>
}
 8003004:	b003      	add	sp, #12
 8003006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003008:	00030d40 	.word	0x00030d40

0800300c <pd_4cc_command>:
   }
   return PD_INVALID_CMD;
}

uint8_t pd_4cc_command(I2C_Handle_t *pI2CHandle, uint8_t command)
{
 800300c:	b510      	push	{r4, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	0004      	movs	r4, r0
    uint8_t cmd[5];
    uint8_t command_execute, task_result;

    if(command == PD_PR_SWAP_TO_SINK)
 8003012:	2900      	cmp	r1, #0
 8003014:	d00d      	beq.n	8003032 <pd_4cc_command+0x26>
       pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);

       task_result = get_task_result(pI2CHandle);

       return task_result;
    }else if(command == PD_PR_SWAP_TO_SOURCE)
 8003016:	2901      	cmp	r1, #1
 8003018:	d021      	beq.n	800305e <pd_4cc_command+0x52>
       pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);

       task_result = get_task_result(pI2CHandle);

       return task_result;
    }else if(command == PD_GET_SRC_CAPS)
 800301a:	2902      	cmp	r1, #2
 800301c:	d035      	beq.n	800308a <pd_4cc_command+0x7e>
        pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);

        task_result = get_task_result(pI2CHandle);

        return task_result;
    }else if(command == PD_PR_SWAP_TO_UFP)
 800301e:	2903      	cmp	r1, #3
 8003020:	d048      	beq.n	80030b4 <pd_4cc_command+0xa8>
        pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);

        task_result = get_task_result(pI2CHandle);

        return task_result;
    }else if(command == PD_CLEAR_DEAD_FLAG)
 8003022:	2905      	cmp	r1, #5
 8003024:	d05b      	beq.n	80030de <pd_4cc_command+0xd2>
            pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);

            task_result = get_task_result(pI2CHandle);

            return task_result;
    }else if(command == PD_RESET)
 8003026:	2904      	cmp	r1, #4
 8003028:	d100      	bne.n	800302c <pd_4cc_command+0x20>
 800302a:	e06d      	b.n	8003108 <pd_4cc_command+0xfc>

//        task_result = get_task_result(pI2CHandle);

        return 0;
    }
    return PD_TSK_FAILED;
 800302c:	2005      	movs	r0, #5
}
 800302e:	b002      	add	sp, #8
 8003030:	bd10      	pop	{r4, pc}
       cmd[0] = PD_CMD1;
 8003032:	2308      	movs	r3, #8
 8003034:	466a      	mov	r2, sp
 8003036:	7013      	strb	r3, [r2, #0]
       cmd[1] = 0x04;
 8003038:	3b04      	subs	r3, #4
 800303a:	7053      	strb	r3, [r2, #1]
       cmd[2] = 0x53;
 800303c:	334f      	adds	r3, #79	; 0x4f
 800303e:	7093      	strb	r3, [r2, #2]
       cmd[3] = 0x57;
 8003040:	2257      	movs	r2, #87	; 0x57
 8003042:	4669      	mov	r1, sp
 8003044:	70ca      	strb	r2, [r1, #3]
       cmd[4] = 0x53;
 8003046:	466a      	mov	r2, sp
 8003048:	710b      	strb	r3, [r1, #4]
       cmd[5] = 0x6B;
 800304a:	3318      	adds	r3, #24
 800304c:	714b      	strb	r3, [r1, #5]
       pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);
 800304e:	3b65      	subs	r3, #101	; 0x65
 8003050:	2108      	movs	r1, #8
 8003052:	f7ff ffc5 	bl	8002fe0 <pd_write_command>
       task_result = get_task_result(pI2CHandle);
 8003056:	0020      	movs	r0, r4
 8003058:	f7ff ffae 	bl	8002fb8 <get_task_result>
       return task_result;
 800305c:	e7e7      	b.n	800302e <pd_4cc_command+0x22>
       cmd[0] = PD_CMD1;
 800305e:	2308      	movs	r3, #8
 8003060:	466a      	mov	r2, sp
 8003062:	7013      	strb	r3, [r2, #0]
       cmd[1] = 0x04;
 8003064:	3b04      	subs	r3, #4
 8003066:	7053      	strb	r3, [r2, #1]
       cmd[2] = 0x53;
 8003068:	334f      	adds	r3, #79	; 0x4f
 800306a:	7093      	strb	r3, [r2, #2]
       cmd[3] = 0x57;
 800306c:	2257      	movs	r2, #87	; 0x57
 800306e:	4669      	mov	r1, sp
 8003070:	70ca      	strb	r2, [r1, #3]
       cmd[4] = 0x53;
 8003072:	466a      	mov	r2, sp
 8003074:	710b      	strb	r3, [r1, #4]
       cmd[5] = 0x72;
 8003076:	331f      	adds	r3, #31
 8003078:	714b      	strb	r3, [r1, #5]
       pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);
 800307a:	3b6c      	subs	r3, #108	; 0x6c
 800307c:	2108      	movs	r1, #8
 800307e:	f7ff ffaf 	bl	8002fe0 <pd_write_command>
       task_result = get_task_result(pI2CHandle);
 8003082:	0020      	movs	r0, r4
 8003084:	f7ff ff98 	bl	8002fb8 <get_task_result>
       return task_result;
 8003088:	e7d1      	b.n	800302e <pd_4cc_command+0x22>
        cmd[0] = PD_CMD1;
 800308a:	2308      	movs	r3, #8
 800308c:	466a      	mov	r2, sp
 800308e:	7013      	strb	r3, [r2, #0]
        cmd[1] = 0x04;
 8003090:	3b04      	subs	r3, #4
 8003092:	7053      	strb	r3, [r2, #1]
        cmd[2] = 0x47;
 8003094:	3343      	adds	r3, #67	; 0x43
 8003096:	7093      	strb	r3, [r2, #2]
        cmd[3] = 0x53;
 8003098:	330c      	adds	r3, #12
 800309a:	70d3      	strb	r3, [r2, #3]
        cmd[4] = 0x72;
 800309c:	331f      	adds	r3, #31
 800309e:	7113      	strb	r3, [r2, #4]
        cmd[5] = 0x43;
 80030a0:	3b2f      	subs	r3, #47	; 0x2f
 80030a2:	7153      	strb	r3, [r2, #5]
        pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);
 80030a4:	3b3d      	subs	r3, #61	; 0x3d
 80030a6:	3106      	adds	r1, #6
 80030a8:	f7ff ff9a 	bl	8002fe0 <pd_write_command>
        task_result = get_task_result(pI2CHandle);
 80030ac:	0020      	movs	r0, r4
 80030ae:	f7ff ff83 	bl	8002fb8 <get_task_result>
        return task_result;
 80030b2:	e7bc      	b.n	800302e <pd_4cc_command+0x22>
        cmd[0] = PD_CMD1;
 80030b4:	2308      	movs	r3, #8
 80030b6:	466a      	mov	r2, sp
 80030b8:	7013      	strb	r3, [r2, #0]
        cmd[1] = 0x04;
 80030ba:	3b04      	subs	r3, #4
 80030bc:	7053      	strb	r3, [r2, #1]
        cmd[2] = 0x53;
 80030be:	334f      	adds	r3, #79	; 0x4f
 80030c0:	7093      	strb	r3, [r2, #2]
        cmd[3] = 0x57;
 80030c2:	3304      	adds	r3, #4
 80030c4:	70d3      	strb	r3, [r2, #3]
        cmd[4] = 0x55;
 80030c6:	3b02      	subs	r3, #2
 80030c8:	7113      	strb	r3, [r2, #4]
        cmd[5] = 0x46;
 80030ca:	3b0f      	subs	r3, #15
 80030cc:	7153      	strb	r3, [r2, #5]
        pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);
 80030ce:	3b40      	subs	r3, #64	; 0x40
 80030d0:	3105      	adds	r1, #5
 80030d2:	f7ff ff85 	bl	8002fe0 <pd_write_command>
        task_result = get_task_result(pI2CHandle);
 80030d6:	0020      	movs	r0, r4
 80030d8:	f7ff ff6e 	bl	8002fb8 <get_task_result>
        return task_result;
 80030dc:	e7a7      	b.n	800302e <pd_4cc_command+0x22>
            cmd[0] = PD_CMD1;
 80030de:	2308      	movs	r3, #8
 80030e0:	466a      	mov	r2, sp
 80030e2:	7013      	strb	r3, [r2, #0]
            cmd[1] = 0x04;
 80030e4:	3b04      	subs	r3, #4
 80030e6:	7053      	strb	r3, [r2, #1]
            cmd[2] = 0x44;
 80030e8:	3340      	adds	r3, #64	; 0x40
 80030ea:	7093      	strb	r3, [r2, #2]
            cmd[3] = 0x42;
 80030ec:	3b02      	subs	r3, #2
 80030ee:	70d3      	strb	r3, [r2, #3]
            cmd[4] = 0x66;
 80030f0:	3324      	adds	r3, #36	; 0x24
 80030f2:	7113      	strb	r3, [r2, #4]
            cmd[5] = 0x67;
 80030f4:	3301      	adds	r3, #1
 80030f6:	7153      	strb	r3, [r2, #5]
            pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);
 80030f8:	3b61      	subs	r3, #97	; 0x61
 80030fa:	3103      	adds	r1, #3
 80030fc:	f7ff ff70 	bl	8002fe0 <pd_write_command>
            task_result = get_task_result(pI2CHandle);
 8003100:	0020      	movs	r0, r4
 8003102:	f7ff ff59 	bl	8002fb8 <get_task_result>
            return task_result;
 8003106:	e792      	b.n	800302e <pd_4cc_command+0x22>
        cmd[0] = PD_CMD1;
 8003108:	2308      	movs	r3, #8
 800310a:	466a      	mov	r2, sp
 800310c:	7013      	strb	r3, [r2, #0]
        cmd[1] = 0x04;
 800310e:	3b04      	subs	r3, #4
 8003110:	7053      	strb	r3, [r2, #1]
        cmd[2] = 0x47;
 8003112:	3343      	adds	r3, #67	; 0x43
 8003114:	7093      	strb	r3, [r2, #2]
        cmd[3] = 0x41;
 8003116:	3b06      	subs	r3, #6
 8003118:	70d3      	strb	r3, [r2, #3]
        cmd[4] = 0x49;
 800311a:	3308      	adds	r3, #8
 800311c:	7113      	strb	r3, [r2, #4]
        cmd[5] = 0x44;
 800311e:	3b05      	subs	r3, #5
 8003120:	7153      	strb	r3, [r2, #5]
        pd_write_command(pI2CHandle, PD_CMD1, &cmd[0], 6);
 8003122:	3b3e      	subs	r3, #62	; 0x3e
 8003124:	3104      	adds	r1, #4
 8003126:	f7ff ff5b 	bl	8002fe0 <pd_write_command>
        return 0;
 800312a:	2000      	movs	r0, #0
 800312c:	e77f      	b.n	800302e <pd_4cc_command+0x22>

0800312e <pd_reset>:

uint8_t pd_reset(I2C_Handle_t *pI2CHandle)
{
 800312e:	b510      	push	{r4, lr}
	uint8_t res = pd_4cc_command(pI2CHandle, PD_RESET);
 8003130:	2104      	movs	r1, #4
 8003132:	f7ff ff6b 	bl	800300c <pd_4cc_command>
	return res;
}
 8003136:	bd10      	pop	{r4, pc}

08003138 <pd_get_plug_detect>:

uint8_t pd_get_plug_detect(I2C_Handle_t *pI2CHandle)
{
 8003138:	b510      	push	{r4, lr}
    pd_read_register(pI2CHandle, PD_STATUS, &regData[0], 5);
 800313a:	4c05      	ldr	r4, [pc, #20]	; (8003150 <pd_get_plug_detect+0x18>)
 800313c:	2305      	movs	r3, #5
 800313e:	0022      	movs	r2, r4
 8003140:	211a      	movs	r1, #26
 8003142:	f7ff feda 	bl	8002efa <pd_read_register>
    return (regData[1] & 0x1);
 8003146:	7860      	ldrb	r0, [r4, #1]
 8003148:	2301      	movs	r3, #1
 800314a:	4018      	ands	r0, r3
}
 800314c:	bd10      	pop	{r4, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	20000914 	.word	0x20000914

08003154 <pd_get_power_direction>:

uint8_t pd_get_power_direction(I2C_Handle_t *pI2CHandle)
{
 8003154:	b510      	push	{r4, lr}
    pd_read_register(pI2CHandle, PD_STATUS, &regData[0], 5);
 8003156:	4c05      	ldr	r4, [pc, #20]	; (800316c <pd_get_power_direction+0x18>)
 8003158:	2305      	movs	r3, #5
 800315a:	0022      	movs	r2, r4
 800315c:	211a      	movs	r1, #26
 800315e:	f7ff fecc 	bl	8002efa <pd_read_register>
    return ( (regData[1] >> 5) & 0x1);
 8003162:	7863      	ldrb	r3, [r4, #1]
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2001      	movs	r0, #1
 8003168:	4018      	ands	r0, r3
}
 800316a:	bd10      	pop	{r4, pc}
 800316c:	20000914 	.word	0x20000914

08003170 <pd_swap_to_source>:

uint8_t pd_swap_to_source(I2C_Handle_t *pI2CHandle)
{
 8003170:	b510      	push	{r4, lr}
    uint8_t res = pd_4cc_command(pI2CHandle, PD_PR_SWAP_TO_SOURCE);
 8003172:	2101      	movs	r1, #1
 8003174:	f7ff ff4a 	bl	800300c <pd_4cc_command>
    return res;
}
 8003178:	bd10      	pop	{r4, pc}

0800317a <pd_swap_to_sink>:

uint8_t pd_swap_to_sink(I2C_Handle_t *pI2CHandle)
{
 800317a:	b510      	push	{r4, lr}
    uint8_t res = pd_4cc_command(pI2CHandle, PD_PR_SWAP_TO_SINK);
 800317c:	2100      	movs	r1, #0
 800317e:	f7ff ff45 	bl	800300c <pd_4cc_command>
    return res;
}
 8003182:	bd10      	pop	{r4, pc}

08003184 <pd_swap_to_UFP>:

uint8_t pd_swap_to_UFP(I2C_Handle_t *pI2CHandle)
{
 8003184:	b510      	push	{r4, lr}
	 uint8_t res = pd_4cc_command(pI2CHandle, PD_PR_SWAP_TO_UFP);
 8003186:	2103      	movs	r1, #3
 8003188:	f7ff ff40 	bl	800300c <pd_4cc_command>
	 return res;
}
 800318c:	bd10      	pop	{r4, pc}

0800318e <pd_get_dead_flag>:
	 uint8_t res = pd_4cc_command(pI2CHandle, PD_CLEAR_DEAD_FLAG);
	 return res;
}

uint8_t pd_get_dead_flag(I2C_Handle_t *pI2CHandle)
{
 800318e:	b530      	push	{r4, r5, lr}
 8003190:	b085      	sub	sp, #20
	uint8_t buf[6];
	__vo uint8_t flag_val = 0xFF;
 8003192:	466b      	mov	r3, sp
 8003194:	1ddc      	adds	r4, r3, #7
 8003196:	23ff      	movs	r3, #255	; 0xff
 8003198:	7023      	strb	r3, [r4, #0]
	pd_read_register(pI2CHandle, PD_POWER_PATH_STATUS, &buf[0], 6);
 800319a:	ad02      	add	r5, sp, #8
 800319c:	3bf9      	subs	r3, #249	; 0xf9
 800319e:	002a      	movs	r2, r5
 80031a0:	2126      	movs	r1, #38	; 0x26
 80031a2:	f7ff feaa 	bl	8002efa <pd_read_register>
	flag_val = (buf[5] >> 6) & 0x03;
 80031a6:	796b      	ldrb	r3, [r5, #5]
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	7023      	strb	r3, [r4, #0]
	if(flag_val == 1){
 80031ac:	7823      	ldrb	r3, [r4, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d009      	beq.n	80031c6 <pd_get_dead_flag+0x38>
		flag_val = 0;
	}else if(flag_val == 2){
 80031b2:	466b      	mov	r3, sp
 80031b4:	3307      	adds	r3, #7
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d007      	beq.n	80031cc <pd_get_dead_flag+0x3e>
		flag_val = 1;
	}

	return flag_val;
 80031bc:	466b      	mov	r3, sp
 80031be:	79d8      	ldrb	r0, [r3, #7]
 80031c0:	b2c0      	uxtb	r0, r0
}
 80031c2:	b005      	add	sp, #20
 80031c4:	bd30      	pop	{r4, r5, pc}
		flag_val = 0;
 80031c6:	2200      	movs	r2, #0
 80031c8:	7022      	strb	r2, [r4, #0]
 80031ca:	e7f7      	b.n	80031bc <pd_get_dead_flag+0x2e>
		flag_val = 1;
 80031cc:	466b      	mov	r3, sp
 80031ce:	2201      	movs	r2, #1
 80031d0:	71da      	strb	r2, [r3, #7]
 80031d2:	e7f3      	b.n	80031bc <pd_get_dead_flag+0x2e>

080031d4 <pd_get_mode>:

uint8_t pd_get_mode(I2C_Handle_t *pI2CHandle)
{
 80031d4:	b510      	push	{r4, lr}
 80031d6:	b082      	sub	sp, #8
	__vo uint8_t pd_mode = 0xFF;
 80031d8:	466b      	mov	r3, sp
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	71da      	strb	r2, [r3, #7]
	pd_read_register(pI2CHandle, PD_MODE, &regData[0], 5);
 80031de:	4c23      	ldr	r4, [pc, #140]	; (800326c <pd_get_mode+0x98>)
 80031e0:	2305      	movs	r3, #5
 80031e2:	0022      	movs	r2, r4
 80031e4:	2103      	movs	r1, #3
 80031e6:	f7ff fe88 	bl	8002efa <pd_read_register>
    if(regData[1] == 0x41 && regData[2] == 0x50 && regData[3] == 0x50 && regData[4] == 0x20){
 80031ea:	7863      	ldrb	r3, [r4, #1]
 80031ec:	2b41      	cmp	r3, #65	; 0x41
 80031ee:	d00c      	beq.n	800320a <pd_get_mode+0x36>
    	pd_mode = PD_MODE_APP;
    }else if(regData[1] == 0x50 && regData[2] == 0x54 && regData[3] == 0x43 && regData[4] == 0x48){
 80031f0:	4b1e      	ldr	r3, [pc, #120]	; (800326c <pd_get_mode+0x98>)
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d018      	beq.n	800322a <pd_get_mode+0x56>
    	pd_mode = PD_MODE_PATCH;
    }else if(regData[1] == 0x42 && regData[2] == 0x4F && regData[3] == 0x4F && regData[4] == 0x54){
 80031f8:	4b1c      	ldr	r3, [pc, #112]	; (800326c <pd_get_mode+0x98>)
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	2b42      	cmp	r3, #66	; 0x42
 80031fe:	d024      	beq.n	800324a <pd_get_mode+0x76>
    	pd_mode = PD_MODE_BOOT;
    }
    return pd_mode;
 8003200:	466b      	mov	r3, sp
 8003202:	79d8      	ldrb	r0, [r3, #7]
 8003204:	b2c0      	uxtb	r0, r0
}
 8003206:	b002      	add	sp, #8
 8003208:	bd10      	pop	{r4, pc}
    if(regData[1] == 0x41 && regData[2] == 0x50 && regData[3] == 0x50 && regData[4] == 0x20){
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <pd_get_mode+0x98>)
 800320c:	789b      	ldrb	r3, [r3, #2]
 800320e:	2b50      	cmp	r3, #80	; 0x50
 8003210:	d1ee      	bne.n	80031f0 <pd_get_mode+0x1c>
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <pd_get_mode+0x98>)
 8003214:	78db      	ldrb	r3, [r3, #3]
 8003216:	2b50      	cmp	r3, #80	; 0x50
 8003218:	d1ea      	bne.n	80031f0 <pd_get_mode+0x1c>
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <pd_get_mode+0x98>)
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	2b20      	cmp	r3, #32
 8003220:	d1e6      	bne.n	80031f0 <pd_get_mode+0x1c>
    	pd_mode = PD_MODE_APP;
 8003222:	466b      	mov	r3, sp
 8003224:	2200      	movs	r2, #0
 8003226:	71da      	strb	r2, [r3, #7]
 8003228:	e7ea      	b.n	8003200 <pd_get_mode+0x2c>
    }else if(regData[1] == 0x50 && regData[2] == 0x54 && regData[3] == 0x43 && regData[4] == 0x48){
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <pd_get_mode+0x98>)
 800322c:	789b      	ldrb	r3, [r3, #2]
 800322e:	2b54      	cmp	r3, #84	; 0x54
 8003230:	d1e2      	bne.n	80031f8 <pd_get_mode+0x24>
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <pd_get_mode+0x98>)
 8003234:	78db      	ldrb	r3, [r3, #3]
 8003236:	2b43      	cmp	r3, #67	; 0x43
 8003238:	d1de      	bne.n	80031f8 <pd_get_mode+0x24>
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <pd_get_mode+0x98>)
 800323c:	791b      	ldrb	r3, [r3, #4]
 800323e:	2b48      	cmp	r3, #72	; 0x48
 8003240:	d1da      	bne.n	80031f8 <pd_get_mode+0x24>
    	pd_mode = PD_MODE_PATCH;
 8003242:	466b      	mov	r3, sp
 8003244:	2201      	movs	r2, #1
 8003246:	71da      	strb	r2, [r3, #7]
 8003248:	e7da      	b.n	8003200 <pd_get_mode+0x2c>
    }else if(regData[1] == 0x42 && regData[2] == 0x4F && regData[3] == 0x4F && regData[4] == 0x54){
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <pd_get_mode+0x98>)
 800324c:	789b      	ldrb	r3, [r3, #2]
 800324e:	2b4f      	cmp	r3, #79	; 0x4f
 8003250:	d1d6      	bne.n	8003200 <pd_get_mode+0x2c>
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <pd_get_mode+0x98>)
 8003254:	78db      	ldrb	r3, [r3, #3]
 8003256:	2b4f      	cmp	r3, #79	; 0x4f
 8003258:	d1d2      	bne.n	8003200 <pd_get_mode+0x2c>
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <pd_get_mode+0x98>)
 800325c:	791b      	ldrb	r3, [r3, #4]
 800325e:	2b54      	cmp	r3, #84	; 0x54
 8003260:	d1ce      	bne.n	8003200 <pd_get_mode+0x2c>
    	pd_mode = PD_MODE_BOOT;
 8003262:	466b      	mov	r3, sp
 8003264:	2202      	movs	r2, #2
 8003266:	71da      	strb	r2, [r3, #7]
 8003268:	e7ca      	b.n	8003200 <pd_get_mode+0x2c>
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	20000914 	.word	0x20000914

08003270 <pd_get_sleep_config>:
                ((uint32_t)pdo_buf[1]);
    return activePDO;
}

uint8_t pd_get_sleep_config(I2C_Handle_t *pI2CHandle)
{
 8003270:	b510      	push	{r4, lr}
 8003272:	b082      	sub	sp, #8
    uint8_t buf[2];
    pd_read_register(pI2CHandle, PD_SLEEP_CONFIG, &buf, 2);
 8003274:	ac01      	add	r4, sp, #4
 8003276:	2302      	movs	r3, #2
 8003278:	0022      	movs	r2, r4
 800327a:	2170      	movs	r1, #112	; 0x70
 800327c:	f7ff fe3d 	bl	8002efa <pd_read_register>
    return (buf[1] & 0x1);
 8003280:	7863      	ldrb	r3, [r4, #1]
 8003282:	2001      	movs	r0, #1
 8003284:	4018      	ands	r0, r3
}
 8003286:	b002      	add	sp, #8
 8003288:	bd10      	pop	{r4, pc}

0800328a <pd_set_sleep_config>:

uint8_t pd_set_sleep_config(I2C_Handle_t *pI2CHandle, uint8_t EnorDi)
{
 800328a:	b510      	push	{r4, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	0004      	movs	r4, r0
    uint8_t result;
    uint8_t buf[3] = {PD_SLEEP_CONFIG, 0x1, EnorDi};
 8003290:	aa01      	add	r2, sp, #4
 8003292:	2370      	movs	r3, #112	; 0x70
 8003294:	7013      	strb	r3, [r2, #0]
 8003296:	3b6f      	subs	r3, #111	; 0x6f
 8003298:	7053      	strb	r3, [r2, #1]
 800329a:	7091      	strb	r1, [r2, #2]
    pd_write_command(pI2CHandle, PD_SLEEP_CONFIG, &buf[0], 3);
 800329c:	3302      	adds	r3, #2
 800329e:	2170      	movs	r1, #112	; 0x70
 80032a0:	f7ff fe9e 	bl	8002fe0 <pd_write_command>

    result = pd_get_sleep_config(pI2CHandle);
 80032a4:	0020      	movs	r0, r4
 80032a6:	f7ff ffe3 	bl	8003270 <pd_get_sleep_config>
    return result;
}
 80032aa:	b002      	add	sp, #8
 80032ac:	bd10      	pop	{r4, pc}
	...

080032b0 <pd_interrupt_mask>:

void pd_interrupt_mask(I2C_Handle_t *pI2CHandle)
{
 80032b0:	b510      	push	{r4, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	0004      	movs	r4, r0
    uint8_t buf[13] = {PD_INT_MASK1, 11};
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <pd_interrupt_mask+0x34>)
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2209      	movs	r2, #9
 80032bc:	2100      	movs	r1, #0
 80032be:	a801      	add	r0, sp, #4
 80032c0:	f000 fe11 	bl	8003ee6 <memset>
    memset(&buf[2], 0x0, 11);
 80032c4:	220b      	movs	r2, #11
 80032c6:	2100      	movs	r1, #0
 80032c8:	466b      	mov	r3, sp
 80032ca:	1c98      	adds	r0, r3, #2
 80032cc:	f000 fe0b 	bl	8003ee6 <memset>
    buf[2] = 0x8;
 80032d0:	2308      	movs	r3, #8
 80032d2:	466a      	mov	r2, sp
 80032d4:	7093      	strb	r3, [r2, #2]
    pd_write_command(pI2CHandle, PD_SLEEP_CONFIG, &buf[0], 13);
 80032d6:	3305      	adds	r3, #5
 80032d8:	2170      	movs	r1, #112	; 0x70
 80032da:	0020      	movs	r0, r4
 80032dc:	f7ff fe80 	bl	8002fe0 <pd_write_command>

}
 80032e0:	b004      	add	sp, #16
 80032e2:	bd10      	pop	{r4, pc}
 80032e4:	00000b16 	.word	0x00000b16

080032e8 <pd_interrupt_clear>:

void pd_interrupt_clear(I2C_Handle_t *pI2CHandle, uint8_t interr, uint8_t* int_buf)
{
 80032e8:	b530      	push	{r4, r5, lr}
 80032ea:	b085      	sub	sp, #20
 80032ec:	0005      	movs	r5, r0
 80032ee:	000c      	movs	r4, r1
    uint8_t buf[13] = {PD_INT_CLEAR1, 11};
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <pd_interrupt_clear+0x54>)
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2209      	movs	r2, #9
 80032f6:	2100      	movs	r1, #0
 80032f8:	a801      	add	r0, sp, #4
 80032fa:	f000 fdf4 	bl	8003ee6 <memset>
    memset(&buf[2], 0x0, 11);
 80032fe:	220b      	movs	r2, #11
 8003300:	2100      	movs	r1, #0
 8003302:	466b      	mov	r3, sp
 8003304:	1c98      	adds	r0, r3, #2
 8003306:	f000 fdee 	bl	8003ee6 <memset>

    if(interr == PD_INT_PlugInsertOrRemoval)
 800330a:	2c03      	cmp	r4, #3
 800330c:	d003      	beq.n	8003316 <pd_interrupt_clear+0x2e>
    {
        buf[2] = 0x8;
        pd_write_command(pI2CHandle, PD_INT_CLEAR1, &buf[0], 13);

    }else if(interr == PD_INT_PRSwapComplete)
 800330e:	2c04      	cmp	r4, #4
 8003310:	d00a      	beq.n	8003328 <pd_interrupt_clear+0x40>
    {
        buf[2] = 0x10;
        pd_write_command(pI2CHandle, PD_INT_CLEAR1, &buf[0], 13);

    }
}
 8003312:	b005      	add	sp, #20
 8003314:	bd30      	pop	{r4, r5, pc}
        buf[2] = 0x8;
 8003316:	2308      	movs	r3, #8
 8003318:	466a      	mov	r2, sp
 800331a:	7093      	strb	r3, [r2, #2]
        pd_write_command(pI2CHandle, PD_INT_CLEAR1, &buf[0], 13);
 800331c:	3305      	adds	r3, #5
 800331e:	2118      	movs	r1, #24
 8003320:	0028      	movs	r0, r5
 8003322:	f7ff fe5d 	bl	8002fe0 <pd_write_command>
 8003326:	e7f4      	b.n	8003312 <pd_interrupt_clear+0x2a>
        buf[2] = 0x10;
 8003328:	2310      	movs	r3, #16
 800332a:	466a      	mov	r2, sp
 800332c:	7093      	strb	r3, [r2, #2]
        pd_write_command(pI2CHandle, PD_INT_CLEAR1, &buf[0], 13);
 800332e:	3b03      	subs	r3, #3
 8003330:	2118      	movs	r1, #24
 8003332:	0028      	movs	r0, r5
 8003334:	f7ff fe54 	bl	8002fe0 <pd_write_command>
}
 8003338:	e7eb      	b.n	8003312 <pd_interrupt_clear+0x2a>
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	00000b18 	.word	0x00000b18

08003340 <pd_interrupt_clear_all>:

void pd_interrupt_clear_all(I2C_Handle_t *pI2CHandle)
{
 8003340:	b510      	push	{r4, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	0004      	movs	r4, r0
    uint8_t buf[13] = {PD_INT_CLEAR1, 11};
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <pd_interrupt_clear_all+0x30>)
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2209      	movs	r2, #9
 800334c:	2100      	movs	r1, #0
 800334e:	a801      	add	r0, sp, #4
 8003350:	f000 fdc9 	bl	8003ee6 <memset>
    memset(&buf[2], 0xFF, 11);
 8003354:	220b      	movs	r2, #11
 8003356:	21ff      	movs	r1, #255	; 0xff
 8003358:	466b      	mov	r3, sp
 800335a:	1c98      	adds	r0, r3, #2
 800335c:	f000 fdc3 	bl	8003ee6 <memset>
    pd_write_command(pI2CHandle, PD_INT_CLEAR1, &buf[0], 13);
 8003360:	230d      	movs	r3, #13
 8003362:	466a      	mov	r2, sp
 8003364:	2118      	movs	r1, #24
 8003366:	0020      	movs	r0, r4
 8003368:	f7ff fe3a 	bl	8002fe0 <pd_write_command>

}
 800336c:	b004      	add	sp, #16
 800336e:	bd10      	pop	{r4, pc}
 8003370:	00000b18 	.word	0x00000b18

08003374 <pd_IRQHandling>:

void pd_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	0004      	movs	r4, r0
    uint8_t buf[12];
    pd_read_register(pI2CHandle, PD_INT_EVENT1, &buf[0], 12);
 800337a:	ad01      	add	r5, sp, #4
 800337c:	230c      	movs	r3, #12
 800337e:	002a      	movs	r2, r5
 8003380:	2114      	movs	r1, #20
 8003382:	f7ff fdba 	bl	8002efa <pd_read_register>

    if( (buf[1] >> PD_INT_PlugInsertOrRemoval) & 0x1){
 8003386:	786b      	ldrb	r3, [r5, #1]
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	d401      	bmi.n	8003390 <pd_IRQHandling+0x1c>
        	}
        }else{
            power_direction = 2;
        }
    }
}
 800338c:	b004      	add	sp, #16
 800338e:	bd70      	pop	{r4, r5, r6, pc}
        pd_interrupt_clear(pI2CHandle, PD_INT_PlugInsertOrRemoval, &buf[0]);
 8003390:	002a      	movs	r2, r5
 8003392:	2103      	movs	r1, #3
 8003394:	0020      	movs	r0, r4
 8003396:	f7ff ffa7 	bl	80032e8 <pd_interrupt_clear>
        delay(200000);
 800339a:	4e10      	ldr	r6, [pc, #64]	; (80033dc <pd_IRQHandling+0x68>)
 800339c:	0030      	movs	r0, r6
 800339e:	f7ff f991 	bl	80026c4 <delay>
        plugAction = pd_get_plug_detect(pI2CHandle);
 80033a2:	0020      	movs	r0, r4
 80033a4:	f7ff fec8 	bl	8003138 <pd_get_plug_detect>
 80033a8:	4d0d      	ldr	r5, [pc, #52]	; (80033e0 <pd_IRQHandling+0x6c>)
 80033aa:	7028      	strb	r0, [r5, #0]
        delay(200000);
 80033ac:	0030      	movs	r0, r6
 80033ae:	f7ff f989 	bl	80026c4 <delay>
        if(plugAction == PD_PLUG_CONNECTED){
 80033b2:	782b      	ldrb	r3, [r5, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d003      	beq.n	80033c0 <pd_IRQHandling+0x4c>
            power_direction = 2;
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <pd_IRQHandling+0x70>)
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
}
 80033be:	e7e5      	b.n	800338c <pd_IRQHandling+0x18>
        	power_direction = pd_get_power_direction(pI2CHandle);
 80033c0:	0020      	movs	r0, r4
 80033c2:	f7ff fec7 	bl	8003154 <pd_get_power_direction>
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <pd_IRQHandling+0x70>)
 80033c8:	7018      	strb	r0, [r3, #0]
        	if(power_direction == SOURCING){
 80033ca:	2801      	cmp	r0, #1
 80033cc:	d1de      	bne.n	800338c <pd_IRQHandling+0x18>
        		delay(200000);
 80033ce:	0030      	movs	r0, r6
 80033d0:	f7ff f978 	bl	80026c4 <delay>
        		pd_swap_to_UFP(pI2CHandle);
 80033d4:	0020      	movs	r0, r4
 80033d6:	f7ff fed5 	bl	8003184 <pd_swap_to_UFP>
 80033da:	e7d7      	b.n	800338c <pd_IRQHandling+0x18>
 80033dc:	00030d40 	.word	0x00030d40
 80033e0:	20000910 	.word	0x20000910
 80033e4:	20000064 	.word	0x20000064

080033e8 <pd_patch_eprom>:

void pd_patch_eprom(I2C_Handle_t *pI2CHandle, uint8_t* buf, uint8_t len)
{
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	0006      	movs	r6, r0
 80033ee:	000d      	movs	r5, r1
 80033f0:	0014      	movs	r4, r2
	while(I2C_MasterSendDataIT(pI2CHandle, buf, len, EPROM_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80033f2:	2301      	movs	r3, #1
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	334f      	adds	r3, #79	; 0x4f
 80033f8:	0022      	movs	r2, r4
 80033fa:	0029      	movs	r1, r5
 80033fc:	0030      	movs	r0, r6
 80033fe:	f7ff fbc2 	bl	8002b86 <I2C_MasterSendDataIT>
 8003402:	2800      	cmp	r0, #0
 8003404:	d1f5      	bne.n	80033f2 <pd_patch_eprom+0xa>
}
 8003406:	b002      	add	sp, #8
 8003408:	bd70      	pop	{r4, r5, r6, pc}
	...

0800340c <gauge_read_register>:

    return batteryLevel;
}

void gauge_read_register(I2C_Handle_t *pI2CHandle, uint8_t reg_addr, uint8_t *buffer, uint8_t size)
{
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	0004      	movs	r4, r0
 8003412:	0015      	movs	r5, r2
 8003414:	001e      	movs	r6, r3
 8003416:	230f      	movs	r3, #15
 8003418:	446b      	add	r3, sp
 800341a:	7019      	strb	r1, [r3, #0]
   delay(200000);
 800341c:	4810      	ldr	r0, [pc, #64]	; (8003460 <gauge_read_register+0x54>)
 800341e:	f7ff f951 	bl	80026c4 <delay>
   while(I2C_MasterSendDataIT(pI2CHandle, &reg_addr, 1, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8003422:	2001      	movs	r0, #1
 8003424:	9000      	str	r0, [sp, #0]
 8003426:	2355      	movs	r3, #85	; 0x55
 8003428:	2201      	movs	r2, #1
 800342a:	210f      	movs	r1, #15
 800342c:	4469      	add	r1, sp
 800342e:	0020      	movs	r0, r4
 8003430:	f7ff fba9 	bl	8002b86 <I2C_MasterSendDataIT>
 8003434:	2800      	cmp	r0, #0
 8003436:	d1f4      	bne.n	8003422 <gauge_read_register+0x16>

   pI2CHandle->rxCmplt = RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	7723      	strb	r3, [r4, #28]
   while(I2C_MasterReceiveDataIT(pI2CHandle, buffer, size, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800343c:	2001      	movs	r0, #1
 800343e:	9000      	str	r0, [sp, #0]
 8003440:	2355      	movs	r3, #85	; 0x55
 8003442:	0032      	movs	r2, r6
 8003444:	0029      	movs	r1, r5
 8003446:	0020      	movs	r0, r4
 8003448:	f7ff fbcc 	bl	8002be4 <I2C_MasterReceiveDataIT>
 800344c:	2800      	cmp	r0, #0
 800344e:	d1f5      	bne.n	800343c <gauge_read_register+0x30>

   while(pI2CHandle->rxCmplt != SET)
 8003450:	7f23      	ldrb	r3, [r4, #28]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d1fc      	bne.n	8003450 <gauge_read_register+0x44>
   {

   }
   pI2CHandle->rxCmplt = RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	7723      	strb	r3, [r4, #28]
}
 800345a:	b004      	add	sp, #16
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	00030d40 	.word	0x00030d40

08003464 <get_bat_SOC>:
//	get_bat_time_to_empty(pI2CHandle, batReport);
//	get_bat_time_to_full(pI2CHandle, batReport);
}

void get_bat_SOC(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 8003464:	b530      	push	{r4, r5, lr}
 8003466:	b083      	sub	sp, #12
 8003468:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x02, &rcv_buf[0], 2);
 800346a:	ad01      	add	r5, sp, #4
 800346c:	2302      	movs	r3, #2
 800346e:	002a      	movs	r2, r5
 8003470:	2102      	movs	r1, #2
 8003472:	f7ff ffcb 	bl	800340c <gauge_read_register>
    batReport->SOC =rcv_buf[0];
 8003476:	782b      	ldrb	r3, [r5, #0]
 8003478:	7023      	strb	r3, [r4, #0]
}
 800347a:	b003      	add	sp, #12
 800347c:	bd30      	pop	{r4, r5, pc}

0800347e <get_bat_SOH>:

void get_bat_SOH(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 800347e:	b530      	push	{r4, r5, lr}
 8003480:	b083      	sub	sp, #12
 8003482:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x2E, &rcv_buf[0], 2);
 8003484:	ad01      	add	r5, sp, #4
 8003486:	2302      	movs	r3, #2
 8003488:	002a      	movs	r2, r5
 800348a:	212e      	movs	r1, #46	; 0x2e
 800348c:	f7ff ffbe 	bl	800340c <gauge_read_register>
    batReport->SOH =rcv_buf[0];
 8003490:	782b      	ldrb	r3, [r5, #0]
 8003492:	7063      	strb	r3, [r4, #1]
}
 8003494:	b003      	add	sp, #12
 8003496:	bd30      	pop	{r4, r5, pc}

08003498 <get_bat_remaining_capacity>:

void get_bat_remaining_capacity(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 8003498:	b510      	push	{r4, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x04, &rcv_buf[0], 2);
 800349e:	2302      	movs	r3, #2
 80034a0:	aa01      	add	r2, sp, #4
 80034a2:	2104      	movs	r1, #4
 80034a4:	f7ff ffb2 	bl	800340c <gauge_read_register>
    batReport->remainingCapacity[0] =rcv_buf[0];
 80034a8:	466b      	mov	r3, sp
 80034aa:	791b      	ldrb	r3, [r3, #4]
 80034ac:	70a3      	strb	r3, [r4, #2]
    batReport->remainingCapacity[1] =rcv_buf[1];
 80034ae:	466b      	mov	r3, sp
 80034b0:	795b      	ldrb	r3, [r3, #5]
 80034b2:	70e3      	strb	r3, [r4, #3]
}
 80034b4:	b002      	add	sp, #8
 80034b6:	bd10      	pop	{r4, pc}

080034b8 <get_bat_full_capacity>:

void get_bat_full_capacity(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 80034b8:	b510      	push	{r4, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x06, &rcv_buf[0], 2);
 80034be:	2302      	movs	r3, #2
 80034c0:	aa01      	add	r2, sp, #4
 80034c2:	2106      	movs	r1, #6
 80034c4:	f7ff ffa2 	bl	800340c <gauge_read_register>
    batReport->fullCapacity[0] =rcv_buf[0];
 80034c8:	466b      	mov	r3, sp
 80034ca:	791b      	ldrb	r3, [r3, #4]
 80034cc:	7123      	strb	r3, [r4, #4]
    batReport->fullCapacity[1] =rcv_buf[1];
 80034ce:	466b      	mov	r3, sp
 80034d0:	795b      	ldrb	r3, [r3, #5]
 80034d2:	7163      	strb	r3, [r4, #5]
}
 80034d4:	b002      	add	sp, #8
 80034d6:	bd10      	pop	{r4, pc}

080034d8 <get_bat_voltage>:

void get_bat_voltage(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 80034d8:	b510      	push	{r4, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x08, &rcv_buf[0], 2);
 80034de:	2302      	movs	r3, #2
 80034e0:	aa01      	add	r2, sp, #4
 80034e2:	2108      	movs	r1, #8
 80034e4:	f7ff ff92 	bl	800340c <gauge_read_register>
	batReport->voltage[0] = rcv_buf[0];
 80034e8:	466b      	mov	r3, sp
 80034ea:	791b      	ldrb	r3, [r3, #4]
 80034ec:	71a3      	strb	r3, [r4, #6]
	batReport->voltage[1] = rcv_buf[1];
 80034ee:	466b      	mov	r3, sp
 80034f0:	795b      	ldrb	r3, [r3, #5]
 80034f2:	71e3      	strb	r3, [r4, #7]

}
 80034f4:	b002      	add	sp, #8
 80034f6:	bd10      	pop	{r4, pc}

080034f8 <get_bat_current>:

void get_bat_current(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 80034f8:	b510      	push	{r4, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x10, &rcv_buf[0], 2);
 80034fe:	2302      	movs	r3, #2
 8003500:	aa01      	add	r2, sp, #4
 8003502:	2110      	movs	r1, #16
 8003504:	f7ff ff82 	bl	800340c <gauge_read_register>
	batReport->current[0] = rcv_buf[0];
 8003508:	466b      	mov	r3, sp
 800350a:	791b      	ldrb	r3, [r3, #4]
 800350c:	7223      	strb	r3, [r4, #8]
	batReport->current[1] = rcv_buf[1];
 800350e:	466b      	mov	r3, sp
 8003510:	795b      	ldrb	r3, [r3, #5]
 8003512:	7263      	strb	r3, [r4, #9]
}
 8003514:	b002      	add	sp, #8
 8003516:	bd10      	pop	{r4, pc}

08003518 <get_bat_temperature>:

void get_bat_temperature(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 8003518:	b510      	push	{r4, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x0C, &rcv_buf[0], 2);
 800351e:	2302      	movs	r3, #2
 8003520:	aa01      	add	r2, sp, #4
 8003522:	210c      	movs	r1, #12
 8003524:	f7ff ff72 	bl	800340c <gauge_read_register>
    batReport->temperature[0] =rcv_buf[0];
 8003528:	466b      	mov	r3, sp
 800352a:	791b      	ldrb	r3, [r3, #4]
 800352c:	72a3      	strb	r3, [r4, #10]
    batReport->temperature[1] =rcv_buf[1];
 800352e:	466b      	mov	r3, sp
 8003530:	795b      	ldrb	r3, [r3, #5]
 8003532:	72e3      	strb	r3, [r4, #11]
}
 8003534:	b002      	add	sp, #8
 8003536:	bd10      	pop	{r4, pc}

08003538 <get_bat_time_to_empty>:

void get_bat_time_to_empty(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 8003538:	b510      	push	{r4, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x18, &rcv_buf[0], 2);
 800353e:	2302      	movs	r3, #2
 8003540:	aa01      	add	r2, sp, #4
 8003542:	2118      	movs	r1, #24
 8003544:	f7ff ff62 	bl	800340c <gauge_read_register>
    batReport->timeToEmpty[0] =rcv_buf[0];
 8003548:	466b      	mov	r3, sp
 800354a:	791b      	ldrb	r3, [r3, #4]
 800354c:	7323      	strb	r3, [r4, #12]
    batReport->timeToEmpty[1] =rcv_buf[1];
 800354e:	466b      	mov	r3, sp
 8003550:	795b      	ldrb	r3, [r3, #5]
 8003552:	7363      	strb	r3, [r4, #13]
}
 8003554:	b002      	add	sp, #8
 8003556:	bd10      	pop	{r4, pc}

08003558 <get_bat_time_to_full>:

void get_bat_time_to_full(I2C_Handle_t *pI2CHandle, BatteryReport *batReport)
{
 8003558:	b510      	push	{r4, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	000c      	movs	r4, r1
	uint8_t rcv_buf[2];

	gauge_read_register(pI2CHandle, 0x1A, &rcv_buf[0], 2);
 800355e:	2302      	movs	r3, #2
 8003560:	aa01      	add	r2, sp, #4
 8003562:	211a      	movs	r1, #26
 8003564:	f7ff ff52 	bl	800340c <gauge_read_register>
    batReport->timeToFull[0] =rcv_buf[0];
 8003568:	466b      	mov	r3, sp
 800356a:	791b      	ldrb	r3, [r3, #4]
 800356c:	73a3      	strb	r3, [r4, #14]
    batReport->timeToFull[1] =rcv_buf[1];
 800356e:	466b      	mov	r3, sp
 8003570:	795b      	ldrb	r3, [r3, #5]
 8003572:	73e3      	strb	r3, [r4, #15]
}
 8003574:	b002      	add	sp, #8
 8003576:	bd10      	pop	{r4, pc}

08003578 <get_bat_report>:
{
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	0004      	movs	r4, r0
 800357c:	000d      	movs	r5, r1
		get_bat_voltage(pI2CHandle, batReport);
 800357e:	f7ff ffab 	bl	80034d8 <get_bat_voltage>
		get_bat_current(pI2CHandle, batReport);
 8003582:	0029      	movs	r1, r5
 8003584:	0020      	movs	r0, r4
 8003586:	f7ff ffb7 	bl	80034f8 <get_bat_current>
		get_bat_SOC(pI2CHandle, batReport);
 800358a:	0029      	movs	r1, r5
 800358c:	0020      	movs	r0, r4
 800358e:	f7ff ff69 	bl	8003464 <get_bat_SOC>
		get_bat_SOH(pI2CHandle, batReport);
 8003592:	0029      	movs	r1, r5
 8003594:	0020      	movs	r0, r4
 8003596:	f7ff ff72 	bl	800347e <get_bat_SOH>
		get_bat_remaining_capacity(pI2CHandle, batReport);
 800359a:	0029      	movs	r1, r5
 800359c:	0020      	movs	r0, r4
 800359e:	f7ff ff7b 	bl	8003498 <get_bat_remaining_capacity>
		get_bat_full_capacity(pI2CHandle, batReport);
 80035a2:	0029      	movs	r1, r5
 80035a4:	0020      	movs	r0, r4
 80035a6:	f7ff ff87 	bl	80034b8 <get_bat_full_capacity>
		get_bat_temperature(pI2CHandle, batReport);
 80035aa:	0029      	movs	r1, r5
 80035ac:	0020      	movs	r0, r4
 80035ae:	f7ff ffb3 	bl	8003518 <get_bat_temperature>
		get_bat_time_to_empty(pI2CHandle, batReport);
 80035b2:	0029      	movs	r1, r5
 80035b4:	0020      	movs	r0, r4
 80035b6:	f7ff ffbf 	bl	8003538 <get_bat_time_to_empty>
		get_bat_time_to_full(pI2CHandle, batReport);
 80035ba:	0029      	movs	r1, r5
 80035bc:	0020      	movs	r0, r4
 80035be:	f7ff ffcb 	bl	8003558 <get_bat_time_to_full>
}
 80035c2:	bd70      	pop	{r4, r5, r6, pc}

080035c4 <gauge_unseal>:
	delay(200000);

}

void gauge_unseal(I2C_Handle_t *pI2CHandle)
{
 80035c4:	b510      	push	{r4, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	0004      	movs	r4, r0
	uint8_t rcv_buffer[2];
	uint8_t buf[3] = { 0x00, 0x14, 0x04 };
 80035ca:	ab02      	add	r3, sp, #8
 80035cc:	4a2a      	ldr	r2, [pc, #168]	; (8003678 <gauge_unseal+0xb4>)
 80035ce:	8911      	ldrh	r1, [r2, #8]
 80035d0:	8019      	strh	r1, [r3, #0]
 80035d2:	7a92      	ldrb	r2, [r2, #10]
 80035d4:	709a      	strb	r2, [r3, #2]
	while(I2C_MasterSendDataIT(pI2CHandle, &buf[0], 3, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80035d6:	2301      	movs	r3, #1
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	3354      	adds	r3, #84	; 0x54
 80035dc:	2203      	movs	r2, #3
 80035de:	a902      	add	r1, sp, #8
 80035e0:	0020      	movs	r0, r4
 80035e2:	f7ff fad0 	bl	8002b86 <I2C_MasterSendDataIT>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d1f5      	bne.n	80035d6 <gauge_unseal+0x12>
	delay(200000);
 80035ea:	4824      	ldr	r0, [pc, #144]	; (800367c <gauge_unseal+0xb8>)
 80035ec:	f7ff f86a 	bl	80026c4 <delay>
	buf[0] = 0x00;
 80035f0:	ab02      	add	r3, sp, #8
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x72;
 80035f6:	3272      	adds	r2, #114	; 0x72
 80035f8:	705a      	strb	r2, [r3, #1]
	buf[2] = 0x36;
 80035fa:	3a3c      	subs	r2, #60	; 0x3c
 80035fc:	709a      	strb	r2, [r3, #2]
	while(I2C_MasterSendDataIT(pI2CHandle, &buf[0], 3, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80035fe:	2301      	movs	r3, #1
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	3354      	adds	r3, #84	; 0x54
 8003604:	2203      	movs	r2, #3
 8003606:	a902      	add	r1, sp, #8
 8003608:	0020      	movs	r0, r4
 800360a:	f7ff fabc 	bl	8002b86 <I2C_MasterSendDataIT>
 800360e:	2800      	cmp	r0, #0
 8003610:	d1f5      	bne.n	80035fe <gauge_unseal+0x3a>
	delay(200000);
 8003612:	481a      	ldr	r0, [pc, #104]	; (800367c <gauge_unseal+0xb8>)
 8003614:	f7ff f856 	bl	80026c4 <delay>
	memset(buf, 0, 3);
 8003618:	2203      	movs	r2, #3
 800361a:	2100      	movs	r1, #0
 800361c:	a802      	add	r0, sp, #8
 800361e:	f000 fc62 	bl	8003ee6 <memset>
	while(I2C_MasterSendDataIT(pI2CHandle, &buf[0], 3, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8003622:	2301      	movs	r3, #1
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	3354      	adds	r3, #84	; 0x54
 8003628:	2203      	movs	r2, #3
 800362a:	a902      	add	r1, sp, #8
 800362c:	0020      	movs	r0, r4
 800362e:	f7ff faaa 	bl	8002b86 <I2C_MasterSendDataIT>
 8003632:	2800      	cmp	r0, #0
 8003634:	d1f5      	bne.n	8003622 <gauge_unseal+0x5e>
	delay(200000);
 8003636:	4811      	ldr	r0, [pc, #68]	; (800367c <gauge_unseal+0xb8>)
 8003638:	f7ff f844 	bl	80026c4 <delay>
	while(I2C_MasterSendDataIT(pI2CHandle, 0x00, 1, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800363c:	2301      	movs	r3, #1
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	3354      	adds	r3, #84	; 0x54
 8003642:	2201      	movs	r2, #1
 8003644:	2100      	movs	r1, #0
 8003646:	0020      	movs	r0, r4
 8003648:	f7ff fa9d 	bl	8002b86 <I2C_MasterSendDataIT>
 800364c:	2800      	cmp	r0, #0
 800364e:	d1f5      	bne.n	800363c <gauge_unseal+0x78>

	pI2CHandle->rxCmplt = RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	7723      	strb	r3, [r4, #28]
	while(I2C_MasterReceiveDataIT(pI2CHandle, rcv_buffer, 2, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8003654:	2301      	movs	r3, #1
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	3354      	adds	r3, #84	; 0x54
 800365a:	2202      	movs	r2, #2
 800365c:	a903      	add	r1, sp, #12
 800365e:	0020      	movs	r0, r4
 8003660:	f7ff fac0 	bl	8002be4 <I2C_MasterReceiveDataIT>
 8003664:	2800      	cmp	r0, #0
 8003666:	d1f5      	bne.n	8003654 <gauge_unseal+0x90>

	while(pI2CHandle->rxCmplt != SET)
 8003668:	7f23      	ldrb	r3, [r4, #28]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d1fc      	bne.n	8003668 <gauge_unseal+0xa4>
	{

	}
	pI2CHandle->rxCmplt = RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	7723      	strb	r3, [r4, #28]
}
 8003672:	b004      	add	sp, #16
 8003674:	bd10      	pop	{r4, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	08003f10 	.word	0x08003f10
 800367c:	00030d40 	.word	0x00030d40

08003680 <gauge_reset>:

void gauge_reset(I2C_Handle_t *pI2CHandle)
{
 8003680:	b510      	push	{r4, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	0004      	movs	r4, r0
	uint8_t buf[3] = { 0x00, 0x41, 0x00 };
 8003686:	ab03      	add	r3, sp, #12
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <gauge_reset+0x30>)
 800368a:	8991      	ldrh	r1, [r2, #12]
 800368c:	8019      	strh	r1, [r3, #0]
 800368e:	7b92      	ldrb	r2, [r2, #14]
 8003690:	709a      	strb	r2, [r3, #2]
	while(I2C_MasterSendDataIT(pI2CHandle, &buf[0], 3, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8003692:	2301      	movs	r3, #1
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	3354      	adds	r3, #84	; 0x54
 8003698:	2203      	movs	r2, #3
 800369a:	a903      	add	r1, sp, #12
 800369c:	0020      	movs	r0, r4
 800369e:	f7ff fa72 	bl	8002b86 <I2C_MasterSendDataIT>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d1f5      	bne.n	8003692 <gauge_reset+0x12>
	delay(200000);
 80036a6:	4803      	ldr	r0, [pc, #12]	; (80036b4 <gauge_reset+0x34>)
 80036a8:	f7ff f80c 	bl	80026c4 <delay>
}
 80036ac:	b004      	add	sp, #16
 80036ae:	bd10      	pop	{r4, pc}
 80036b0:	08003f10 	.word	0x08003f10
 80036b4:	00030d40 	.word	0x00030d40

080036b8 <gauge_full_sleep_enable>:

void gauge_full_sleep_enable(I2C_Handle_t *pI2CHandle)
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	0004      	movs	r4, r0
	uint8_t buf[3] = { 0x00, 0x10, 0x00 };
 80036be:	ab03      	add	r3, sp, #12
 80036c0:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <gauge_full_sleep_enable+0x30>)
 80036c2:	8a11      	ldrh	r1, [r2, #16]
 80036c4:	8019      	strh	r1, [r3, #0]
 80036c6:	7c92      	ldrb	r2, [r2, #18]
 80036c8:	709a      	strb	r2, [r3, #2]
	while(I2C_MasterSendDataIT(pI2CHandle, &buf[0], 3, GAUGE_SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80036ca:	2301      	movs	r3, #1
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	3354      	adds	r3, #84	; 0x54
 80036d0:	2203      	movs	r2, #3
 80036d2:	a903      	add	r1, sp, #12
 80036d4:	0020      	movs	r0, r4
 80036d6:	f7ff fa56 	bl	8002b86 <I2C_MasterSendDataIT>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d1f5      	bne.n	80036ca <gauge_full_sleep_enable+0x12>
	delay(200000);
 80036de:	4803      	ldr	r0, [pc, #12]	; (80036ec <gauge_full_sleep_enable+0x34>)
 80036e0:	f7fe fff0 	bl	80026c4 <delay>
}
 80036e4:	b004      	add	sp, #16
 80036e6:	bd10      	pop	{r4, pc}
 80036e8:	08003f10 	.word	0x08003f10
 80036ec:	00030d40 	.word	0x00030d40

080036f0 <gauge_flash_write_binary>:

	gauge_read_register(pI2CHandle, 0x00, rcv_buf, 2);
}

void gauge_flash_write_binary(I2C_Handle_t *pI2CHandle, uint8_t* buf, uint8_t len)
{
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	b083      	sub	sp, #12
 80036f4:	0006      	movs	r6, r0
 80036f6:	000c      	movs	r4, r1
 80036f8:	0015      	movs	r5, r2
	uint8_t addr = buf[1];
 80036fa:	784f      	ldrb	r7, [r1, #1]
	while(I2C_MasterSendDataIT(pI2CHandle, &buf[2], len, addr, I2C_ENABLE_SR) != I2C_READY);
 80036fc:	1ca1      	adds	r1, r4, #2
 80036fe:	2301      	movs	r3, #1
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	003b      	movs	r3, r7
 8003704:	002a      	movs	r2, r5
 8003706:	0030      	movs	r0, r6
 8003708:	f7ff fa3d 	bl	8002b86 <I2C_MasterSendDataIT>
 800370c:	2800      	cmp	r0, #0
 800370e:	d1f5      	bne.n	80036fc <gauge_flash_write_binary+0xc>
}
 8003710:	b003      	add	sp, #12
 8003712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003714 <gauge_flash_read_binary>:

bool gauge_flash_read_binary(I2C_Handle_t *pI2CHandle, uint8_t* buf, uint8_t len)
{
 8003714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003716:	46ce      	mov	lr, r9
 8003718:	4647      	mov	r7, r8
 800371a:	b580      	push	{r7, lr}
 800371c:	b085      	sub	sp, #20
 800371e:	af02      	add	r7, sp, #8
 8003720:	0004      	movs	r4, r0
 8003722:	4688      	mov	r8, r1
	uint8_t addr = buf[1];
 8003724:	784b      	ldrb	r3, [r1, #1]
 8003726:	4699      	mov	r9, r3
	uint8_t reg_addr = buf[2];
 8003728:	788b      	ldrb	r3, [r1, #2]
 800372a:	71fb      	strb	r3, [r7, #7]
	uint8_t read_size = buf[3];
 800372c:	78cd      	ldrb	r5, [r1, #3]
	uint8_t buffer[read_size];
 800372e:	1deb      	adds	r3, r5, #7
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	466a      	mov	r2, sp
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	469d      	mov	sp, r3
 800373a:	ae02      	add	r6, sp, #8

	while(I2C_MasterSendDataIT(pI2CHandle, &reg_addr, 1, addr, I2C_ENABLE_SR) != I2C_READY);
 800373c:	2301      	movs	r3, #1
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	464b      	mov	r3, r9
 8003742:	2201      	movs	r2, #1
 8003744:	1df9      	adds	r1, r7, #7
 8003746:	0020      	movs	r0, r4
 8003748:	f7ff fa1d 	bl	8002b86 <I2C_MasterSendDataIT>
 800374c:	2800      	cmp	r0, #0
 800374e:	d1f5      	bne.n	800373c <gauge_flash_read_binary+0x28>

	pI2CHandle->rxCmplt = RESET;
 8003750:	2300      	movs	r3, #0
 8003752:	7723      	strb	r3, [r4, #28]
	while(I2C_MasterReceiveDataIT(pI2CHandle, buffer, read_size, addr, I2C_ENABLE_SR) != I2C_READY);
 8003754:	2301      	movs	r3, #1
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	464b      	mov	r3, r9
 800375a:	002a      	movs	r2, r5
 800375c:	0031      	movs	r1, r6
 800375e:	0020      	movs	r0, r4
 8003760:	f7ff fa40 	bl	8002be4 <I2C_MasterReceiveDataIT>
 8003764:	2800      	cmp	r0, #0
 8003766:	d1f5      	bne.n	8003754 <gauge_flash_read_binary+0x40>

	while(pI2CHandle->rxCmplt != SET)
 8003768:	7f23      	ldrb	r3, [r4, #28]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d1fc      	bne.n	8003768 <gauge_flash_read_binary+0x54>
	{

	}
	pI2CHandle->rxCmplt = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	7723      	strb	r3, [r4, #28]

    for (uint8_t i = 0; i < read_size; i++)
 8003772:	e001      	b.n	8003778 <gauge_flash_read_binary+0x64>
 8003774:	3001      	adds	r0, #1
 8003776:	b2c0      	uxtb	r0, r0
 8003778:	42a8      	cmp	r0, r5
 800377a:	d207      	bcs.n	800378c <gauge_flash_read_binary+0x78>
    {
        if (buffer[i] != buf[i + 3])
 800377c:	5c32      	ldrb	r2, [r6, r0]
 800377e:	4643      	mov	r3, r8
 8003780:	181b      	adds	r3, r3, r0
 8003782:	78db      	ldrb	r3, [r3, #3]
 8003784:	429a      	cmp	r2, r3
 8003786:	d0f5      	beq.n	8003774 <gauge_flash_read_binary+0x60>
        {
            return false;
 8003788:	2000      	movs	r0, #0
 800378a:	e000      	b.n	800378e <gauge_flash_read_binary+0x7a>
        }
    }

    return true;
 800378c:	2001      	movs	r0, #1
}
 800378e:	46bd      	mov	sp, r7
 8003790:	b003      	add	sp, #12
 8003792:	bcc0      	pop	{r6, r7}
 8003794:	46b9      	mov	r9, r7
 8003796:	46b0      	mov	r8, r6
 8003798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800379c <IO_Init>:
TIM_HandleTypeDef htim3;

IWDG_HandleTypeDef hiwdg;

void IO_Init()
{
 800379c:	b530      	push	{r4, r5, lr}
 800379e:	b089      	sub	sp, #36	; 0x24
	GPIO_Init_Base();
 80037a0:	f7ff f8f8 	bl	8002994 <GPIO_Init_Base>

	TIM_OC_InitTypeDef timPWM_Config;

	htim3.Instance = TIM3;
 80037a4:	4c1e      	ldr	r4, [pc, #120]	; (8003820 <IO_Init+0x84>)
 80037a6:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <IO_Init+0x88>)
 80037a8:	6023      	str	r3, [r4, #0]
	htim3.Init.Prescaler = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	6063      	str	r3, [r4, #4]
	htim3.Init.Period = 0xFFFF;
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <IO_Init+0x8c>)
 80037b0:	60e3      	str	r3, [r4, #12]

    TIM3_PCLK_EN();
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <IO_Init+0x90>)
 80037b4:	69d3      	ldr	r3, [r2, #28]
 80037b6:	2502      	movs	r5, #2
 80037b8:	432b      	orrs	r3, r5
 80037ba:	61d3      	str	r3, [r2, #28]

	GPIO_IRQPriorityConfig(TIM3_IRQn, 15);
 80037bc:	210f      	movs	r1, #15
 80037be:	2010      	movs	r0, #16
 80037c0:	f7ff f958 	bl	8002a74 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(TIM3_IRQn, ENABLE);
 80037c4:	2101      	movs	r1, #1
 80037c6:	2010      	movs	r0, #16
 80037c8:	f7ff f93c 	bl	8002a44 <GPIO_IRQInterruptConfig>

	TIM_Base_SetConfig(htim3.Instance, &htim3.Init);
 80037cc:	0021      	movs	r1, r4
 80037ce:	c901      	ldmia	r1!, {r0}
 80037d0:	f7fe ffe4 	bl	800279c <TIM_Base_SetConfig>

	memset(&timPWM_Config, 0, sizeof(timPWM_Config));
 80037d4:	221c      	movs	r2, #28
 80037d6:	2100      	movs	r1, #0
 80037d8:	a801      	add	r0, sp, #4
 80037da:	f000 fb84 	bl	8003ee6 <memset>
	timPWM_Config.OCMode = TIM_OCMODE_PWM1;
 80037de:	2360      	movs	r3, #96	; 0x60
 80037e0:	9301      	str	r3, [sp, #4]
    timPWM_Config.OCPolarity = TIM_OCPOLARITY_LOW;
 80037e2:	9503      	str	r5, [sp, #12]
	timPWM_Config.Pulse = (htim3.Init.Period * 0) / 100 ;

    TIM_PWM_ConfigChannel(&htim3, &timPWM_Config, TIM_CHANNEL_1);
 80037e4:	2200      	movs	r2, #0
 80037e6:	a901      	add	r1, sp, #4
 80037e8:	0020      	movs	r0, r4
 80037ea:	f7ff f85b 	bl	80028a4 <TIM_PWM_ConfigChannel>
	TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80037ee:	2100      	movs	r1, #0
 80037f0:	0020      	movs	r0, r4
 80037f2:	f7ff f8c2 	bl	800297a <TIM_PWM_Start>

    TIM_PWM_ConfigChannel(&htim3, &timPWM_Config, TIM_CHANNEL_2);
 80037f6:	2204      	movs	r2, #4
 80037f8:	a901      	add	r1, sp, #4
 80037fa:	0020      	movs	r0, r4
 80037fc:	f7ff f852 	bl	80028a4 <TIM_PWM_ConfigChannel>
	TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003800:	2104      	movs	r1, #4
 8003802:	0020      	movs	r0, r4
 8003804:	f7ff f8b9 	bl	800297a <TIM_PWM_Start>

    TIM_PWM_ConfigChannel(&htim3, &timPWM_Config, TIM_CHANNEL_4);
 8003808:	220c      	movs	r2, #12
 800380a:	a901      	add	r1, sp, #4
 800380c:	0020      	movs	r0, r4
 800380e:	f7ff f849 	bl	80028a4 <TIM_PWM_ConfigChannel>
	TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003812:	210c      	movs	r1, #12
 8003814:	0020      	movs	r0, r4
 8003816:	f7ff f8b0 	bl	800297a <TIM_PWM_Start>
}
 800381a:	b009      	add	sp, #36	; 0x24
 800381c:	bd30      	pop	{r4, r5, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	2000094c 	.word	0x2000094c
 8003824:	40000400 	.word	0x40000400
 8003828:	0000ffff 	.word	0x0000ffff
 800382c:	40021000 	.word	0x40021000

08003830 <USART1_Init>:

void USART1_Init(void)
{
 8003830:	b510      	push	{r4, lr}
	usart1_handle.pUSARTx = USART1;
 8003832:	4c09      	ldr	r4, [pc, #36]	; (8003858 <USART1_Init+0x28>)
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <USART1_Init+0x2c>)
 8003836:	6023      	str	r3, [r4, #0]
	usart1_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8003838:	23e1      	movs	r3, #225	; 0xe1
 800383a:	025b      	lsls	r3, r3, #9
 800383c:	60a3      	str	r3, [r4, #8]

	USART_Init(&usart1_handle); 
 800383e:	0020      	movs	r0, r4
 8003840:	f7ff fa46 	bl	8002cd0 <USART_Init>

    GPIO_IRQInterruptConfig(IRQ_NO_USART1, ENABLE);
 8003844:	2101      	movs	r1, #1
 8003846:	201b      	movs	r0, #27
 8003848:	f7ff f8fc 	bl	8002a44 <GPIO_IRQInterruptConfig>

    //USART_PeripheralControl(USART1, ENABLE);
    usart1_handle.pUSARTx->CR1 |= (1 << USART_CR1_UE);
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	6813      	ldr	r3, [r2, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	430b      	orrs	r3, r1
 8003854:	6013      	str	r3, [r2, #0]

    //disable
    //usart1_handle.pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
} 
 8003856:	bd10      	pop	{r4, pc}
 8003858:	2000096c 	.word	0x2000096c
 800385c:	40013800 	.word	0x40013800

08003860 <I2c_Init>:

I2C_Handle_t* I2c_Init()
{
 8003860:	b510      	push	{r4, lr}
	I2C1Handle.pI2Cx = I2C1;
 8003862:	4c08      	ldr	r4, [pc, #32]	; (8003884 <I2c_Init+0x24>)
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <I2c_Init+0x28>)
 8003866:	6023      	str	r3, [r4, #0]
	I2C_Init(&I2C1Handle);
 8003868:	0020      	movs	r0, r4
 800386a:	f7ff f959 	bl	8002b20 <I2C_Init>

	GPIO_IRQInterruptConfig(IRQ_NO_I2C1, ENABLE);
 800386e:	2101      	movs	r1, #1
 8003870:	2017      	movs	r0, #23
 8003872:	f7ff f8e7 	bl	8002a44 <GPIO_IRQInterruptConfig>

	// I2C_PeripheralControl(I2C1,ENABLE);
	I2C1Handle.pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	6813      	ldr	r3, [r2, #0]
 800387a:	2101      	movs	r1, #1
 800387c:	430b      	orrs	r3, r1
 800387e:	6013      	str	r3, [r2, #0]

	//disable
	//I2C1Handle.pI2Cx->CR1 &= ~(1 << 0);

    return &I2C1Handle;
}
 8003880:	0020      	movs	r0, r4
 8003882:	bd10      	pop	{r4, pc}
 8003884:	2000091c 	.word	0x2000091c
 8003888:	40005400 	.word	0x40005400

0800388c <Knock_PD_trigger_IT_enable>:

void Knock_PD_trigger_IT_enable()
{
 800388c:	b510      	push	{r4, lr}
	GPIO_enable_IT_trigger();
 800388e:	f7ff f8bf 	bl	8002a10 <GPIO_enable_IT_trigger>
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI4_15, 14);
 8003892:	210e      	movs	r1, #14
 8003894:	2007      	movs	r0, #7
 8003896:	f7ff f8ed 	bl	8002a74 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI4_15, ENABLE);
 800389a:	2101      	movs	r1, #1
 800389c:	2007      	movs	r0, #7
 800389e:	f7ff f8d1 	bl	8002a44 <GPIO_IRQInterruptConfig>
}
 80038a2:	bd10      	pop	{r4, pc}

080038a4 <setLED>:


void setLED(uint32_t channel, uint16_t brightness)
{
	__TIM_SET_COMPARE(&htim3, channel, brightness);
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d103      	bne.n	80038b0 <setLED+0xc>
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <setLED+0x2c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6359      	str	r1, [r3, #52]	; 0x34
}
 80038ae:	4770      	bx	lr
	__TIM_SET_COMPARE(&htim3, channel, brightness);
 80038b0:	2804      	cmp	r0, #4
 80038b2:	d005      	beq.n	80038c0 <setLED+0x1c>
 80038b4:	2808      	cmp	r0, #8
 80038b6:	d007      	beq.n	80038c8 <setLED+0x24>
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <setLED+0x2c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6419      	str	r1, [r3, #64]	; 0x40
}
 80038be:	e7f6      	b.n	80038ae <setLED+0xa>
	__TIM_SET_COMPARE(&htim3, channel, brightness);
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <setLED+0x2c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6399      	str	r1, [r3, #56]	; 0x38
 80038c6:	e7f2      	b.n	80038ae <setLED+0xa>
 80038c8:	4b01      	ldr	r3, [pc, #4]	; (80038d0 <setLED+0x2c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	63d9      	str	r1, [r3, #60]	; 0x3c
 80038ce:	e7ee      	b.n	80038ae <setLED+0xa>
 80038d0:	2000094c 	.word	0x2000094c

080038d4 <led_logic_handler>:
//
//	}
//}

uint8_t led_logic_handler(uint8_t battery_soc, uint8_t plug_action, uint8_t pwr_direction, bool knock, uint8_t* active_leds)
{
 80038d4:	9900      	ldr	r1, [sp, #0]
	uint8_t led_to_glow = 0xFF;
		if(pwr_direction == SOURCING || knock)
 80038d6:	2a01      	cmp	r2, #1
 80038d8:	d014      	beq.n	8003904 <led_logic_handler+0x30>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d112      	bne.n	8003904 <led_logic_handler+0x30>
				active_leds[2] = 0;
			}
			return 0xFF;
		}

		else if(pwr_direction == SINKING)
 80038de:	2a00      	cmp	r2, #0
 80038e0:	d147      	bne.n	8003972 <led_logic_handler+0x9e>
		{
			if (battery_soc < 33){
 80038e2:	2820      	cmp	r0, #32
 80038e4:	d931      	bls.n	800394a <led_logic_handler+0x76>
				active_leds[0] = 1;
				active_leds[1] = 0;
				active_leds[2] = 0;
				led_to_glow = LED1;
			}else if(battery_soc >= 33 && battery_soc < 90){
 80038e6:	0003      	movs	r3, r0
 80038e8:	3b21      	subs	r3, #33	; 0x21
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b38      	cmp	r3, #56	; 0x38
 80038ee:	d933      	bls.n	8003958 <led_logic_handler+0x84>
				active_leds[0] = 1;
				active_leds[1] = 1;
				active_leds[2] = 0;
				led_to_glow = LED2;
			}else if(battery_soc >= 90 && battery_soc < 100){
 80038f0:	385a      	subs	r0, #90	; 0x5a
 80038f2:	b2c0      	uxtb	r0, r0
 80038f4:	2809      	cmp	r0, #9
 80038f6:	d836      	bhi.n	8003966 <led_logic_handler+0x92>
				active_leds[0] = 1;
 80038f8:	2301      	movs	r3, #1
 80038fa:	700b      	strb	r3, [r1, #0]
				active_leds[1] = 1;
 80038fc:	704b      	strb	r3, [r1, #1]
				active_leds[2] = 1;
 80038fe:	708b      	strb	r3, [r1, #2]
				led_to_glow = LED3;
 8003900:	0010      	movs	r0, r2
 8003902:	e00a      	b.n	800391a <led_logic_handler+0x46>
			if (battery_soc >= 10 && battery_soc < 33){
 8003904:	0003      	movs	r3, r0
 8003906:	3b0a      	subs	r3, #10
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b16      	cmp	r3, #22
 800390c:	d806      	bhi.n	800391c <led_logic_handler+0x48>
				active_leds[0] = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	700b      	strb	r3, [r1, #0]
				active_leds[1] = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	704b      	strb	r3, [r1, #1]
				active_leds[2] = 0;
 8003916:	708b      	strb	r3, [r1, #2]
			return 0xFF;
 8003918:	20ff      	movs	r0, #255	; 0xff
				led_to_glow = 0xFF;
			}
		}

		return led_to_glow;
	}
 800391a:	4770      	bx	lr
			}else if(battery_soc >= 33 && battery_soc < 90){
 800391c:	0003      	movs	r3, r0
 800391e:	3b21      	subs	r3, #33	; 0x21
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b38      	cmp	r3, #56	; 0x38
 8003924:	d805      	bhi.n	8003932 <led_logic_handler+0x5e>
				active_leds[0] = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	700b      	strb	r3, [r1, #0]
				active_leds[1] = 1;
 800392a:	704b      	strb	r3, [r1, #1]
				active_leds[2] = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	708b      	strb	r3, [r1, #2]
 8003930:	e7f2      	b.n	8003918 <led_logic_handler+0x44>
			}else if(battery_soc >= 90){
 8003932:	2859      	cmp	r0, #89	; 0x59
 8003934:	d904      	bls.n	8003940 <led_logic_handler+0x6c>
				active_leds[0] = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	700b      	strb	r3, [r1, #0]
				active_leds[1] = 1;
 800393a:	704b      	strb	r3, [r1, #1]
				active_leds[2] = 1;
 800393c:	708b      	strb	r3, [r1, #2]
 800393e:	e7eb      	b.n	8003918 <led_logic_handler+0x44>
				active_leds[0] = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	700b      	strb	r3, [r1, #0]
				active_leds[1] = 0;
 8003944:	704b      	strb	r3, [r1, #1]
				active_leds[2] = 0;
 8003946:	708b      	strb	r3, [r1, #2]
 8003948:	e7e6      	b.n	8003918 <led_logic_handler+0x44>
				active_leds[0] = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	700b      	strb	r3, [r1, #0]
				active_leds[1] = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	704b      	strb	r3, [r1, #1]
				active_leds[2] = 0;
 8003952:	708b      	strb	r3, [r1, #2]
				led_to_glow = LED1;
 8003954:	200c      	movs	r0, #12
 8003956:	e7e0      	b.n	800391a <led_logic_handler+0x46>
				active_leds[0] = 1;
 8003958:	2301      	movs	r3, #1
 800395a:	700b      	strb	r3, [r1, #0]
				active_leds[1] = 1;
 800395c:	704b      	strb	r3, [r1, #1]
				active_leds[2] = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	708b      	strb	r3, [r1, #2]
				led_to_glow = LED2;
 8003962:	2004      	movs	r0, #4
 8003964:	e7d9      	b.n	800391a <led_logic_handler+0x46>
				active_leds[0] = 1;
 8003966:	2301      	movs	r3, #1
 8003968:	700b      	strb	r3, [r1, #0]
				active_leds[1] = 1;
 800396a:	704b      	strb	r3, [r1, #1]
				active_leds[2] = 1;
 800396c:	708b      	strb	r3, [r1, #2]
				led_to_glow = 0xFF;
 800396e:	20ff      	movs	r0, #255	; 0xff
 8003970:	e7d3      	b.n	800391a <led_logic_handler+0x46>
	uint8_t led_to_glow = 0xFF;
 8003972:	20ff      	movs	r0, #255	; 0xff
 8003974:	e7d1      	b.n	800391a <led_logic_handler+0x46>
	...

08003978 <led_blink>:
		}
	}
}

void led_blink(uint8_t led, uint8_t cycle_num, uint32_t wait_time, uint16_t *brightness)
{
 8003978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397a:	46ce      	mov	lr, r9
 800397c:	4647      	mov	r7, r8
 800397e:	b580      	push	{r7, lr}
 8003980:	b083      	sub	sp, #12
 8003982:	0006      	movs	r6, r0
 8003984:	4689      	mov	r9, r1
 8003986:	0017      	movs	r7, r2
 8003988:	4698      	mov	r8, r3
	__vo uint8_t led_index = 0xFF;
 800398a:	466b      	mov	r3, sp
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	71da      	strb	r2, [r3, #7]

	switch (led) {
 8003990:	2804      	cmp	r0, #4
 8003992:	d00c      	beq.n	80039ae <led_blink+0x36>
 8003994:	280c      	cmp	r0, #12
 8003996:	d005      	beq.n	80039a4 <led_blink+0x2c>
 8003998:	2800      	cmp	r0, #0
 800399a:	d00c      	beq.n	80039b6 <led_blink+0x3e>
	        break;
	    case LED3:
	        led_index = 2;
	        break;
	    default:
	        led_index = 0xFF;
 800399c:	466b      	mov	r3, sp
 800399e:	22ff      	movs	r2, #255	; 0xff
 80039a0:	71da      	strb	r2, [r3, #7]
	        break;
 80039a2:	e002      	b.n	80039aa <led_blink+0x32>
	        led_index = 0;
 80039a4:	466b      	mov	r3, sp
 80039a6:	2200      	movs	r2, #0
 80039a8:	71da      	strb	r2, [r3, #7]
{
 80039aa:	2500      	movs	r5, #0
 80039ac:	e024      	b.n	80039f8 <led_blink+0x80>
	        led_index = 1;
 80039ae:	466b      	mov	r3, sp
 80039b0:	2201      	movs	r2, #1
 80039b2:	71da      	strb	r2, [r3, #7]
	        break;
 80039b4:	e7f9      	b.n	80039aa <led_blink+0x32>
	        led_index = 2;
 80039b6:	466b      	mov	r3, sp
 80039b8:	2202      	movs	r2, #2
 80039ba:	71da      	strb	r2, [r3, #7]
	        break;
 80039bc:	e7f5      	b.n	80039aa <led_blink+0x32>
	}

	for(uint8_t i=0; i < cycle_num; i++){
		setLED(led, max_brightness);
 80039be:	4912      	ldr	r1, [pc, #72]	; (8003a08 <led_blink+0x90>)
 80039c0:	0030      	movs	r0, r6
 80039c2:	f7ff ff6f 	bl	80038a4 <setLED>
		brightness[led_index] = max_brightness;
 80039c6:	466b      	mov	r3, sp
 80039c8:	1ddc      	adds	r4, r3, #7
 80039ca:	79db      	ldrb	r3, [r3, #7]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	2201      	movs	r2, #1
 80039d0:	4252      	negs	r2, r2
 80039d2:	4641      	mov	r1, r8
 80039d4:	52ca      	strh	r2, [r1, r3]
		delay(wait_time);
 80039d6:	0038      	movs	r0, r7
 80039d8:	f7fe fe74 	bl	80026c4 <delay>
		setLED(led, min_brightness);
 80039dc:	2100      	movs	r1, #0
 80039de:	0030      	movs	r0, r6
 80039e0:	f7ff ff60 	bl	80038a4 <setLED>
		brightness[led_index] = min_brightness;
 80039e4:	7824      	ldrb	r4, [r4, #0]
 80039e6:	0064      	lsls	r4, r4, #1
 80039e8:	4444      	add	r4, r8
 80039ea:	2300      	movs	r3, #0
 80039ec:	8023      	strh	r3, [r4, #0]
		delay(wait_time);
 80039ee:	0038      	movs	r0, r7
 80039f0:	f7fe fe68 	bl	80026c4 <delay>
	for(uint8_t i=0; i < cycle_num; i++){
 80039f4:	3501      	adds	r5, #1
 80039f6:	b2ed      	uxtb	r5, r5
 80039f8:	454d      	cmp	r5, r9
 80039fa:	d3e0      	bcc.n	80039be <led_blink+0x46>
	}

}
 80039fc:	b003      	add	sp, #12
 80039fe:	bcc0      	pop	{r6, r7}
 8003a00:	46b9      	mov	r9, r7
 8003a02:	46b0      	mov	r8, r6
 8003a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	0000ffff 	.word	0x0000ffff

08003a0c <dim_led>:
	}
	return led_to_glow;
}

uint16_t dim_led(uint8_t ledToGlow, uint16_t brightness[])
{
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	0005      	movs	r5, r0
 8003a12:	000e      	movs	r6, r1
	volatile uint16_t result;
	__vo uint8_t led_index = 0xFF;
 8003a14:	466b      	mov	r3, sp
 8003a16:	22ff      	movs	r2, #255	; 0xff
 8003a18:	715a      	strb	r2, [r3, #5]

	switch (ledToGlow) {
 8003a1a:	2804      	cmp	r0, #4
 8003a1c:	d041      	beq.n	8003aa2 <dim_led+0x96>
 8003a1e:	280c      	cmp	r0, #12
 8003a20:	d008      	beq.n	8003a34 <dim_led+0x28>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d041      	beq.n	8003aaa <dim_led+0x9e>
	        break;
	    case LED3:
	        led_index = 2;
	        break;
	    default:
	        result = 0;
 8003a26:	466b      	mov	r3, sp
 8003a28:	2200      	movs	r2, #0
 8003a2a:	80da      	strh	r2, [r3, #6]
	        led_index = 0xFF;
 8003a2c:	466b      	mov	r3, sp
 8003a2e:	32ff      	adds	r2, #255	; 0xff
 8003a30:	715a      	strb	r2, [r3, #5]
	        break;
 8003a32:	e002      	b.n	8003a3a <dim_led+0x2e>
	        led_index = 0;
 8003a34:	466b      	mov	r3, sp
 8003a36:	2200      	movs	r2, #0
 8003a38:	715a      	strb	r2, [r3, #5]
	}
	result = brightness[led_index];
 8003a3a:	466b      	mov	r3, sp
 8003a3c:	3305      	adds	r3, #5
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	5b9a      	ldrh	r2, [r3, r6]
 8003a44:	466b      	mov	r3, sp
 8003a46:	80da      	strh	r2, [r3, #6]

	while(result > 0)
 8003a48:	466b      	mov	r3, sp
 8003a4a:	3306      	adds	r3, #6
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02e      	beq.n	8003ab2 <dim_led+0xa6>
	{
		result-= 100;
 8003a54:	466b      	mov	r3, sp
 8003a56:	1d9c      	adds	r4, r3, #6
 8003a58:	88db      	ldrh	r3, [r3, #6]
 8003a5a:	3b64      	subs	r3, #100	; 0x64
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8023      	strh	r3, [r4, #0]
		setLED( ledToGlow, result);
 8003a60:	8821      	ldrh	r1, [r4, #0]
 8003a62:	b289      	uxth	r1, r1
 8003a64:	0028      	movs	r0, r5
 8003a66:	f7ff ff1d 	bl	80038a4 <setLED>
		brightness[led_index] = result;
 8003a6a:	466b      	mov	r3, sp
 8003a6c:	3305      	adds	r3, #5
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	8822      	ldrh	r2, [r4, #0]
 8003a74:	52f2      	strh	r2, [r6, r3]
		vTaskDelay(pdUS_TO_TICKS(1000));
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7fe f898 	bl	8001bac <vTaskDelay>
		taskYIELD();
 8003a7c:	f7fe fc7c 	bl	8002378 <vPortYield>
		if(result < 100){
 8003a80:	8823      	ldrh	r3, [r4, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b63      	cmp	r3, #99	; 0x63
 8003a86:	d8df      	bhi.n	8003a48 <dim_led+0x3c>
			result = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	8023      	strh	r3, [r4, #0]
			setLED( ledToGlow, 0);
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	0028      	movs	r0, r5
 8003a90:	f7ff ff08 	bl	80038a4 <setLED>
			brightness[led_index] = result;
 8003a94:	466b      	mov	r3, sp
 8003a96:	3305      	adds	r3, #5
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	8822      	ldrh	r2, [r4, #0]
 8003a9e:	52f2      	strh	r2, [r6, r3]
 8003aa0:	e7d2      	b.n	8003a48 <dim_led+0x3c>
	        led_index = 1;
 8003aa2:	466b      	mov	r3, sp
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	715a      	strb	r2, [r3, #5]
	        break;
 8003aa8:	e7c7      	b.n	8003a3a <dim_led+0x2e>
	        led_index = 2;
 8003aaa:	466b      	mov	r3, sp
 8003aac:	2202      	movs	r2, #2
 8003aae:	715a      	strb	r2, [r3, #5]
	        break;
 8003ab0:	e7c3      	b.n	8003a3a <dim_led+0x2e>
		}
	}

	return result;
 8003ab2:	466b      	mov	r3, sp
 8003ab4:	88d8      	ldrh	r0, [r3, #6]
 8003ab6:	b280      	uxth	r0, r0
}
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd70      	pop	{r4, r5, r6, pc}

08003abc <brighten_led>:

uint16_t brighten_led(uint8_t ledToGlow, uint16_t brightness[])
{
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	0005      	movs	r5, r0
 8003ac2:	000e      	movs	r6, r1
	volatile uint16_t result;
	__vo uint8_t led_index = 0xFF;
 8003ac4:	466b      	mov	r3, sp
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	715a      	strb	r2, [r3, #5]

	switch (ledToGlow) {
 8003aca:	2804      	cmp	r0, #4
 8003acc:	d045      	beq.n	8003b5a <brighten_led+0x9e>
 8003ace:	280c      	cmp	r0, #12
 8003ad0:	d008      	beq.n	8003ae4 <brighten_led+0x28>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d045      	beq.n	8003b62 <brighten_led+0xa6>
	        break;
	    case LED3:
	        led_index = 2;
	        break;
	    default:
	        result = 0;
 8003ad6:	466b      	mov	r3, sp
 8003ad8:	2200      	movs	r2, #0
 8003ada:	80da      	strh	r2, [r3, #6]
	        led_index = 0xFF;
 8003adc:	466b      	mov	r3, sp
 8003ade:	32ff      	adds	r2, #255	; 0xff
 8003ae0:	715a      	strb	r2, [r3, #5]
	        break;
 8003ae2:	e002      	b.n	8003aea <brighten_led+0x2e>
	        led_index = 0;
 8003ae4:	466b      	mov	r3, sp
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	715a      	strb	r2, [r3, #5]
	}
	result = brightness[led_index];
 8003aea:	466b      	mov	r3, sp
 8003aec:	3305      	adds	r3, #5
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	5b9a      	ldrh	r2, [r3, r6]
 8003af4:	466b      	mov	r3, sp
 8003af6:	80da      	strh	r2, [r3, #6]

	while(result < htim3.Init.Period)
 8003af8:	466b      	mov	r3, sp
 8003afa:	3306      	adds	r3, #6
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <brighten_led+0xb8>)
 8003b02:	68d2      	ldr	r2, [r2, #12]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d230      	bcs.n	8003b6a <brighten_led+0xae>
	{
		result += 200;
 8003b08:	466b      	mov	r3, sp
 8003b0a:	1d9c      	adds	r4, r3, #6
 8003b0c:	88db      	ldrh	r3, [r3, #6]
 8003b0e:	33c8      	adds	r3, #200	; 0xc8
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8023      	strh	r3, [r4, #0]
		setLED( ledToGlow, result);
 8003b14:	8821      	ldrh	r1, [r4, #0]
 8003b16:	b289      	uxth	r1, r1
 8003b18:	0028      	movs	r0, r5
 8003b1a:	f7ff fec3 	bl	80038a4 <setLED>
		brightness[led_index] = result;
 8003b1e:	466b      	mov	r3, sp
 8003b20:	3305      	adds	r3, #5
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	8822      	ldrh	r2, [r4, #0]
 8003b28:	52f2      	strh	r2, [r6, r3]
		vTaskDelay(pdUS_TO_TICKS(1000));
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f7fe f83e 	bl	8001bac <vTaskDelay>
		taskYIELD();
 8003b30:	f7fe fc22 	bl	8002378 <vPortYield>
		if(result > 65535 - 200){
 8003b34:	8823      	ldrh	r3, [r4, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <brighten_led+0xbc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d9dc      	bls.n	8003af8 <brighten_led+0x3c>
			result = 65535;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	425b      	negs	r3, r3
 8003b42:	8023      	strh	r3, [r4, #0]
			setLED( ledToGlow, 0xFFFF);
 8003b44:	490d      	ldr	r1, [pc, #52]	; (8003b7c <brighten_led+0xc0>)
 8003b46:	0028      	movs	r0, r5
 8003b48:	f7ff feac 	bl	80038a4 <setLED>
			brightness[led_index] = result;
 8003b4c:	466b      	mov	r3, sp
 8003b4e:	3305      	adds	r3, #5
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	8822      	ldrh	r2, [r4, #0]
 8003b56:	52f2      	strh	r2, [r6, r3]
 8003b58:	e7ce      	b.n	8003af8 <brighten_led+0x3c>
	        led_index = 1;
 8003b5a:	466b      	mov	r3, sp
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	715a      	strb	r2, [r3, #5]
	        break;
 8003b60:	e7c3      	b.n	8003aea <brighten_led+0x2e>
	        led_index = 2;
 8003b62:	466b      	mov	r3, sp
 8003b64:	2202      	movs	r2, #2
 8003b66:	715a      	strb	r2, [r3, #5]
	        break;
 8003b68:	e7bf      	b.n	8003aea <brighten_led+0x2e>
		}
	}
	return result;
 8003b6a:	466b      	mov	r3, sp
 8003b6c:	88d8      	ldrh	r0, [r3, #6]
 8003b6e:	b280      	uxth	r0, r0
}
 8003b70:	b002      	add	sp, #8
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	2000094c 	.word	0x2000094c
 8003b78:	0000ff37 	.word	0x0000ff37
 8003b7c:	0000ffff 	.word	0x0000ffff

08003b80 <dim_leds>:

void dim_leds(uint8_t leds[], uint8_t active_leds[], uint16_t brightness[])
{
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	46d6      	mov	lr, sl
 8003b84:	464f      	mov	r7, r9
 8003b86:	4646      	mov	r6, r8
 8003b88:	b5c0      	push	{r6, r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	4680      	mov	r8, r0
 8003b8e:	000f      	movs	r7, r1
 8003b90:	0016      	movs	r6, r2
    uint16_t result[NUM_LEDS];

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003b92:	2300      	movs	r3, #0
 8003b94:	e005      	b.n	8003ba2 <dim_leds+0x22>
        result[i] = brightness[i];
 8003b96:	005a      	lsls	r2, r3, #1
 8003b98:	5b91      	ldrh	r1, [r2, r6]
 8003b9a:	4668      	mov	r0, sp
 8003b9c:	5211      	strh	r1, [r2, r0]
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d9f7      	bls.n	8003b96 <dim_leds+0x16>
    }

    while (1) {
    	uint8_t allDimmed = 1;

        for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003ba6:	2400      	movs	r4, #0
    	uint8_t allDimmed = 1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	469a      	mov	sl, r3
        for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003bac:	e010      	b.n	8003bd0 <dim_leds+0x50>
                allDimmed = 0;
                result[i] -= 50;
                setLED(leds[i], result[i]);
                brightness[i] = result[i];
            } else {
                setLED(leds[i], min_brightness);
 8003bae:	4643      	mov	r3, r8
 8003bb0:	5d18      	ldrb	r0, [r3, r4]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f7ff fe76 	bl	80038a4 <setLED>
                brightness[i] = min_brightness;
 8003bb8:	0063      	lsls	r3, r4, #1
 8003bba:	18f3      	adds	r3, r6, r3
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	801a      	strh	r2, [r3, #0]
            }
            if(result[i] < min_brightness + 50){
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	466a      	mov	r2, sp
 8003bc6:	5a9b      	ldrh	r3, [r3, r2]
 8003bc8:	2b31      	cmp	r3, #49	; 0x31
 8003bca:	d91d      	bls.n	8003c08 <dim_leds+0x88>
        for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003bcc:	3401      	adds	r4, #1
 8003bce:	b2e4      	uxtb	r4, r4
 8003bd0:	2c02      	cmp	r4, #2
 8003bd2:	d825      	bhi.n	8003c20 <dim_leds+0xa0>
        	if(active_leds[i] == 0){
 8003bd4:	0025      	movs	r5, r4
 8003bd6:	5d3b      	ldrb	r3, [r7, r4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f7      	beq.n	8003bcc <dim_leds+0x4c>
            if (result[i] > min_brightness) {
 8003bdc:	46a1      	mov	r9, r4
 8003bde:	0063      	lsls	r3, r4, #1
 8003be0:	466a      	mov	r2, sp
 8003be2:	5a99      	ldrh	r1, [r3, r2]
 8003be4:	2900      	cmp	r1, #0
 8003be6:	d0e2      	beq.n	8003bae <dim_leds+0x2e>
                result[i] -= 50;
 8003be8:	3932      	subs	r1, #50	; 0x32
 8003bea:	b28b      	uxth	r3, r1
 8003bec:	469a      	mov	sl, r3
 8003bee:	0063      	lsls	r3, r4, #1
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	5299      	strh	r1, [r3, r2]
                setLED(leds[i], result[i]);
 8003bf4:	4643      	mov	r3, r8
 8003bf6:	5d18      	ldrb	r0, [r3, r4]
 8003bf8:	f7ff fe54 	bl	80038a4 <setLED>
                brightness[i] = result[i];
 8003bfc:	0063      	lsls	r3, r4, #1
 8003bfe:	4652      	mov	r2, sl
 8003c00:	52f2      	strh	r2, [r6, r3]
                allDimmed = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	469a      	mov	sl, r3
 8003c06:	e7db      	b.n	8003bc0 <dim_leds+0x40>
            	setLED(leds[i], min_brightness);
 8003c08:	4643      	mov	r3, r8
 8003c0a:	5d58      	ldrb	r0, [r3, r5]
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	f7ff fe49 	bl	80038a4 <setLED>
            	brightness[i] = min_brightness;
 8003c12:	006d      	lsls	r5, r5, #1
 8003c14:	1975      	adds	r5, r6, r5
 8003c16:	2300      	movs	r3, #0
 8003c18:	802b      	strh	r3, [r5, #0]
            	allDimmed = 1;
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	469a      	mov	sl, r3
 8003c1e:	e7d5      	b.n	8003bcc <dim_leds+0x4c>
            }
        }

        if (allDimmed) {
 8003c20:	4653      	mov	r3, sl
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <dim_leds+0xb2>
        }

        vTaskDelay(pdUS_TO_TICKS(1000));
        taskYIELD();
    }
}
 8003c26:	b002      	add	sp, #8
 8003c28:	bce0      	pop	{r5, r6, r7}
 8003c2a:	46ba      	mov	sl, r7
 8003c2c:	46b1      	mov	r9, r6
 8003c2e:	46a8      	mov	r8, r5
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vTaskDelay(pdUS_TO_TICKS(1000));
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7fd ffba 	bl	8001bac <vTaskDelay>
        taskYIELD();
 8003c38:	f7fe fb9e 	bl	8002378 <vPortYield>
    while (1) {
 8003c3c:	e7b3      	b.n	8003ba6 <dim_leds+0x26>
	...

08003c40 <brighten_leds>:

void brighten_leds(uint8_t *leds, uint8_t *active_leds, uint16_t *brightness)
{
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	46d6      	mov	lr, sl
 8003c44:	464f      	mov	r7, r9
 8003c46:	4646      	mov	r6, r8
 8003c48:	b5c0      	push	{r6, r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	000f      	movs	r7, r1
 8003c50:	0016      	movs	r6, r2
    uint16_t result[NUM_LEDS];

    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003c52:	2300      	movs	r3, #0
 8003c54:	e005      	b.n	8003c62 <brighten_leds+0x22>
        result[i] = brightness[i];
 8003c56:	005a      	lsls	r2, r3, #1
 8003c58:	5b91      	ldrh	r1, [r2, r6]
 8003c5a:	4668      	mov	r0, sp
 8003c5c:	5211      	strh	r1, [r2, r0]
    for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003c5e:	3301      	adds	r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d9f7      	bls.n	8003c56 <brighten_leds+0x16>
    }

    while (1) {
    	uint8_t allBrightened = 1;

        for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003c66:	2400      	movs	r4, #0
    	uint8_t allBrightened = 1;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	469a      	mov	sl, r3
        for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003c6c:	e011      	b.n	8003c92 <brighten_leds+0x52>
                allBrightened = 0;
                result[i] += 50;
                setLED(leds[i], result[i]);
                brightness[i] = result[i];
            } else {
            	setLED( leds[i], max_brightness);
 8003c6e:	4643      	mov	r3, r8
 8003c70:	5d18      	ldrb	r0, [r3, r4]
 8003c72:	4924      	ldr	r1, [pc, #144]	; (8003d04 <brighten_leds+0xc4>)
 8003c74:	f7ff fe16 	bl	80038a4 <setLED>
            	brightness[i] = max_brightness;
 8003c78:	0063      	lsls	r3, r4, #1
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4252      	negs	r2, r2
 8003c7e:	52f2      	strh	r2, [r6, r3]
            }
            if(result[i] > max_brightness - 50){
 8003c80:	464b      	mov	r3, r9
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	466a      	mov	r2, sp
 8003c86:	5a9a      	ldrh	r2, [r3, r2]
 8003c88:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <brighten_leds+0xc8>)
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d81f      	bhi.n	8003cce <brighten_leds+0x8e>
        for (uint8_t i = 0; i < NUM_LEDS; i++) {
 8003c8e:	3401      	adds	r4, #1
 8003c90:	b2e4      	uxtb	r4, r4
 8003c92:	2c02      	cmp	r4, #2
 8003c94:	d827      	bhi.n	8003ce6 <brighten_leds+0xa6>
        	if(active_leds[i] == 0){
 8003c96:	0025      	movs	r5, r4
 8003c98:	5d3b      	ldrb	r3, [r7, r4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f7      	beq.n	8003c8e <brighten_leds+0x4e>
            if (result[i] < htim3.Init.Period) {
 8003c9e:	46a1      	mov	r9, r4
 8003ca0:	0063      	lsls	r3, r4, #1
 8003ca2:	466a      	mov	r2, sp
 8003ca4:	5a99      	ldrh	r1, [r3, r2]
 8003ca6:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <brighten_leds+0xcc>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4299      	cmp	r1, r3
 8003cac:	d2df      	bcs.n	8003c6e <brighten_leds+0x2e>
                result[i] += 50;
 8003cae:	3132      	adds	r1, #50	; 0x32
 8003cb0:	b28b      	uxth	r3, r1
 8003cb2:	469a      	mov	sl, r3
 8003cb4:	0063      	lsls	r3, r4, #1
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	5299      	strh	r1, [r3, r2]
                setLED(leds[i], result[i]);
 8003cba:	4643      	mov	r3, r8
 8003cbc:	5d18      	ldrb	r0, [r3, r4]
 8003cbe:	f7ff fdf1 	bl	80038a4 <setLED>
                brightness[i] = result[i];
 8003cc2:	0063      	lsls	r3, r4, #1
 8003cc4:	4652      	mov	r2, sl
 8003cc6:	52f2      	strh	r2, [r6, r3]
                allBrightened = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	469a      	mov	sl, r3
 8003ccc:	e7d8      	b.n	8003c80 <brighten_leds+0x40>
            	setLED( leds[i], max_brightness);
 8003cce:	4643      	mov	r3, r8
 8003cd0:	5d58      	ldrb	r0, [r3, r5]
 8003cd2:	490c      	ldr	r1, [pc, #48]	; (8003d04 <brighten_leds+0xc4>)
 8003cd4:	f7ff fde6 	bl	80038a4 <setLED>
            	brightness[i] = max_brightness;
 8003cd8:	006d      	lsls	r5, r5, #1
 8003cda:	2301      	movs	r3, #1
 8003cdc:	425b      	negs	r3, r3
 8003cde:	5373      	strh	r3, [r6, r5]
            	allBrightened = 1;
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	469a      	mov	sl, r3
 8003ce4:	e7d3      	b.n	8003c8e <brighten_leds+0x4e>
            }

        }

        if (allBrightened) {
 8003ce6:	4653      	mov	r3, sl
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <brighten_leds+0xb8>
        }

        vTaskDelay(pdUS_TO_TICKS(1000));
        taskYIELD();
    }
}
 8003cec:	b002      	add	sp, #8
 8003cee:	bce0      	pop	{r5, r6, r7}
 8003cf0:	46ba      	mov	sl, r7
 8003cf2:	46b1      	mov	r9, r6
 8003cf4:	46a8      	mov	r8, r5
 8003cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vTaskDelay(pdUS_TO_TICKS(1000));
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7fd ff57 	bl	8001bac <vTaskDelay>
        taskYIELD();
 8003cfe:	f7fe fb3b 	bl	8002378 <vPortYield>
    while (1) {
 8003d02:	e7b0      	b.n	8003c66 <brighten_leds+0x26>
 8003d04:	0000ffff 	.word	0x0000ffff
 8003d08:	0000ffcd 	.word	0x0000ffcd
 8003d0c:	2000094c 	.word	0x2000094c

08003d10 <IWDG_Init>:

void IWDG_Init()
{
	hiwdg.Instance = IWDG;
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <IWDG_Init+0x40>)
 8003d12:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <IWDG_Init+0x44>)
 8003d14:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003d16:	2106      	movs	r1, #6
 8003d18:	6059      	str	r1, [r3, #4]
	hiwdg.Init.Window = 0;
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	60d9      	str	r1, [r3, #12]
	hiwdg.Init.Reload = 0xFFFF;
 8003d1e:	490e      	ldr	r1, [pc, #56]	; (8003d58 <IWDG_Init+0x48>)
 8003d20:	6099      	str	r1, [r3, #8]

	WRITE_REG(hiwdg.Instance->KR, IWDG_KEY_ENABLE);
 8003d22:	490e      	ldr	r1, [pc, #56]	; (8003d5c <IWDG_Init+0x4c>)
 8003d24:	6011      	str	r1, [r2, #0]
	WRITE_REG(hiwdg.Instance->KR, IWDG_KEY_WRITE_ACCESS_ENABLE);
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	490d      	ldr	r1, [pc, #52]	; (8003d60 <IWDG_Init+0x50>)
 8003d2a:	6011      	str	r1, [r2, #0]

	hiwdg.Instance->PR = hiwdg.Init.Prescaler;
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	6051      	str	r1, [r2, #4]
    hiwdg.Instance->RLR = hiwdg.Init.Reload;
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	6093      	str	r3, [r2, #8]

	while ((hiwdg.Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d36:	68d3      	ldr	r3, [r2, #12]
 8003d38:	075b      	lsls	r3, r3, #29
 8003d3a:	d1fc      	bne.n	8003d36 <IWDG_Init+0x26>
	{

	}

	if (hiwdg.Instance->WINR != hiwdg.Init.Window)
 8003d3c:	6911      	ldr	r1, [r2, #16]
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <IWDG_Init+0x40>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4299      	cmp	r1, r3
 8003d44:	d000      	beq.n	8003d48 <IWDG_Init+0x38>
//		hiwdg.Instance->WINR = hiwdg.Init.Window;
	}else
	{
		WRITE_REG(hiwdg.Instance->KR, IWDG_KEY_RELOAD);
	}
}
 8003d46:	4770      	bx	lr
		WRITE_REG(hiwdg.Instance->KR, IWDG_KEY_RELOAD);
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <IWDG_Init+0x54>)
 8003d4a:	6013      	str	r3, [r2, #0]
}
 8003d4c:	e7fb      	b.n	8003d46 <IWDG_Init+0x36>
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	2000093c 	.word	0x2000093c
 8003d54:	40003000 	.word	0x40003000
 8003d58:	0000ffff 	.word	0x0000ffff
 8003d5c:	0000cccc 	.word	0x0000cccc
 8003d60:	00005555 	.word	0x00005555
 8003d64:	0000aaaa 	.word	0x0000aaaa

08003d68 <IWDG_Refresh>:
	}
}

void IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
	WRITE_REG(hiwdg->Instance->KR, IWDG_KEY_RELOAD);
 8003d68:	6803      	ldr	r3, [r0, #0]
 8003d6a:	4a01      	ldr	r2, [pc, #4]	; (8003d70 <IWDG_Refresh+0x8>)
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	4770      	bx	lr
 8003d70:	0000aaaa 	.word	0x0000aaaa

08003d74 <read_i2c_generic>:

void read_i2c_generic(I2C_Handle_t *pI2CHandle, uint8_t device_addr, uint8_t reg_addr, uint8_t *buf, uint8_t len){
 8003d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d76:	b085      	sub	sp, #20
 8003d78:	0004      	movs	r4, r0
 8003d7a:	000d      	movs	r5, r1
 8003d7c:	001e      	movs	r6, r3
 8003d7e:	ab0a      	add	r3, sp, #40	; 0x28
 8003d80:	781f      	ldrb	r7, [r3, #0]
 8003d82:	230f      	movs	r3, #15
 8003d84:	446b      	add	r3, sp
 8003d86:	701a      	strb	r2, [r3, #0]
	   while(I2C_MasterSendDataIT(pI2CHandle, &reg_addr, 1, device_addr, I2C_ENABLE_SR) != I2C_READY);
 8003d88:	2201      	movs	r2, #1
 8003d8a:	9200      	str	r2, [sp, #0]
 8003d8c:	002b      	movs	r3, r5
 8003d8e:	210f      	movs	r1, #15
 8003d90:	4469      	add	r1, sp
 8003d92:	0020      	movs	r0, r4
 8003d94:	f7fe fef7 	bl	8002b86 <I2C_MasterSendDataIT>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d1f5      	bne.n	8003d88 <read_i2c_generic+0x14>

	   pI2CHandle->rxCmplt = RESET;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	7723      	strb	r3, [r4, #28]
	   while(I2C_MasterReceiveDataIT(pI2CHandle, buf, len, device_addr, I2C_ENABLE_SR) != I2C_READY);
 8003da0:	2201      	movs	r2, #1
 8003da2:	9200      	str	r2, [sp, #0]
 8003da4:	002b      	movs	r3, r5
 8003da6:	003a      	movs	r2, r7
 8003da8:	0031      	movs	r1, r6
 8003daa:	0020      	movs	r0, r4
 8003dac:	f7fe ff1a 	bl	8002be4 <I2C_MasterReceiveDataIT>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d1f5      	bne.n	8003da0 <read_i2c_generic+0x2c>

	   while(pI2CHandle->rxCmplt != SET)
 8003db4:	7f23      	ldrb	r3, [r4, #28]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d1fc      	bne.n	8003db4 <read_i2c_generic+0x40>
	   {

	   }
	   pI2CHandle->rxCmplt = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	7723      	strb	r3, [r4, #28]
}
 8003dbe:	b005      	add	sp, #20
 8003dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003dc4 <write_i2c_generic>:

void write_i2c_generic(I2C_Handle_t *pI2CHandle, uint8_t device_addr, uint8_t reg_addr, uint8_t *data, uint8_t len){
 8003dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	0006      	movs	r6, r0
 8003dca:	000d      	movs	r5, r1
 8003dcc:	001c      	movs	r4, r3
 8003dce:	ab08      	add	r3, sp, #32
 8003dd0:	781f      	ldrb	r7, [r3, #0]
    while(I2C_MasterSendDataIT(pI2CHandle, data, len , device_addr, I2C_ENABLE_SR) != I2C_READY);
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	9200      	str	r2, [sp, #0]
 8003dd6:	002b      	movs	r3, r5
 8003dd8:	003a      	movs	r2, r7
 8003dda:	0021      	movs	r1, r4
 8003ddc:	0030      	movs	r0, r6
 8003dde:	f7fe fed2 	bl	8002b86 <I2C_MasterSendDataIT>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d1f5      	bne.n	8003dd2 <write_i2c_generic+0xe>
    delay(200000);
 8003de6:	4802      	ldr	r0, [pc, #8]	; (8003df0 <write_i2c_generic+0x2c>)
 8003de8:	f7fe fc6c 	bl	80026c4 <delay>
}
 8003dec:	b003      	add	sp, #12
 8003dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df0:	00030d40 	.word	0x00030d40

08003df4 <prepare_to_sleep>:

void prepare_to_sleep()
{
 8003df4:	b510      	push	{r4, lr}
	PWR_PCLK_EN();
 8003df6:	4c11      	ldr	r4, [pc, #68]	; (8003e3c <prepare_to_sleep+0x48>)
 8003df8:	69e2      	ldr	r2, [r4, #28]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	055b      	lsls	r3, r3, #21
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61e3      	str	r3, [r4, #28]
	suspend_systick_tim();
 8003e02:	f7fe fcbb 	bl	800277c <suspend_systick_tim>

	GPIOB_PCLK_DI();
 8003e06:	6963      	ldr	r3, [r4, #20]
 8003e08:	4a0d      	ldr	r2, [pc, #52]	; (8003e40 <prepare_to_sleep+0x4c>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	6163      	str	r3, [r4, #20]
	TIM3_PCLK_DI();
 8003e0e:	69e3      	ldr	r3, [r4, #28]
 8003e10:	2202      	movs	r2, #2
 8003e12:	4393      	bics	r3, r2
 8003e14:	61e3      	str	r3, [r4, #28]
//	I2C1_PCLK_DI();
	USART1_PCLK_DI();
 8003e16:	69a3      	ldr	r3, [r4, #24]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <prepare_to_sleep+0x50>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61a3      	str	r3, [r4, #24]

	uint32_t tmpreg = 0;
	tmpreg = PWR->CR;
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <prepare_to_sleep+0x54>)
 8003e20:	6813      	ldr	r3, [r2, #0]
	tmpreg &= CR_DS_MASK;
 8003e22:	490a      	ldr	r1, [pc, #40]	; (8003e4c <prepare_to_sleep+0x58>)
 8003e24:	400b      	ands	r3, r1
	PWR->CR = tmpreg;
 8003e26:	6013      	str	r3, [r2, #0]

	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <prepare_to_sleep+0x5c>)
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	611a      	str	r2, [r3, #16]

	__WFI();
 8003e32:	bf30      	wfi

	SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003e34:	691a      	ldr	r2, [r3, #16]
 8003e36:	438a      	bics	r2, r1
 8003e38:	611a      	str	r2, [r3, #16]
}
 8003e3a:	bd10      	pop	{r4, pc}
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	fffbffff 	.word	0xfffbffff
 8003e44:	ffffbfff 	.word	0xffffbfff
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	fffff3fc 	.word	0xfffff3fc
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <prepare_to_wakeup>:

void prepare_to_wakeup()
{
 8003e54:	b510      	push	{r4, lr}

	PWR_PCLK_DI();
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <prepare_to_wakeup+0x30>)
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	490b      	ldr	r1, [pc, #44]	; (8003e88 <prepare_to_wakeup+0x34>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	61da      	str	r2, [r3, #28]
	GPIOB_PCLK_EN();
 8003e60:	6959      	ldr	r1, [r3, #20]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	02d2      	lsls	r2, r2, #11
 8003e66:	430a      	orrs	r2, r1
 8003e68:	615a      	str	r2, [r3, #20]
	TIM3_PCLK_EN();
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	61da      	str	r2, [r3, #28]
//	I2C1_PCLK_EN();
	USART1_PCLK_EN();
 8003e72:	6999      	ldr	r1, [r3, #24]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	01d2      	lsls	r2, r2, #7
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	619a      	str	r2, [r3, #24]

	resume_systick_tim();
 8003e7c:	f7fe fc86 	bl	800278c <resume_systick_tim>
}
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	40021000 	.word	0x40021000
 8003e88:	efffffff 	.word	0xefffffff

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	2600      	movs	r6, #0
 8003e90:	4d0c      	ldr	r5, [pc, #48]	; (8003ec4 <__libc_init_array+0x38>)
 8003e92:	4c0d      	ldr	r4, [pc, #52]	; (8003ec8 <__libc_init_array+0x3c>)
 8003e94:	1b64      	subs	r4, r4, r5
 8003e96:	10a4      	asrs	r4, r4, #2
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	2600      	movs	r6, #0
 8003e9e:	f000 f82b 	bl	8003ef8 <_init>
 8003ea2:	4d0a      	ldr	r5, [pc, #40]	; (8003ecc <__libc_init_array+0x40>)
 8003ea4:	4c0a      	ldr	r4, [pc, #40]	; (8003ed0 <__libc_init_array+0x44>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	00b3      	lsls	r3, r6, #2
 8003eb2:	58eb      	ldr	r3, [r5, r3]
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	00b3      	lsls	r3, r6, #2
 8003ebc:	58eb      	ldr	r3, [r5, r3]
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08003f84 	.word	0x08003f84
 8003ec8:	08003f84 	.word	0x08003f84
 8003ecc:	08003f84 	.word	0x08003f84
 8003ed0:	08003f88 	.word	0x08003f88

08003ed4 <memcpy>:
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d100      	bne.n	8003ede <memcpy+0xa>
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	5ccc      	ldrb	r4, [r1, r3]
 8003ee0:	54c4      	strb	r4, [r0, r3]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	e7f8      	b.n	8003ed8 <memcpy+0x4>

08003ee6 <memset>:
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	1882      	adds	r2, r0, r2
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d100      	bne.n	8003ef0 <memset+0xa>
 8003eee:	4770      	bx	lr
 8003ef0:	7019      	strb	r1, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	e7f9      	b.n	8003eea <memset+0x4>
	...

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
